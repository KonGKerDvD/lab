<?php
/**
 * Company
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Company Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Company implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Company';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name_local' => 'string',
        'name_foreign' => 'string',
        'address_local' => 'string',
        'address_foreign' => 'string',
        'company_tax_id' => 'string',
        'logo_image' => 'string',
        'fax' => 'string',
        'phone1' => 'string',
        'phone2' => 'string',
        'phone3' => 'string',
        'websites' => 'string',
        'company_type' => '\OpenAPI\Client\Model\CompanyTypeEnum',
        'created_on' => '\DateTime',
        'modified_on' => '\DateTime',
        'is_default' => 'bool',
        'address_local_line2' => 'string',
        'address_foreign_line2' => 'string',
        'vat_rate' => 'int',
        'is_vat' => 'bool',
        'email' => 'string',
        'branch' => 'string',
        'address_local_line3' => 'string',
        'address_foreign_line3' => 'string',
        'contact_person' => 'string',
        'is_active' => 'bool',
        'remarks' => 'string',
        'gallery_id' => 'int',
        'branch_foreign' => 'string',
        'branch_code' => 'string',
        'contact_type' => 'int',
        'default_credit_days' => 'int',
        'logo_type' => 'int',
        'is_registered' => 'bool',
        'is_advance' => 'bool',
        'address' => 'string',
        'province_id' => 'int',
        'amphur_id' => 'int',
        'district_id' => 'int',
        'zip_code' => 'string',
        'support_code' => 'string',
        'sales_type' => 'OneOfSalesType',
        'company_preferences' => 'OneOfCompanyPreferences',
        'payroll_preferences' => 'OneOfPayrollPreferences',
        'company_subscription' => '\OpenAPI\Client\Model\CompanySubscription[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name_local' => null,
        'name_foreign' => null,
        'address_local' => null,
        'address_foreign' => null,
        'company_tax_id' => null,
        'logo_image' => null,
        'fax' => null,
        'phone1' => null,
        'phone2' => null,
        'phone3' => null,
        'websites' => null,
        'company_type' => null,
        'created_on' => 'date-time',
        'modified_on' => 'date-time',
        'is_default' => null,
        'address_local_line2' => null,
        'address_foreign_line2' => null,
        'vat_rate' => 'int32',
        'is_vat' => null,
        'email' => null,
        'branch' => null,
        'address_local_line3' => null,
        'address_foreign_line3' => null,
        'contact_person' => null,
        'is_active' => null,
        'remarks' => null,
        'gallery_id' => 'int64',
        'branch_foreign' => null,
        'branch_code' => null,
        'contact_type' => 'int32',
        'default_credit_days' => 'int32',
        'logo_type' => 'int32',
        'is_registered' => null,
        'is_advance' => null,
        'address' => null,
        'province_id' => 'int32',
        'amphur_id' => 'int32',
        'district_id' => 'int32',
        'zip_code' => null,
        'support_code' => null,
        'sales_type' => null,
        'company_preferences' => null,
        'payroll_preferences' => null,
        'company_subscription' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name_local' => 'nameLocal',
        'name_foreign' => 'nameForeign',
        'address_local' => 'addressLocal',
        'address_foreign' => 'addressForeign',
        'company_tax_id' => 'companyTaxId',
        'logo_image' => 'logoImage',
        'fax' => 'fax',
        'phone1' => 'phone1',
        'phone2' => 'phone2',
        'phone3' => 'phone3',
        'websites' => 'websites',
        'company_type' => 'companyType',
        'created_on' => 'createdOn',
        'modified_on' => 'modifiedOn',
        'is_default' => 'isDefault',
        'address_local_line2' => 'addressLocalLine2',
        'address_foreign_line2' => 'addressForeignLine2',
        'vat_rate' => 'vatRate',
        'is_vat' => 'isVat',
        'email' => 'email',
        'branch' => 'branch',
        'address_local_line3' => 'addressLocalLine3',
        'address_foreign_line3' => 'addressForeignLine3',
        'contact_person' => 'contactPerson',
        'is_active' => 'isActive',
        'remarks' => 'remarks',
        'gallery_id' => 'galleryId',
        'branch_foreign' => 'branchForeign',
        'branch_code' => 'branchCode',
        'contact_type' => 'contactType',
        'default_credit_days' => 'defaultCreditDays',
        'logo_type' => 'logoType',
        'is_registered' => 'isRegistered',
        'is_advance' => 'isAdvance',
        'address' => 'address',
        'province_id' => 'provinceId',
        'amphur_id' => 'amphurId',
        'district_id' => 'districtId',
        'zip_code' => 'zipCode',
        'support_code' => 'supportCode',
        'sales_type' => 'salesType',
        'company_preferences' => 'companyPreferences',
        'payroll_preferences' => 'payrollPreferences',
        'company_subscription' => 'companySubscription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name_local' => 'setNameLocal',
        'name_foreign' => 'setNameForeign',
        'address_local' => 'setAddressLocal',
        'address_foreign' => 'setAddressForeign',
        'company_tax_id' => 'setCompanyTaxId',
        'logo_image' => 'setLogoImage',
        'fax' => 'setFax',
        'phone1' => 'setPhone1',
        'phone2' => 'setPhone2',
        'phone3' => 'setPhone3',
        'websites' => 'setWebsites',
        'company_type' => 'setCompanyType',
        'created_on' => 'setCreatedOn',
        'modified_on' => 'setModifiedOn',
        'is_default' => 'setIsDefault',
        'address_local_line2' => 'setAddressLocalLine2',
        'address_foreign_line2' => 'setAddressForeignLine2',
        'vat_rate' => 'setVatRate',
        'is_vat' => 'setIsVat',
        'email' => 'setEmail',
        'branch' => 'setBranch',
        'address_local_line3' => 'setAddressLocalLine3',
        'address_foreign_line3' => 'setAddressForeignLine3',
        'contact_person' => 'setContactPerson',
        'is_active' => 'setIsActive',
        'remarks' => 'setRemarks',
        'gallery_id' => 'setGalleryId',
        'branch_foreign' => 'setBranchForeign',
        'branch_code' => 'setBranchCode',
        'contact_type' => 'setContactType',
        'default_credit_days' => 'setDefaultCreditDays',
        'logo_type' => 'setLogoType',
        'is_registered' => 'setIsRegistered',
        'is_advance' => 'setIsAdvance',
        'address' => 'setAddress',
        'province_id' => 'setProvinceId',
        'amphur_id' => 'setAmphurId',
        'district_id' => 'setDistrictId',
        'zip_code' => 'setZipCode',
        'support_code' => 'setSupportCode',
        'sales_type' => 'setSalesType',
        'company_preferences' => 'setCompanyPreferences',
        'payroll_preferences' => 'setPayrollPreferences',
        'company_subscription' => 'setCompanySubscription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name_local' => 'getNameLocal',
        'name_foreign' => 'getNameForeign',
        'address_local' => 'getAddressLocal',
        'address_foreign' => 'getAddressForeign',
        'company_tax_id' => 'getCompanyTaxId',
        'logo_image' => 'getLogoImage',
        'fax' => 'getFax',
        'phone1' => 'getPhone1',
        'phone2' => 'getPhone2',
        'phone3' => 'getPhone3',
        'websites' => 'getWebsites',
        'company_type' => 'getCompanyType',
        'created_on' => 'getCreatedOn',
        'modified_on' => 'getModifiedOn',
        'is_default' => 'getIsDefault',
        'address_local_line2' => 'getAddressLocalLine2',
        'address_foreign_line2' => 'getAddressForeignLine2',
        'vat_rate' => 'getVatRate',
        'is_vat' => 'getIsVat',
        'email' => 'getEmail',
        'branch' => 'getBranch',
        'address_local_line3' => 'getAddressLocalLine3',
        'address_foreign_line3' => 'getAddressForeignLine3',
        'contact_person' => 'getContactPerson',
        'is_active' => 'getIsActive',
        'remarks' => 'getRemarks',
        'gallery_id' => 'getGalleryId',
        'branch_foreign' => 'getBranchForeign',
        'branch_code' => 'getBranchCode',
        'contact_type' => 'getContactType',
        'default_credit_days' => 'getDefaultCreditDays',
        'logo_type' => 'getLogoType',
        'is_registered' => 'getIsRegistered',
        'is_advance' => 'getIsAdvance',
        'address' => 'getAddress',
        'province_id' => 'getProvinceId',
        'amphur_id' => 'getAmphurId',
        'district_id' => 'getDistrictId',
        'zip_code' => 'getZipCode',
        'support_code' => 'getSupportCode',
        'sales_type' => 'getSalesType',
        'company_preferences' => 'getCompanyPreferences',
        'payroll_preferences' => 'getPayrollPreferences',
        'company_subscription' => 'getCompanySubscription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name_local'] = $data['name_local'] ?? null;
        $this->container['name_foreign'] = $data['name_foreign'] ?? null;
        $this->container['address_local'] = $data['address_local'] ?? null;
        $this->container['address_foreign'] = $data['address_foreign'] ?? null;
        $this->container['company_tax_id'] = $data['company_tax_id'] ?? null;
        $this->container['logo_image'] = $data['logo_image'] ?? null;
        $this->container['fax'] = $data['fax'] ?? null;
        $this->container['phone1'] = $data['phone1'] ?? null;
        $this->container['phone2'] = $data['phone2'] ?? null;
        $this->container['phone3'] = $data['phone3'] ?? null;
        $this->container['websites'] = $data['websites'] ?? null;
        $this->container['company_type'] = $data['company_type'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['is_default'] = $data['is_default'] ?? null;
        $this->container['address_local_line2'] = $data['address_local_line2'] ?? null;
        $this->container['address_foreign_line2'] = $data['address_foreign_line2'] ?? null;
        $this->container['vat_rate'] = $data['vat_rate'] ?? null;
        $this->container['is_vat'] = $data['is_vat'] ?? false;
        $this->container['email'] = $data['email'] ?? null;
        $this->container['branch'] = $data['branch'] ?? null;
        $this->container['address_local_line3'] = $data['address_local_line3'] ?? null;
        $this->container['address_foreign_line3'] = $data['address_foreign_line3'] ?? null;
        $this->container['contact_person'] = $data['contact_person'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? false;
        $this->container['remarks'] = $data['remarks'] ?? null;
        $this->container['gallery_id'] = $data['gallery_id'] ?? null;
        $this->container['branch_foreign'] = $data['branch_foreign'] ?? null;
        $this->container['branch_code'] = $data['branch_code'] ?? null;
        $this->container['contact_type'] = $data['contact_type'] ?? null;
        $this->container['default_credit_days'] = $data['default_credit_days'] ?? null;
        $this->container['logo_type'] = $data['logo_type'] ?? null;
        $this->container['is_registered'] = $data['is_registered'] ?? false;
        $this->container['is_advance'] = $data['is_advance'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['province_id'] = $data['province_id'] ?? null;
        $this->container['amphur_id'] = $data['amphur_id'] ?? null;
        $this->container['district_id'] = $data['district_id'] ?? null;
        $this->container['zip_code'] = $data['zip_code'] ?? null;
        $this->container['support_code'] = $data['support_code'] ?? null;
        $this->container['sales_type'] = $data['sales_type'] ?? null;
        $this->container['company_preferences'] = $data['company_preferences'] ?? null;
        $this->container['payroll_preferences'] = $data['payroll_preferences'] ?? null;
        $this->container['company_subscription'] = $data['company_subscription'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name_local'] === null) {
            $invalidProperties[] = "'name_local' can't be null";
        }
        if ((mb_strlen($this->container['name_local']) < 1)) {
            $invalidProperties[] = "invalid value for 'name_local', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['fax']) && (mb_strlen($this->container['fax']) > 50)) {
            $invalidProperties[] = "invalid value for 'fax', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['fax']) && (mb_strlen($this->container['fax']) < 0)) {
            $invalidProperties[] = "invalid value for 'fax', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone1']) && (mb_strlen($this->container['phone1']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone1', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone1']) && (mb_strlen($this->container['phone1']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone1', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone2']) && (mb_strlen($this->container['phone2']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone2', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone2']) && (mb_strlen($this->container['phone2']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone2', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['phone3']) && (mb_strlen($this->container['phone3']) > 50)) {
            $invalidProperties[] = "invalid value for 'phone3', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['phone3']) && (mb_strlen($this->container['phone3']) < 0)) {
            $invalidProperties[] = "invalid value for 'phone3', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['websites']) && (mb_strlen($this->container['websites']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'websites', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['websites']) && (mb_strlen($this->container['websites']) < 0)) {
            $invalidProperties[] = "invalid value for 'websites', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ((mb_strlen($this->container['created_on']) < 1)) {
            $invalidProperties[] = "invalid value for 'created_on', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ((mb_strlen($this->container['modified_on']) < 1)) {
            $invalidProperties[] = "invalid value for 'modified_on', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['branch_foreign']) && (mb_strlen($this->container['branch_foreign']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'branch_foreign', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['branch_foreign']) && (mb_strlen($this->container['branch_foreign']) < 0)) {
            $invalidProperties[] = "invalid value for 'branch_foreign', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['branch_code']) && (mb_strlen($this->container['branch_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'branch_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['branch_code']) && (mb_strlen($this->container['branch_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'branch_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['contact_type'] === null) {
            $invalidProperties[] = "'contact_type' can't be null";
        }
        if ($this->container['logo_type'] === null) {
            $invalidProperties[] = "'logo_type' can't be null";
        }
        if ($this->container['is_advance'] === null) {
            $invalidProperties[] = "'is_advance' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name_local
     *
     * @return string
     */
    public function getNameLocal()
    {
        return $this->container['name_local'];
    }

    /**
     * Sets name_local
     *
     * @param string $name_local name_local
     *
     * @return self
     */
    public function setNameLocal($name_local)
    {

        if ((mb_strlen($name_local) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name_local when calling Company., must be bigger than or equal to 1.');
        }

        $this->container['name_local'] = $name_local;

        return $this;
    }

    /**
     * Gets name_foreign
     *
     * @return string|null
     */
    public function getNameForeign()
    {
        return $this->container['name_foreign'];
    }

    /**
     * Sets name_foreign
     *
     * @param string|null $name_foreign name_foreign
     *
     * @return self
     */
    public function setNameForeign($name_foreign)
    {
        $this->container['name_foreign'] = $name_foreign;

        return $this;
    }

    /**
     * Gets address_local
     *
     * @return string|null
     */
    public function getAddressLocal()
    {
        return $this->container['address_local'];
    }

    /**
     * Sets address_local
     *
     * @param string|null $address_local address_local
     *
     * @return self
     */
    public function setAddressLocal($address_local)
    {
        $this->container['address_local'] = $address_local;

        return $this;
    }

    /**
     * Gets address_foreign
     *
     * @return string|null
     */
    public function getAddressForeign()
    {
        return $this->container['address_foreign'];
    }

    /**
     * Sets address_foreign
     *
     * @param string|null $address_foreign address_foreign
     *
     * @return self
     */
    public function setAddressForeign($address_foreign)
    {
        $this->container['address_foreign'] = $address_foreign;

        return $this;
    }

    /**
     * Gets company_tax_id
     *
     * @return string|null
     */
    public function getCompanyTaxId()
    {
        return $this->container['company_tax_id'];
    }

    /**
     * Sets company_tax_id
     *
     * @param string|null $company_tax_id company_tax_id
     *
     * @return self
     */
    public function setCompanyTaxId($company_tax_id)
    {
        $this->container['company_tax_id'] = $company_tax_id;

        return $this;
    }

    /**
     * Gets logo_image
     *
     * @return string|null
     */
    public function getLogoImage()
    {
        return $this->container['logo_image'];
    }

    /**
     * Sets logo_image
     *
     * @param string|null $logo_image logo_image
     *
     * @return self
     */
    public function setLogoImage($logo_image)
    {
        $this->container['logo_image'] = $logo_image;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string|null
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string|null $fax fax
     *
     * @return self
     */
    public function setFax($fax)
    {
        if (!is_null($fax) && (mb_strlen($fax) > 50)) {
            throw new \InvalidArgumentException('invalid length for $fax when calling Company., must be smaller than or equal to 50.');
        }
        if (!is_null($fax) && (mb_strlen($fax) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fax when calling Company., must be bigger than or equal to 0.');
        }

        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets phone1
     *
     * @return string|null
     */
    public function getPhone1()
    {
        return $this->container['phone1'];
    }

    /**
     * Sets phone1
     *
     * @param string|null $phone1 phone1
     *
     * @return self
     */
    public function setPhone1($phone1)
    {
        if (!is_null($phone1) && (mb_strlen($phone1) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone1 when calling Company., must be smaller than or equal to 50.');
        }
        if (!is_null($phone1) && (mb_strlen($phone1) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone1 when calling Company., must be bigger than or equal to 0.');
        }

        $this->container['phone1'] = $phone1;

        return $this;
    }

    /**
     * Gets phone2
     *
     * @return string|null
     */
    public function getPhone2()
    {
        return $this->container['phone2'];
    }

    /**
     * Sets phone2
     *
     * @param string|null $phone2 phone2
     *
     * @return self
     */
    public function setPhone2($phone2)
    {
        if (!is_null($phone2) && (mb_strlen($phone2) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone2 when calling Company., must be smaller than or equal to 50.');
        }
        if (!is_null($phone2) && (mb_strlen($phone2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone2 when calling Company., must be bigger than or equal to 0.');
        }

        $this->container['phone2'] = $phone2;

        return $this;
    }

    /**
     * Gets phone3
     *
     * @return string|null
     */
    public function getPhone3()
    {
        return $this->container['phone3'];
    }

    /**
     * Sets phone3
     *
     * @param string|null $phone3 phone3
     *
     * @return self
     */
    public function setPhone3($phone3)
    {
        if (!is_null($phone3) && (mb_strlen($phone3) > 50)) {
            throw new \InvalidArgumentException('invalid length for $phone3 when calling Company., must be smaller than or equal to 50.');
        }
        if (!is_null($phone3) && (mb_strlen($phone3) < 0)) {
            throw new \InvalidArgumentException('invalid length for $phone3 when calling Company., must be bigger than or equal to 0.');
        }

        $this->container['phone3'] = $phone3;

        return $this;
    }

    /**
     * Gets websites
     *
     * @return string|null
     */
    public function getWebsites()
    {
        return $this->container['websites'];
    }

    /**
     * Sets websites
     *
     * @param string|null $websites websites
     *
     * @return self
     */
    public function setWebsites($websites)
    {
        if (!is_null($websites) && (mb_strlen($websites) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $websites when calling Company., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($websites) && (mb_strlen($websites) < 0)) {
            throw new \InvalidArgumentException('invalid length for $websites when calling Company., must be bigger than or equal to 0.');
        }

        $this->container['websites'] = $websites;

        return $this;
    }

    /**
     * Gets company_type
     *
     * @return \OpenAPI\Client\Model\CompanyTypeEnum|null
     */
    public function getCompanyType()
    {
        return $this->container['company_type'];
    }

    /**
     * Sets company_type
     *
     * @param \OpenAPI\Client\Model\CompanyTypeEnum|null $company_type company_type
     *
     * @return self
     */
    public function setCompanyType($company_type)
    {
        $this->container['company_type'] = $company_type;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {

        if ((mb_strlen($created_on) < 1)) {
            throw new \InvalidArgumentException('invalid length for $created_on when calling Company., must be bigger than or equal to 1.');
        }

        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {

        if ((mb_strlen($modified_on) < 1)) {
            throw new \InvalidArgumentException('invalid length for $modified_on when calling Company., must be bigger than or equal to 1.');
        }

        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default is_default
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets address_local_line2
     *
     * @return string|null
     */
    public function getAddressLocalLine2()
    {
        return $this->container['address_local_line2'];
    }

    /**
     * Sets address_local_line2
     *
     * @param string|null $address_local_line2 address_local_line2
     *
     * @return self
     */
    public function setAddressLocalLine2($address_local_line2)
    {
        $this->container['address_local_line2'] = $address_local_line2;

        return $this;
    }

    /**
     * Gets address_foreign_line2
     *
     * @return string|null
     */
    public function getAddressForeignLine2()
    {
        return $this->container['address_foreign_line2'];
    }

    /**
     * Sets address_foreign_line2
     *
     * @param string|null $address_foreign_line2 address_foreign_line2
     *
     * @return self
     */
    public function setAddressForeignLine2($address_foreign_line2)
    {
        $this->container['address_foreign_line2'] = $address_foreign_line2;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return int|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param int|null $vat_rate vat_rate
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets is_vat
     *
     * @return bool|null
     */
    public function getIsVat()
    {
        return $this->container['is_vat'];
    }

    /**
     * Sets is_vat
     *
     * @param bool|null $is_vat is_vat
     *
     * @return self
     */
    public function setIsVat($is_vat)
    {
        $this->container['is_vat'] = $is_vat;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch branch
     *
     * @return self
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets address_local_line3
     *
     * @return string|null
     */
    public function getAddressLocalLine3()
    {
        return $this->container['address_local_line3'];
    }

    /**
     * Sets address_local_line3
     *
     * @param string|null $address_local_line3 address_local_line3
     *
     * @return self
     */
    public function setAddressLocalLine3($address_local_line3)
    {
        $this->container['address_local_line3'] = $address_local_line3;

        return $this;
    }

    /**
     * Gets address_foreign_line3
     *
     * @return string|null
     */
    public function getAddressForeignLine3()
    {
        return $this->container['address_foreign_line3'];
    }

    /**
     * Sets address_foreign_line3
     *
     * @param string|null $address_foreign_line3 address_foreign_line3
     *
     * @return self
     */
    public function setAddressForeignLine3($address_foreign_line3)
    {
        $this->container['address_foreign_line3'] = $address_foreign_line3;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return string|null
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param string|null $contact_person contact_person
     *
     * @return self
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets gallery_id
     *
     * @return int|null
     */
    public function getGalleryId()
    {
        return $this->container['gallery_id'];
    }

    /**
     * Sets gallery_id
     *
     * @param int|null $gallery_id gallery_id
     *
     * @return self
     */
    public function setGalleryId($gallery_id)
    {
        $this->container['gallery_id'] = $gallery_id;

        return $this;
    }

    /**
     * Gets branch_foreign
     *
     * @return string|null
     */
    public function getBranchForeign()
    {
        return $this->container['branch_foreign'];
    }

    /**
     * Sets branch_foreign
     *
     * @param string|null $branch_foreign branch_foreign
     *
     * @return self
     */
    public function setBranchForeign($branch_foreign)
    {
        if (!is_null($branch_foreign) && (mb_strlen($branch_foreign) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $branch_foreign when calling Company., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($branch_foreign) && (mb_strlen($branch_foreign) < 0)) {
            throw new \InvalidArgumentException('invalid length for $branch_foreign when calling Company., must be bigger than or equal to 0.');
        }

        $this->container['branch_foreign'] = $branch_foreign;

        return $this;
    }

    /**
     * Gets branch_code
     *
     * @return string|null
     */
    public function getBranchCode()
    {
        return $this->container['branch_code'];
    }

    /**
     * Sets branch_code
     *
     * @param string|null $branch_code branch_code
     *
     * @return self
     */
    public function setBranchCode($branch_code)
    {
        if (!is_null($branch_code) && (mb_strlen($branch_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $branch_code when calling Company., must be smaller than or equal to 50.');
        }
        if (!is_null($branch_code) && (mb_strlen($branch_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $branch_code when calling Company., must be bigger than or equal to 0.');
        }

        $this->container['branch_code'] = $branch_code;

        return $this;
    }

    /**
     * Gets contact_type
     *
     * @return int
     */
    public function getContactType()
    {
        return $this->container['contact_type'];
    }

    /**
     * Sets contact_type
     *
     * @param int $contact_type contact_type
     *
     * @return self
     */
    public function setContactType($contact_type)
    {
        $this->container['contact_type'] = $contact_type;

        return $this;
    }

    /**
     * Gets default_credit_days
     *
     * @return int|null
     */
    public function getDefaultCreditDays()
    {
        return $this->container['default_credit_days'];
    }

    /**
     * Sets default_credit_days
     *
     * @param int|null $default_credit_days default_credit_days
     *
     * @return self
     */
    public function setDefaultCreditDays($default_credit_days)
    {
        $this->container['default_credit_days'] = $default_credit_days;

        return $this;
    }

    /**
     * Gets logo_type
     *
     * @return int
     */
    public function getLogoType()
    {
        return $this->container['logo_type'];
    }

    /**
     * Sets logo_type
     *
     * @param int $logo_type logo_type
     *
     * @return self
     */
    public function setLogoType($logo_type)
    {
        $this->container['logo_type'] = $logo_type;

        return $this;
    }

    /**
     * Gets is_registered
     *
     * @return bool|null
     */
    public function getIsRegistered()
    {
        return $this->container['is_registered'];
    }

    /**
     * Sets is_registered
     *
     * @param bool|null $is_registered is_registered
     *
     * @return self
     */
    public function setIsRegistered($is_registered)
    {
        $this->container['is_registered'] = $is_registered;

        return $this;
    }

    /**
     * Gets is_advance
     *
     * @return bool
     */
    public function getIsAdvance()
    {
        return $this->container['is_advance'];
    }

    /**
     * Sets is_advance
     *
     * @param bool $is_advance is_advance
     *
     * @return self
     */
    public function setIsAdvance($is_advance)
    {
        $this->container['is_advance'] = $is_advance;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets province_id
     *
     * @return int|null
     */
    public function getProvinceId()
    {
        return $this->container['province_id'];
    }

    /**
     * Sets province_id
     *
     * @param int|null $province_id province_id
     *
     * @return self
     */
    public function setProvinceId($province_id)
    {
        $this->container['province_id'] = $province_id;

        return $this;
    }

    /**
     * Gets amphur_id
     *
     * @return int|null
     */
    public function getAmphurId()
    {
        return $this->container['amphur_id'];
    }

    /**
     * Sets amphur_id
     *
     * @param int|null $amphur_id amphur_id
     *
     * @return self
     */
    public function setAmphurId($amphur_id)
    {
        $this->container['amphur_id'] = $amphur_id;

        return $this;
    }

    /**
     * Gets district_id
     *
     * @return int|null
     */
    public function getDistrictId()
    {
        return $this->container['district_id'];
    }

    /**
     * Sets district_id
     *
     * @param int|null $district_id district_id
     *
     * @return self
     */
    public function setDistrictId($district_id)
    {
        $this->container['district_id'] = $district_id;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code zip_code
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets support_code
     *
     * @return string|null
     */
    public function getSupportCode()
    {
        return $this->container['support_code'];
    }

    /**
     * Sets support_code
     *
     * @param string|null $support_code support_code
     *
     * @return self
     */
    public function setSupportCode($support_code)
    {
        $this->container['support_code'] = $support_code;

        return $this;
    }

    /**
     * Gets sales_type
     *
     * @return OneOfSalesType|null
     */
    public function getSalesType()
    {
        return $this->container['sales_type'];
    }

    /**
     * Sets sales_type
     *
     * @param OneOfSalesType|null $sales_type sales_type
     *
     * @return self
     */
    public function setSalesType($sales_type)
    {
        $this->container['sales_type'] = $sales_type;

        return $this;
    }

    /**
     * Gets company_preferences
     *
     * @return OneOfCompanyPreferences|null
     */
    public function getCompanyPreferences()
    {
        return $this->container['company_preferences'];
    }

    /**
     * Sets company_preferences
     *
     * @param OneOfCompanyPreferences|null $company_preferences company_preferences
     *
     * @return self
     */
    public function setCompanyPreferences($company_preferences)
    {
        $this->container['company_preferences'] = $company_preferences;

        return $this;
    }

    /**
     * Gets payroll_preferences
     *
     * @return OneOfPayrollPreferences|null
     */
    public function getPayrollPreferences()
    {
        return $this->container['payroll_preferences'];
    }

    /**
     * Sets payroll_preferences
     *
     * @param OneOfPayrollPreferences|null $payroll_preferences payroll_preferences
     *
     * @return self
     */
    public function setPayrollPreferences($payroll_preferences)
    {
        $this->container['payroll_preferences'] = $payroll_preferences;

        return $this;
    }

    /**
     * Gets company_subscription
     *
     * @return \OpenAPI\Client\Model\CompanySubscription[]|null
     */
    public function getCompanySubscription()
    {
        return $this->container['company_subscription'];
    }

    /**
     * Sets company_subscription
     *
     * @param \OpenAPI\Client\Model\CompanySubscription[]|null $company_subscription company_subscription
     *
     * @return self
     */
    public function setCompanySubscription($company_subscription)
    {
        $this->container['company_subscription'] = $company_subscription;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


