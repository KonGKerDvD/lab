<?php
/**
 * ExpenseCategory
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExpenseCategory Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ExpenseCategory implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExpenseCategory';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'name_foreign' => 'string',
        'is_share' => 'bool',
        'is_delete' => 'bool',
        'is_gl_system' => 'bool',
        'system_code' => 'int',
        'reset_transaction_id' => 'int',
        'tax_life' => 'int',
        'chart_of_account_id' => 'int',
        'chart_of_account_id_credit' => 'int',
        'depreciation_chart_of_account_id' => 'int',
        'accumulated_depreciation_chart_of_account_id' => 'int',
        'depreciable_asset' => 'bool',
        'expense_list' => '\OpenAPI\Client\Model\ExpenseList[]',
        'company_expense_category' => '\OpenAPI\Client\Model\CompanyExpenseCategory[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'name_foreign' => null,
        'is_share' => null,
        'is_delete' => null,
        'is_gl_system' => null,
        'system_code' => 'int32',
        'reset_transaction_id' => 'int64',
        'tax_life' => 'int32',
        'chart_of_account_id' => 'int64',
        'chart_of_account_id_credit' => 'int64',
        'depreciation_chart_of_account_id' => 'int64',
        'accumulated_depreciation_chart_of_account_id' => 'int64',
        'depreciable_asset' => null,
        'expense_list' => null,
        'company_expense_category' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'name_foreign' => 'nameForeign',
        'is_share' => 'isShare',
        'is_delete' => 'isDelete',
        'is_gl_system' => 'isGLSystem',
        'system_code' => 'systemCode',
        'reset_transaction_id' => 'resetTransactionId',
        'tax_life' => 'taxLife',
        'chart_of_account_id' => 'chartOfAccountId',
        'chart_of_account_id_credit' => 'chartOfAccountIdCredit',
        'depreciation_chart_of_account_id' => 'depreciationChartOfAccountId',
        'accumulated_depreciation_chart_of_account_id' => 'accumulatedDepreciationChartOfAccountId',
        'depreciable_asset' => 'depreciableAsset',
        'expense_list' => 'expenseList',
        'company_expense_category' => 'companyExpenseCategory'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'name_foreign' => 'setNameForeign',
        'is_share' => 'setIsShare',
        'is_delete' => 'setIsDelete',
        'is_gl_system' => 'setIsGlSystem',
        'system_code' => 'setSystemCode',
        'reset_transaction_id' => 'setResetTransactionId',
        'tax_life' => 'setTaxLife',
        'chart_of_account_id' => 'setChartOfAccountId',
        'chart_of_account_id_credit' => 'setChartOfAccountIdCredit',
        'depreciation_chart_of_account_id' => 'setDepreciationChartOfAccountId',
        'accumulated_depreciation_chart_of_account_id' => 'setAccumulatedDepreciationChartOfAccountId',
        'depreciable_asset' => 'setDepreciableAsset',
        'expense_list' => 'setExpenseList',
        'company_expense_category' => 'setCompanyExpenseCategory'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'name_foreign' => 'getNameForeign',
        'is_share' => 'getIsShare',
        'is_delete' => 'getIsDelete',
        'is_gl_system' => 'getIsGlSystem',
        'system_code' => 'getSystemCode',
        'reset_transaction_id' => 'getResetTransactionId',
        'tax_life' => 'getTaxLife',
        'chart_of_account_id' => 'getChartOfAccountId',
        'chart_of_account_id_credit' => 'getChartOfAccountIdCredit',
        'depreciation_chart_of_account_id' => 'getDepreciationChartOfAccountId',
        'accumulated_depreciation_chart_of_account_id' => 'getAccumulatedDepreciationChartOfAccountId',
        'depreciable_asset' => 'getDepreciableAsset',
        'expense_list' => 'getExpenseList',
        'company_expense_category' => 'getCompanyExpenseCategory'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['name_foreign'] = $data['name_foreign'] ?? null;
        $this->container['is_share'] = $data['is_share'] ?? null;
        $this->container['is_delete'] = $data['is_delete'] ?? null;
        $this->container['is_gl_system'] = $data['is_gl_system'] ?? null;
        $this->container['system_code'] = $data['system_code'] ?? null;
        $this->container['reset_transaction_id'] = $data['reset_transaction_id'] ?? null;
        $this->container['tax_life'] = $data['tax_life'] ?? null;
        $this->container['chart_of_account_id'] = $data['chart_of_account_id'] ?? null;
        $this->container['chart_of_account_id_credit'] = $data['chart_of_account_id_credit'] ?? null;
        $this->container['depreciation_chart_of_account_id'] = $data['depreciation_chart_of_account_id'] ?? null;
        $this->container['accumulated_depreciation_chart_of_account_id'] = $data['accumulated_depreciation_chart_of_account_id'] ?? null;
        $this->container['depreciable_asset'] = $data['depreciable_asset'] ?? null;
        $this->container['expense_list'] = $data['expense_list'] ?? null;
        $this->container['company_expense_category'] = $data['company_expense_category'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ExpenseCategory., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ExpenseCategory., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets name_foreign
     *
     * @return string|null
     */
    public function getNameForeign()
    {
        return $this->container['name_foreign'];
    }

    /**
     * Sets name_foreign
     *
     * @param string|null $name_foreign name_foreign
     *
     * @return self
     */
    public function setNameForeign($name_foreign)
    {
        $this->container['name_foreign'] = $name_foreign;

        return $this;
    }

    /**
     * Gets is_share
     *
     * @return bool|null
     */
    public function getIsShare()
    {
        return $this->container['is_share'];
    }

    /**
     * Sets is_share
     *
     * @param bool|null $is_share is_share
     *
     * @return self
     */
    public function setIsShare($is_share)
    {
        $this->container['is_share'] = $is_share;

        return $this;
    }

    /**
     * Gets is_delete
     *
     * @return bool|null
     */
    public function getIsDelete()
    {
        return $this->container['is_delete'];
    }

    /**
     * Sets is_delete
     *
     * @param bool|null $is_delete is_delete
     *
     * @return self
     */
    public function setIsDelete($is_delete)
    {
        $this->container['is_delete'] = $is_delete;

        return $this;
    }

    /**
     * Gets is_gl_system
     *
     * @return bool|null
     */
    public function getIsGlSystem()
    {
        return $this->container['is_gl_system'];
    }

    /**
     * Sets is_gl_system
     *
     * @param bool|null $is_gl_system is_gl_system
     *
     * @return self
     */
    public function setIsGlSystem($is_gl_system)
    {
        $this->container['is_gl_system'] = $is_gl_system;

        return $this;
    }

    /**
     * Gets system_code
     *
     * @return int|null
     */
    public function getSystemCode()
    {
        return $this->container['system_code'];
    }

    /**
     * Sets system_code
     *
     * @param int|null $system_code system_code
     *
     * @return self
     */
    public function setSystemCode($system_code)
    {
        $this->container['system_code'] = $system_code;

        return $this;
    }

    /**
     * Gets reset_transaction_id
     *
     * @return int|null
     */
    public function getResetTransactionId()
    {
        return $this->container['reset_transaction_id'];
    }

    /**
     * Sets reset_transaction_id
     *
     * @param int|null $reset_transaction_id reset_transaction_id
     *
     * @return self
     */
    public function setResetTransactionId($reset_transaction_id)
    {
        $this->container['reset_transaction_id'] = $reset_transaction_id;

        return $this;
    }

    /**
     * Gets tax_life
     *
     * @return int|null
     */
    public function getTaxLife()
    {
        return $this->container['tax_life'];
    }

    /**
     * Sets tax_life
     *
     * @param int|null $tax_life tax_life
     *
     * @return self
     */
    public function setTaxLife($tax_life)
    {
        $this->container['tax_life'] = $tax_life;

        return $this;
    }

    /**
     * Gets chart_of_account_id
     *
     * @return int|null
     */
    public function getChartOfAccountId()
    {
        return $this->container['chart_of_account_id'];
    }

    /**
     * Sets chart_of_account_id
     *
     * @param int|null $chart_of_account_id chart_of_account_id
     *
     * @return self
     */
    public function setChartOfAccountId($chart_of_account_id)
    {
        $this->container['chart_of_account_id'] = $chart_of_account_id;

        return $this;
    }

    /**
     * Gets chart_of_account_id_credit
     *
     * @return int|null
     */
    public function getChartOfAccountIdCredit()
    {
        return $this->container['chart_of_account_id_credit'];
    }

    /**
     * Sets chart_of_account_id_credit
     *
     * @param int|null $chart_of_account_id_credit chart_of_account_id_credit
     *
     * @return self
     */
    public function setChartOfAccountIdCredit($chart_of_account_id_credit)
    {
        $this->container['chart_of_account_id_credit'] = $chart_of_account_id_credit;

        return $this;
    }

    /**
     * Gets depreciation_chart_of_account_id
     *
     * @return int|null
     */
    public function getDepreciationChartOfAccountId()
    {
        return $this->container['depreciation_chart_of_account_id'];
    }

    /**
     * Sets depreciation_chart_of_account_id
     *
     * @param int|null $depreciation_chart_of_account_id depreciation_chart_of_account_id
     *
     * @return self
     */
    public function setDepreciationChartOfAccountId($depreciation_chart_of_account_id)
    {
        $this->container['depreciation_chart_of_account_id'] = $depreciation_chart_of_account_id;

        return $this;
    }

    /**
     * Gets accumulated_depreciation_chart_of_account_id
     *
     * @return int|null
     */
    public function getAccumulatedDepreciationChartOfAccountId()
    {
        return $this->container['accumulated_depreciation_chart_of_account_id'];
    }

    /**
     * Sets accumulated_depreciation_chart_of_account_id
     *
     * @param int|null $accumulated_depreciation_chart_of_account_id accumulated_depreciation_chart_of_account_id
     *
     * @return self
     */
    public function setAccumulatedDepreciationChartOfAccountId($accumulated_depreciation_chart_of_account_id)
    {
        $this->container['accumulated_depreciation_chart_of_account_id'] = $accumulated_depreciation_chart_of_account_id;

        return $this;
    }

    /**
     * Gets depreciable_asset
     *
     * @return bool|null
     */
    public function getDepreciableAsset()
    {
        return $this->container['depreciable_asset'];
    }

    /**
     * Sets depreciable_asset
     *
     * @param bool|null $depreciable_asset depreciable_asset
     *
     * @return self
     */
    public function setDepreciableAsset($depreciable_asset)
    {
        $this->container['depreciable_asset'] = $depreciable_asset;

        return $this;
    }

    /**
     * Gets expense_list
     *
     * @return \OpenAPI\Client\Model\ExpenseList[]|null
     */
    public function getExpenseList()
    {
        return $this->container['expense_list'];
    }

    /**
     * Sets expense_list
     *
     * @param \OpenAPI\Client\Model\ExpenseList[]|null $expense_list expense_list
     *
     * @return self
     */
    public function setExpenseList($expense_list)
    {
        $this->container['expense_list'] = $expense_list;

        return $this;
    }

    /**
     * Gets company_expense_category
     *
     * @return \OpenAPI\Client\Model\CompanyExpenseCategory[]|null
     */
    public function getCompanyExpenseCategory()
    {
        return $this->container['company_expense_category'];
    }

    /**
     * Sets company_expense_category
     *
     * @param \OpenAPI\Client\Model\CompanyExpenseCategory[]|null $company_expense_category company_expense_category
     *
     * @return self
     */
    public function setCompanyExpenseCategory($company_expense_category)
    {
        $this->container['company_expense_category'] = $company_expense_category;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


