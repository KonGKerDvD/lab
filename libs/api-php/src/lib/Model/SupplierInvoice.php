<?php
/**
 * SupplierInvoice
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SupplierInvoice Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SupplierInvoice implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SupplierInvoice';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'company_id' => 'int',
        'document_date' => '\DateTime',
        'document_serial' => 'string',
        'contact_name' => 'string',
        'contact_tax_id' => 'string',
        'contact_branch' => 'string',
        'is_delete' => 'bool',
        'gallery_id' => 'int',
        'reference_document_id' => 'int',
        'reference_document_type' => '\OpenAPI\Client\Model\DocumentTypes',
        'created_by' => 'int',
        'modified_by' => 'int',
        'created_on' => '\DateTime',
        'modified_on' => '\DateTime',
        'company' => 'OneOfCompany',
        'created_by_user' => 'OneOfUser',
        'modified_by_user' => 'OneOfUser',
        'gallery' => 'OneOfGallery'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'company_id' => 'int64',
        'document_date' => 'date-time',
        'document_serial' => null,
        'contact_name' => null,
        'contact_tax_id' => null,
        'contact_branch' => null,
        'is_delete' => null,
        'gallery_id' => 'int64',
        'reference_document_id' => 'int64',
        'reference_document_type' => null,
        'created_by' => 'int64',
        'modified_by' => 'int64',
        'created_on' => 'date-time',
        'modified_on' => 'date-time',
        'company' => null,
        'created_by_user' => null,
        'modified_by_user' => null,
        'gallery' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'document_date' => 'documentDate',
        'document_serial' => 'documentSerial',
        'contact_name' => 'contactName',
        'contact_tax_id' => 'contactTaxId',
        'contact_branch' => 'contactBranch',
        'is_delete' => 'isDelete',
        'gallery_id' => 'galleryId',
        'reference_document_id' => 'referenceDocumentId',
        'reference_document_type' => 'referenceDocumentType',
        'created_by' => 'createdBy',
        'modified_by' => 'modifiedBy',
        'created_on' => 'createdOn',
        'modified_on' => 'modifiedOn',
        'company' => 'company',
        'created_by_user' => 'createdByUser',
        'modified_by_user' => 'modifiedByUser',
        'gallery' => 'gallery'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'document_date' => 'setDocumentDate',
        'document_serial' => 'setDocumentSerial',
        'contact_name' => 'setContactName',
        'contact_tax_id' => 'setContactTaxId',
        'contact_branch' => 'setContactBranch',
        'is_delete' => 'setIsDelete',
        'gallery_id' => 'setGalleryId',
        'reference_document_id' => 'setReferenceDocumentId',
        'reference_document_type' => 'setReferenceDocumentType',
        'created_by' => 'setCreatedBy',
        'modified_by' => 'setModifiedBy',
        'created_on' => 'setCreatedOn',
        'modified_on' => 'setModifiedOn',
        'company' => 'setCompany',
        'created_by_user' => 'setCreatedByUser',
        'modified_by_user' => 'setModifiedByUser',
        'gallery' => 'setGallery'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'document_date' => 'getDocumentDate',
        'document_serial' => 'getDocumentSerial',
        'contact_name' => 'getContactName',
        'contact_tax_id' => 'getContactTaxId',
        'contact_branch' => 'getContactBranch',
        'is_delete' => 'getIsDelete',
        'gallery_id' => 'getGalleryId',
        'reference_document_id' => 'getReferenceDocumentId',
        'reference_document_type' => 'getReferenceDocumentType',
        'created_by' => 'getCreatedBy',
        'modified_by' => 'getModifiedBy',
        'created_on' => 'getCreatedOn',
        'modified_on' => 'getModifiedOn',
        'company' => 'getCompany',
        'created_by_user' => 'getCreatedByUser',
        'modified_by_user' => 'getModifiedByUser',
        'gallery' => 'getGallery'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['document_date'] = $data['document_date'] ?? null;
        $this->container['document_serial'] = $data['document_serial'] ?? null;
        $this->container['contact_name'] = $data['contact_name'] ?? null;
        $this->container['contact_tax_id'] = $data['contact_tax_id'] ?? null;
        $this->container['contact_branch'] = $data['contact_branch'] ?? null;
        $this->container['is_delete'] = $data['is_delete'] ?? null;
        $this->container['gallery_id'] = $data['gallery_id'] ?? null;
        $this->container['reference_document_id'] = $data['reference_document_id'] ?? null;
        $this->container['reference_document_type'] = $data['reference_document_type'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['modified_by'] = $data['modified_by'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['created_by_user'] = $data['created_by_user'] ?? null;
        $this->container['modified_by_user'] = $data['modified_by_user'] ?? null;
        $this->container['gallery'] = $data['gallery'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if ($this->container['document_date'] === null) {
            $invalidProperties[] = "'document_date' can't be null";
        }
        if ((mb_strlen($this->container['document_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'document_date', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['created_on'] === null) {
            $invalidProperties[] = "'created_on' can't be null";
        }
        if ((mb_strlen($this->container['created_on']) < 1)) {
            $invalidProperties[] = "invalid value for 'created_on', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['modified_on'] === null) {
            $invalidProperties[] = "'modified_on' can't be null";
        }
        if ((mb_strlen($this->container['modified_on']) < 1)) {
            $invalidProperties[] = "invalid value for 'modified_on', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date document_date
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {

        if ((mb_strlen($document_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $document_date when calling SupplierInvoice., must be bigger than or equal to 1.');
        }

        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets document_serial
     *
     * @return string|null
     */
    public function getDocumentSerial()
    {
        return $this->container['document_serial'];
    }

    /**
     * Sets document_serial
     *
     * @param string|null $document_serial document_serial
     *
     * @return self
     */
    public function setDocumentSerial($document_serial)
    {
        $this->container['document_serial'] = $document_serial;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name contact_name
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_tax_id
     *
     * @return string|null
     */
    public function getContactTaxId()
    {
        return $this->container['contact_tax_id'];
    }

    /**
     * Sets contact_tax_id
     *
     * @param string|null $contact_tax_id contact_tax_id
     *
     * @return self
     */
    public function setContactTaxId($contact_tax_id)
    {
        $this->container['contact_tax_id'] = $contact_tax_id;

        return $this;
    }

    /**
     * Gets contact_branch
     *
     * @return string|null
     */
    public function getContactBranch()
    {
        return $this->container['contact_branch'];
    }

    /**
     * Sets contact_branch
     *
     * @param string|null $contact_branch contact_branch
     *
     * @return self
     */
    public function setContactBranch($contact_branch)
    {
        $this->container['contact_branch'] = $contact_branch;

        return $this;
    }

    /**
     * Gets is_delete
     *
     * @return bool|null
     */
    public function getIsDelete()
    {
        return $this->container['is_delete'];
    }

    /**
     * Sets is_delete
     *
     * @param bool|null $is_delete is_delete
     *
     * @return self
     */
    public function setIsDelete($is_delete)
    {
        $this->container['is_delete'] = $is_delete;

        return $this;
    }

    /**
     * Gets gallery_id
     *
     * @return int|null
     */
    public function getGalleryId()
    {
        return $this->container['gallery_id'];
    }

    /**
     * Sets gallery_id
     *
     * @param int|null $gallery_id gallery_id
     *
     * @return self
     */
    public function setGalleryId($gallery_id)
    {
        $this->container['gallery_id'] = $gallery_id;

        return $this;
    }

    /**
     * Gets reference_document_id
     *
     * @return int|null
     */
    public function getReferenceDocumentId()
    {
        return $this->container['reference_document_id'];
    }

    /**
     * Sets reference_document_id
     *
     * @param int|null $reference_document_id reference_document_id
     *
     * @return self
     */
    public function setReferenceDocumentId($reference_document_id)
    {
        $this->container['reference_document_id'] = $reference_document_id;

        return $this;
    }

    /**
     * Gets reference_document_type
     *
     * @return \OpenAPI\Client\Model\DocumentTypes|null
     */
    public function getReferenceDocumentType()
    {
        return $this->container['reference_document_type'];
    }

    /**
     * Sets reference_document_type
     *
     * @param \OpenAPI\Client\Model\DocumentTypes|null $reference_document_type reference_document_type
     *
     * @return self
     */
    public function setReferenceDocumentType($reference_document_type)
    {
        $this->container['reference_document_type'] = $reference_document_type;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return int|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param int|null $modified_by modified_by
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {

        if ((mb_strlen($created_on) < 1)) {
            throw new \InvalidArgumentException('invalid length for $created_on when calling SupplierInvoice., must be bigger than or equal to 1.');
        }

        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {

        if ((mb_strlen($modified_on) < 1)) {
            throw new \InvalidArgumentException('invalid length for $modified_on when calling SupplierInvoice., must be bigger than or equal to 1.');
        }

        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets company
     *
     * @return OneOfCompany|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param OneOfCompany|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return OneOfUser|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param OneOfUser|null $created_by_user created_by_user
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets modified_by_user
     *
     * @return OneOfUser|null
     */
    public function getModifiedByUser()
    {
        return $this->container['modified_by_user'];
    }

    /**
     * Sets modified_by_user
     *
     * @param OneOfUser|null $modified_by_user modified_by_user
     *
     * @return self
     */
    public function setModifiedByUser($modified_by_user)
    {
        $this->container['modified_by_user'] = $modified_by_user;

        return $this;
    }

    /**
     * Gets gallery
     *
     * @return OneOfGallery|null
     */
    public function getGallery()
    {
        return $this->container['gallery'];
    }

    /**
     * Sets gallery
     *
     * @param OneOfGallery|null $gallery gallery
     *
     * @return self
     */
    public function setGallery($gallery)
    {
        $this->container['gallery'] = $gallery;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


