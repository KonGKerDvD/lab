<?php
/**
 * Bank
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Bank Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Bank implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Bank';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'country_code' => 'string',
        'id' => 'int',
        'bank_code' => 'string',
        'is_delete' => 'bool',
        'order_number' => 'int',
        'url' => 'string',
        'is_custom_bank' => 'bool',
        'bank_account' => '\OpenAPI\Client\Model\BankAccount[]',
        'reconciled_document' => '\OpenAPI\Client\Model\ReconciledDocument[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'country_code' => null,
        'id' => 'int32',
        'bank_code' => null,
        'is_delete' => null,
        'order_number' => 'int32',
        'url' => null,
        'is_custom_bank' => null,
        'bank_account' => null,
        'reconciled_document' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'country_code' => 'countryCode',
        'id' => 'id',
        'bank_code' => 'bankCode',
        'is_delete' => 'isDelete',
        'order_number' => 'orderNumber',
        'url' => 'url',
        'is_custom_bank' => 'isCustomBank',
        'bank_account' => 'bankAccount',
        'reconciled_document' => 'reconciledDocument'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'country_code' => 'setCountryCode',
        'id' => 'setId',
        'bank_code' => 'setBankCode',
        'is_delete' => 'setIsDelete',
        'order_number' => 'setOrderNumber',
        'url' => 'setUrl',
        'is_custom_bank' => 'setIsCustomBank',
        'bank_account' => 'setBankAccount',
        'reconciled_document' => 'setReconciledDocument'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'country_code' => 'getCountryCode',
        'id' => 'getId',
        'bank_code' => 'getBankCode',
        'is_delete' => 'getIsDelete',
        'order_number' => 'getOrderNumber',
        'url' => 'getUrl',
        'is_custom_bank' => 'getIsCustomBank',
        'bank_account' => 'getBankAccount',
        'reconciled_document' => 'getReconciledDocument'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = $data['name'] ?? null;
        $this->container['country_code'] = $data['country_code'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['bank_code'] = $data['bank_code'] ?? null;
        $this->container['is_delete'] = $data['is_delete'] ?? null;
        $this->container['order_number'] = $data['order_number'] ?? null;
        $this->container['url'] = $data['url'] ?? null;
        $this->container['is_custom_bank'] = $data['is_custom_bank'] ?? null;
        $this->container['bank_account'] = $data['bank_account'] ?? null;
        $this->container['reconciled_document'] = $data['reconciled_document'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) < 1)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['country_code']) && (mb_strlen($this->container['country_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'country_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['bank_code'] === null) {
            $invalidProperties[] = "'bank_code' can't be null";
        }
        if ((mb_strlen($this->container['bank_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'bank_code', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['bank_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) > 255)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['url']) && (mb_strlen($this->container['url']) < 0)) {
            $invalidProperties[] = "invalid value for 'url', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if ((mb_strlen($name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $name when calling Bank., must be bigger than or equal to 1.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string|null
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string|null $country_code country_code
     *
     * @return self
     */
    public function setCountryCode($country_code)
    {
        if (!is_null($country_code) && (mb_strlen($country_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling Bank., must be smaller than or equal to 50.');
        }
        if (!is_null($country_code) && (mb_strlen($country_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $country_code when calling Bank., must be bigger than or equal to 0.');
        }

        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bank_code
     *
     * @return string
     */
    public function getBankCode()
    {
        return $this->container['bank_code'];
    }

    /**
     * Sets bank_code
     *
     * @param string $bank_code bank_code
     *
     * @return self
     */
    public function setBankCode($bank_code)
    {
        if ((mb_strlen($bank_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $bank_code when calling Bank., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($bank_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_code when calling Bank., must be bigger than or equal to 0.');
        }

        $this->container['bank_code'] = $bank_code;

        return $this;
    }

    /**
     * Gets is_delete
     *
     * @return bool|null
     */
    public function getIsDelete()
    {
        return $this->container['is_delete'];
    }

    /**
     * Sets is_delete
     *
     * @param bool|null $is_delete is_delete
     *
     * @return self
     */
    public function setIsDelete($is_delete)
    {
        $this->container['is_delete'] = $is_delete;

        return $this;
    }

    /**
     * Gets order_number
     *
     * @return int|null
     */
    public function getOrderNumber()
    {
        return $this->container['order_number'];
    }

    /**
     * Sets order_number
     *
     * @param int|null $order_number order_number
     *
     * @return self
     */
    public function setOrderNumber($order_number)
    {
        $this->container['order_number'] = $order_number;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string|null $url url
     *
     * @return self
     */
    public function setUrl($url)
    {
        if (!is_null($url) && (mb_strlen($url) > 255)) {
            throw new \InvalidArgumentException('invalid length for $url when calling Bank., must be smaller than or equal to 255.');
        }
        if (!is_null($url) && (mb_strlen($url) < 0)) {
            throw new \InvalidArgumentException('invalid length for $url when calling Bank., must be bigger than or equal to 0.');
        }

        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets is_custom_bank
     *
     * @return bool|null
     */
    public function getIsCustomBank()
    {
        return $this->container['is_custom_bank'];
    }

    /**
     * Sets is_custom_bank
     *
     * @param bool|null $is_custom_bank is_custom_bank
     *
     * @return self
     */
    public function setIsCustomBank($is_custom_bank)
    {
        $this->container['is_custom_bank'] = $is_custom_bank;

        return $this;
    }

    /**
     * Gets bank_account
     *
     * @return \OpenAPI\Client\Model\BankAccount[]|null
     */
    public function getBankAccount()
    {
        return $this->container['bank_account'];
    }

    /**
     * Sets bank_account
     *
     * @param \OpenAPI\Client\Model\BankAccount[]|null $bank_account bank_account
     *
     * @return self
     */
    public function setBankAccount($bank_account)
    {
        $this->container['bank_account'] = $bank_account;

        return $this;
    }

    /**
     * Gets reconciled_document
     *
     * @return \OpenAPI\Client\Model\ReconciledDocument[]|null
     */
    public function getReconciledDocument()
    {
        return $this->container['reconciled_document'];
    }

    /**
     * Sets reconciled_document
     *
     * @param \OpenAPI\Client\Model\ReconciledDocument[]|null $reconciled_document reconciled_document
     *
     * @return self
     */
    public function setReconciledDocument($reconciled_document)
    {
        $this->container['reconciled_document'] = $reconciled_document;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


