<?php
/**
 * JournalEntry
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * JournalEntry Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class JournalEntry implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'JournalEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'company_id' => 'int',
        'document_serial' => 'string',
        'document_type' => '\OpenAPI\Client\Model\DocumentTypes',
        'status' => '\OpenAPI\Client\Model\JournalEntryStatus',
        'document_date' => '\DateTime',
        'description' => 'string',
        'description_foreign' => 'string',
        'void_description' => 'string',
        'voided_on' => '\DateTime',
        'approved_on' => '\DateTime',
        'transaction_no' => 'int',
        'note' => 'string',
        'template_type' => '\OpenAPI\Client\Model\JournalEntryTemplateType',
        'contact_name' => 'string',
        'document_serial_no_prefix' => 'int',
        'created_by' => 'int',
        'modified_by' => 'int',
        'approved_by' => 'int',
        'voided_by' => 'int',
        'gallery_id' => 'int',
        'contact_id' => 'int',
        'running_number_type' => 'OneOfRunningNumberType',
        'fiscal_year_id' => 'int',
        'gallery' => 'OneOfGallery',
        'company' => 'OneOfCompany',
        'approved_by_user' => 'OneOfUser',
        'modified_by_user' => 'OneOfUser',
        'voided_by_user' => 'OneOfUser',
        'remarks' => 'string',
        'contact' => 'OneOfContact',
        'fiscal_year' => 'OneOfFiscalYear',
        'reference' => 'string',
        'reference_id' => 'int',
        'reference_document_type' => 'OneOfDocumentTypes',
        'is_system_document' => 'bool',
        'rule_compile_status' => '\OpenAPI\Client\Model\RuleCompileStatus',
        'book_of_accounts' => '\OpenAPI\Client\Model\IBookOfAccount[]',
        'is_changed_document_date' => 'bool',
        'is_reset_document' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'company_id' => 'int64',
        'document_serial' => null,
        'document_type' => null,
        'status' => null,
        'document_date' => 'date-time',
        'description' => null,
        'description_foreign' => null,
        'void_description' => null,
        'voided_on' => 'date-time',
        'approved_on' => 'date-time',
        'transaction_no' => 'int64',
        'note' => null,
        'template_type' => null,
        'contact_name' => null,
        'document_serial_no_prefix' => 'int64',
        'created_by' => 'int64',
        'modified_by' => 'int64',
        'approved_by' => 'int64',
        'voided_by' => 'int64',
        'gallery_id' => 'int64',
        'contact_id' => 'int64',
        'running_number_type' => null,
        'fiscal_year_id' => 'int64',
        'gallery' => null,
        'company' => null,
        'approved_by_user' => null,
        'modified_by_user' => null,
        'voided_by_user' => null,
        'remarks' => null,
        'contact' => null,
        'fiscal_year' => null,
        'reference' => null,
        'reference_id' => 'int64',
        'reference_document_type' => null,
        'is_system_document' => null,
        'rule_compile_status' => null,
        'book_of_accounts' => null,
        'is_changed_document_date' => null,
        'is_reset_document' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'document_serial' => 'documentSerial',
        'document_type' => 'documentType',
        'status' => 'status',
        'document_date' => 'documentDate',
        'description' => 'description',
        'description_foreign' => 'descriptionForeign',
        'void_description' => 'voidDescription',
        'voided_on' => 'voidedOn',
        'approved_on' => 'approvedOn',
        'transaction_no' => 'transactionNo',
        'note' => 'note',
        'template_type' => 'templateType',
        'contact_name' => 'contactName',
        'document_serial_no_prefix' => 'documentSerialNoPrefix',
        'created_by' => 'createdBy',
        'modified_by' => 'modifiedBy',
        'approved_by' => 'approvedBy',
        'voided_by' => 'voidedBy',
        'gallery_id' => 'galleryId',
        'contact_id' => 'contactId',
        'running_number_type' => 'runningNumberType',
        'fiscal_year_id' => 'fiscalYearId',
        'gallery' => 'gallery',
        'company' => 'company',
        'approved_by_user' => 'approvedByUser',
        'modified_by_user' => 'modifiedByUser',
        'voided_by_user' => 'voidedByUser',
        'remarks' => 'remarks',
        'contact' => 'contact',
        'fiscal_year' => 'fiscalYear',
        'reference' => 'reference',
        'reference_id' => 'referenceId',
        'reference_document_type' => 'referenceDocumentType',
        'is_system_document' => 'isSystemDocument',
        'rule_compile_status' => 'ruleCompileStatus',
        'book_of_accounts' => 'bookOfAccounts',
        'is_changed_document_date' => 'isChangedDocumentDate',
        'is_reset_document' => 'isResetDocument'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'document_serial' => 'setDocumentSerial',
        'document_type' => 'setDocumentType',
        'status' => 'setStatus',
        'document_date' => 'setDocumentDate',
        'description' => 'setDescription',
        'description_foreign' => 'setDescriptionForeign',
        'void_description' => 'setVoidDescription',
        'voided_on' => 'setVoidedOn',
        'approved_on' => 'setApprovedOn',
        'transaction_no' => 'setTransactionNo',
        'note' => 'setNote',
        'template_type' => 'setTemplateType',
        'contact_name' => 'setContactName',
        'document_serial_no_prefix' => 'setDocumentSerialNoPrefix',
        'created_by' => 'setCreatedBy',
        'modified_by' => 'setModifiedBy',
        'approved_by' => 'setApprovedBy',
        'voided_by' => 'setVoidedBy',
        'gallery_id' => 'setGalleryId',
        'contact_id' => 'setContactId',
        'running_number_type' => 'setRunningNumberType',
        'fiscal_year_id' => 'setFiscalYearId',
        'gallery' => 'setGallery',
        'company' => 'setCompany',
        'approved_by_user' => 'setApprovedByUser',
        'modified_by_user' => 'setModifiedByUser',
        'voided_by_user' => 'setVoidedByUser',
        'remarks' => 'setRemarks',
        'contact' => 'setContact',
        'fiscal_year' => 'setFiscalYear',
        'reference' => 'setReference',
        'reference_id' => 'setReferenceId',
        'reference_document_type' => 'setReferenceDocumentType',
        'is_system_document' => 'setIsSystemDocument',
        'rule_compile_status' => 'setRuleCompileStatus',
        'book_of_accounts' => 'setBookOfAccounts',
        'is_changed_document_date' => 'setIsChangedDocumentDate',
        'is_reset_document' => 'setIsResetDocument'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'document_serial' => 'getDocumentSerial',
        'document_type' => 'getDocumentType',
        'status' => 'getStatus',
        'document_date' => 'getDocumentDate',
        'description' => 'getDescription',
        'description_foreign' => 'getDescriptionForeign',
        'void_description' => 'getVoidDescription',
        'voided_on' => 'getVoidedOn',
        'approved_on' => 'getApprovedOn',
        'transaction_no' => 'getTransactionNo',
        'note' => 'getNote',
        'template_type' => 'getTemplateType',
        'contact_name' => 'getContactName',
        'document_serial_no_prefix' => 'getDocumentSerialNoPrefix',
        'created_by' => 'getCreatedBy',
        'modified_by' => 'getModifiedBy',
        'approved_by' => 'getApprovedBy',
        'voided_by' => 'getVoidedBy',
        'gallery_id' => 'getGalleryId',
        'contact_id' => 'getContactId',
        'running_number_type' => 'getRunningNumberType',
        'fiscal_year_id' => 'getFiscalYearId',
        'gallery' => 'getGallery',
        'company' => 'getCompany',
        'approved_by_user' => 'getApprovedByUser',
        'modified_by_user' => 'getModifiedByUser',
        'voided_by_user' => 'getVoidedByUser',
        'remarks' => 'getRemarks',
        'contact' => 'getContact',
        'fiscal_year' => 'getFiscalYear',
        'reference' => 'getReference',
        'reference_id' => 'getReferenceId',
        'reference_document_type' => 'getReferenceDocumentType',
        'is_system_document' => 'getIsSystemDocument',
        'rule_compile_status' => 'getRuleCompileStatus',
        'book_of_accounts' => 'getBookOfAccounts',
        'is_changed_document_date' => 'getIsChangedDocumentDate',
        'is_reset_document' => 'getIsResetDocument'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['document_serial'] = $data['document_serial'] ?? null;
        $this->container['document_type'] = $data['document_type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['document_date'] = $data['document_date'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['description_foreign'] = $data['description_foreign'] ?? null;
        $this->container['void_description'] = $data['void_description'] ?? null;
        $this->container['voided_on'] = $data['voided_on'] ?? null;
        $this->container['approved_on'] = $data['approved_on'] ?? null;
        $this->container['transaction_no'] = $data['transaction_no'] ?? null;
        $this->container['note'] = $data['note'] ?? null;
        $this->container['template_type'] = $data['template_type'] ?? null;
        $this->container['contact_name'] = $data['contact_name'] ?? null;
        $this->container['document_serial_no_prefix'] = $data['document_serial_no_prefix'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['modified_by'] = $data['modified_by'] ?? null;
        $this->container['approved_by'] = $data['approved_by'] ?? null;
        $this->container['voided_by'] = $data['voided_by'] ?? null;
        $this->container['gallery_id'] = $data['gallery_id'] ?? null;
        $this->container['contact_id'] = $data['contact_id'] ?? null;
        $this->container['running_number_type'] = $data['running_number_type'] ?? null;
        $this->container['fiscal_year_id'] = $data['fiscal_year_id'] ?? null;
        $this->container['gallery'] = $data['gallery'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['approved_by_user'] = $data['approved_by_user'] ?? null;
        $this->container['modified_by_user'] = $data['modified_by_user'] ?? null;
        $this->container['voided_by_user'] = $data['voided_by_user'] ?? null;
        $this->container['remarks'] = $data['remarks'] ?? null;
        $this->container['contact'] = $data['contact'] ?? null;
        $this->container['fiscal_year'] = $data['fiscal_year'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['reference_document_type'] = $data['reference_document_type'] ?? null;
        $this->container['is_system_document'] = $data['is_system_document'] ?? false;
        $this->container['rule_compile_status'] = $data['rule_compile_status'] ?? null;
        $this->container['book_of_accounts'] = $data['book_of_accounts'] ?? null;
        $this->container['is_changed_document_date'] = $data['is_changed_document_date'] ?? null;
        $this->container['is_reset_document'] = $data['is_reset_document'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['document_serial']) && (mb_strlen($this->container['document_serial']) > 100)) {
            $invalidProperties[] = "invalid value for 'document_serial', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['document_serial']) && (mb_strlen($this->container['document_serial']) < 0)) {
            $invalidProperties[] = "invalid value for 'document_serial', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['document_type'] === null) {
            $invalidProperties[] = "'document_type' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['document_date'] === null) {
            $invalidProperties[] = "'document_date' can't be null";
        }
        if ((mb_strlen($this->container['document_date']) < 1)) {
            $invalidProperties[] = "invalid value for 'document_date', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 2000)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['description_foreign']) && (mb_strlen($this->container['description_foreign']) > 2000)) {
            $invalidProperties[] = "invalid value for 'description_foreign', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['description_foreign']) && (mb_strlen($this->container['description_foreign']) < 0)) {
            $invalidProperties[] = "invalid value for 'description_foreign', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['void_description']) && (mb_strlen($this->container['void_description']) > 2000)) {
            $invalidProperties[] = "invalid value for 'void_description', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['void_description']) && (mb_strlen($this->container['void_description']) < 0)) {
            $invalidProperties[] = "invalid value for 'void_description', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['remarks']) && (mb_strlen($this->container['remarks']) > 2000)) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be smaller than or equal to 2000.";
        }

        if (!is_null($this->container['remarks']) && (mb_strlen($this->container['remarks']) < 0)) {
            $invalidProperties[] = "invalid value for 'remarks', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) > 50)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['reference']) && (mb_strlen($this->container['reference']) < 0)) {
            $invalidProperties[] = "invalid value for 'reference', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['is_system_document'] === null) {
            $invalidProperties[] = "'is_system_document' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int|null $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets document_serial
     *
     * @return string|null
     */
    public function getDocumentSerial()
    {
        return $this->container['document_serial'];
    }

    /**
     * Sets document_serial
     *
     * @param string|null $document_serial document_serial
     *
     * @return self
     */
    public function setDocumentSerial($document_serial)
    {
        if (!is_null($document_serial) && (mb_strlen($document_serial) > 100)) {
            throw new \InvalidArgumentException('invalid length for $document_serial when calling JournalEntry., must be smaller than or equal to 100.');
        }
        if (!is_null($document_serial) && (mb_strlen($document_serial) < 0)) {
            throw new \InvalidArgumentException('invalid length for $document_serial when calling JournalEntry., must be bigger than or equal to 0.');
        }

        $this->container['document_serial'] = $document_serial;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return \OpenAPI\Client\Model\DocumentTypes
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param \OpenAPI\Client\Model\DocumentTypes $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\JournalEntryStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\JournalEntryStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date document_date
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {

        if ((mb_strlen($document_date) < 1)) {
            throw new \InvalidArgumentException('invalid length for $document_date when calling JournalEntry., must be bigger than or equal to 1.');
        }

        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $description when calling JournalEntry., must be smaller than or equal to 2000.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling JournalEntry., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_foreign
     *
     * @return string|null
     */
    public function getDescriptionForeign()
    {
        return $this->container['description_foreign'];
    }

    /**
     * Sets description_foreign
     *
     * @param string|null $description_foreign description_foreign
     *
     * @return self
     */
    public function setDescriptionForeign($description_foreign)
    {
        if (!is_null($description_foreign) && (mb_strlen($description_foreign) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $description_foreign when calling JournalEntry., must be smaller than or equal to 2000.');
        }
        if (!is_null($description_foreign) && (mb_strlen($description_foreign) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description_foreign when calling JournalEntry., must be bigger than or equal to 0.');
        }

        $this->container['description_foreign'] = $description_foreign;

        return $this;
    }

    /**
     * Gets void_description
     *
     * @return string|null
     */
    public function getVoidDescription()
    {
        return $this->container['void_description'];
    }

    /**
     * Sets void_description
     *
     * @param string|null $void_description void_description
     *
     * @return self
     */
    public function setVoidDescription($void_description)
    {
        if (!is_null($void_description) && (mb_strlen($void_description) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $void_description when calling JournalEntry., must be smaller than or equal to 2000.');
        }
        if (!is_null($void_description) && (mb_strlen($void_description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $void_description when calling JournalEntry., must be bigger than or equal to 0.');
        }

        $this->container['void_description'] = $void_description;

        return $this;
    }

    /**
     * Gets voided_on
     *
     * @return \DateTime|null
     */
    public function getVoidedOn()
    {
        return $this->container['voided_on'];
    }

    /**
     * Sets voided_on
     *
     * @param \DateTime|null $voided_on voided_on
     *
     * @return self
     */
    public function setVoidedOn($voided_on)
    {
        $this->container['voided_on'] = $voided_on;

        return $this;
    }

    /**
     * Gets approved_on
     *
     * @return \DateTime|null
     */
    public function getApprovedOn()
    {
        return $this->container['approved_on'];
    }

    /**
     * Sets approved_on
     *
     * @param \DateTime|null $approved_on approved_on
     *
     * @return self
     */
    public function setApprovedOn($approved_on)
    {
        $this->container['approved_on'] = $approved_on;

        return $this;
    }

    /**
     * Gets transaction_no
     *
     * @return int|null
     */
    public function getTransactionNo()
    {
        return $this->container['transaction_no'];
    }

    /**
     * Sets transaction_no
     *
     * @param int|null $transaction_no transaction_no
     *
     * @return self
     */
    public function setTransactionNo($transaction_no)
    {
        $this->container['transaction_no'] = $transaction_no;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string|null
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string|null $note note
     *
     * @return self
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets template_type
     *
     * @return \OpenAPI\Client\Model\JournalEntryTemplateType|null
     */
    public function getTemplateType()
    {
        return $this->container['template_type'];
    }

    /**
     * Sets template_type
     *
     * @param \OpenAPI\Client\Model\JournalEntryTemplateType|null $template_type template_type
     *
     * @return self
     */
    public function setTemplateType($template_type)
    {
        $this->container['template_type'] = $template_type;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name contact_name
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets document_serial_no_prefix
     *
     * @return int|null
     */
    public function getDocumentSerialNoPrefix()
    {
        return $this->container['document_serial_no_prefix'];
    }

    /**
     * Sets document_serial_no_prefix
     *
     * @param int|null $document_serial_no_prefix document_serial_no_prefix
     *
     * @return self
     */
    public function setDocumentSerialNoPrefix($document_serial_no_prefix)
    {
        $this->container['document_serial_no_prefix'] = $document_serial_no_prefix;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return int|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param int|null $modified_by modified_by
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets approved_by
     *
     * @return int|null
     */
    public function getApprovedBy()
    {
        return $this->container['approved_by'];
    }

    /**
     * Sets approved_by
     *
     * @param int|null $approved_by approved_by
     *
     * @return self
     */
    public function setApprovedBy($approved_by)
    {
        $this->container['approved_by'] = $approved_by;

        return $this;
    }

    /**
     * Gets voided_by
     *
     * @return int|null
     */
    public function getVoidedBy()
    {
        return $this->container['voided_by'];
    }

    /**
     * Sets voided_by
     *
     * @param int|null $voided_by voided_by
     *
     * @return self
     */
    public function setVoidedBy($voided_by)
    {
        $this->container['voided_by'] = $voided_by;

        return $this;
    }

    /**
     * Gets gallery_id
     *
     * @return int|null
     */
    public function getGalleryId()
    {
        return $this->container['gallery_id'];
    }

    /**
     * Sets gallery_id
     *
     * @param int|null $gallery_id gallery_id
     *
     * @return self
     */
    public function setGalleryId($gallery_id)
    {
        $this->container['gallery_id'] = $gallery_id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int|null $contact_id contact_id
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets running_number_type
     *
     * @return OneOfRunningNumberType|null
     */
    public function getRunningNumberType()
    {
        return $this->container['running_number_type'];
    }

    /**
     * Sets running_number_type
     *
     * @param OneOfRunningNumberType|null $running_number_type running_number_type
     *
     * @return self
     */
    public function setRunningNumberType($running_number_type)
    {
        $this->container['running_number_type'] = $running_number_type;

        return $this;
    }

    /**
     * Gets fiscal_year_id
     *
     * @return int|null
     */
    public function getFiscalYearId()
    {
        return $this->container['fiscal_year_id'];
    }

    /**
     * Sets fiscal_year_id
     *
     * @param int|null $fiscal_year_id fiscal_year_id
     *
     * @return self
     */
    public function setFiscalYearId($fiscal_year_id)
    {
        $this->container['fiscal_year_id'] = $fiscal_year_id;

        return $this;
    }

    /**
     * Gets gallery
     *
     * @return OneOfGallery|null
     */
    public function getGallery()
    {
        return $this->container['gallery'];
    }

    /**
     * Sets gallery
     *
     * @param OneOfGallery|null $gallery gallery
     *
     * @return self
     */
    public function setGallery($gallery)
    {
        $this->container['gallery'] = $gallery;

        return $this;
    }

    /**
     * Gets company
     *
     * @return OneOfCompany|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param OneOfCompany|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets approved_by_user
     *
     * @return OneOfUser|null
     */
    public function getApprovedByUser()
    {
        return $this->container['approved_by_user'];
    }

    /**
     * Sets approved_by_user
     *
     * @param OneOfUser|null $approved_by_user approved_by_user
     *
     * @return self
     */
    public function setApprovedByUser($approved_by_user)
    {
        $this->container['approved_by_user'] = $approved_by_user;

        return $this;
    }

    /**
     * Gets modified_by_user
     *
     * @return OneOfUser|null
     */
    public function getModifiedByUser()
    {
        return $this->container['modified_by_user'];
    }

    /**
     * Sets modified_by_user
     *
     * @param OneOfUser|null $modified_by_user modified_by_user
     *
     * @return self
     */
    public function setModifiedByUser($modified_by_user)
    {
        $this->container['modified_by_user'] = $modified_by_user;

        return $this;
    }

    /**
     * Gets voided_by_user
     *
     * @return OneOfUser|null
     */
    public function getVoidedByUser()
    {
        return $this->container['voided_by_user'];
    }

    /**
     * Sets voided_by_user
     *
     * @param OneOfUser|null $voided_by_user voided_by_user
     *
     * @return self
     */
    public function setVoidedByUser($voided_by_user)
    {
        $this->container['voided_by_user'] = $voided_by_user;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        if (!is_null($remarks) && (mb_strlen($remarks) > 2000)) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling JournalEntry., must be smaller than or equal to 2000.');
        }
        if (!is_null($remarks) && (mb_strlen($remarks) < 0)) {
            throw new \InvalidArgumentException('invalid length for $remarks when calling JournalEntry., must be bigger than or equal to 0.');
        }

        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return OneOfContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param OneOfContact|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets fiscal_year
     *
     * @return OneOfFiscalYear|null
     */
    public function getFiscalYear()
    {
        return $this->container['fiscal_year'];
    }

    /**
     * Sets fiscal_year
     *
     * @param OneOfFiscalYear|null $fiscal_year fiscal_year
     *
     * @return self
     */
    public function setFiscalYear($fiscal_year)
    {
        $this->container['fiscal_year'] = $fiscal_year;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        if (!is_null($reference) && (mb_strlen($reference) > 50)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling JournalEntry., must be smaller than or equal to 50.');
        }
        if (!is_null($reference) && (mb_strlen($reference) < 0)) {
            throw new \InvalidArgumentException('invalid length for $reference when calling JournalEntry., must be bigger than or equal to 0.');
        }

        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int|null $reference_id reference_id
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets reference_document_type
     *
     * @return OneOfDocumentTypes|null
     */
    public function getReferenceDocumentType()
    {
        return $this->container['reference_document_type'];
    }

    /**
     * Sets reference_document_type
     *
     * @param OneOfDocumentTypes|null $reference_document_type reference_document_type
     *
     * @return self
     */
    public function setReferenceDocumentType($reference_document_type)
    {
        $this->container['reference_document_type'] = $reference_document_type;

        return $this;
    }

    /**
     * Gets is_system_document
     *
     * @return bool
     */
    public function getIsSystemDocument()
    {
        return $this->container['is_system_document'];
    }

    /**
     * Sets is_system_document
     *
     * @param bool $is_system_document is_system_document
     *
     * @return self
     */
    public function setIsSystemDocument($is_system_document)
    {
        $this->container['is_system_document'] = $is_system_document;

        return $this;
    }

    /**
     * Gets rule_compile_status
     *
     * @return \OpenAPI\Client\Model\RuleCompileStatus|null
     */
    public function getRuleCompileStatus()
    {
        return $this->container['rule_compile_status'];
    }

    /**
     * Sets rule_compile_status
     *
     * @param \OpenAPI\Client\Model\RuleCompileStatus|null $rule_compile_status rule_compile_status
     *
     * @return self
     */
    public function setRuleCompileStatus($rule_compile_status)
    {
        $this->container['rule_compile_status'] = $rule_compile_status;

        return $this;
    }

    /**
     * Gets book_of_accounts
     *
     * @return \OpenAPI\Client\Model\IBookOfAccount[]|null
     */
    public function getBookOfAccounts()
    {
        return $this->container['book_of_accounts'];
    }

    /**
     * Sets book_of_accounts
     *
     * @param \OpenAPI\Client\Model\IBookOfAccount[]|null $book_of_accounts book_of_accounts
     *
     * @return self
     */
    public function setBookOfAccounts($book_of_accounts)
    {
        $this->container['book_of_accounts'] = $book_of_accounts;

        return $this;
    }

    /**
     * Gets is_changed_document_date
     *
     * @return bool|null
     */
    public function getIsChangedDocumentDate()
    {
        return $this->container['is_changed_document_date'];
    }

    /**
     * Sets is_changed_document_date
     *
     * @param bool|null $is_changed_document_date is_changed_document_date
     *
     * @return self
     */
    public function setIsChangedDocumentDate($is_changed_document_date)
    {
        $this->container['is_changed_document_date'] = $is_changed_document_date;

        return $this;
    }

    /**
     * Gets is_reset_document
     *
     * @return bool|null
     */
    public function getIsResetDocument()
    {
        return $this->container['is_reset_document'];
    }

    /**
     * Sets is_reset_document
     *
     * @param bool|null $is_reset_document is_reset_document
     *
     * @return self
     */
    public function setIsResetDocument($is_reset_document)
    {
        $this->container['is_reset_document'] = $is_reset_document;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


