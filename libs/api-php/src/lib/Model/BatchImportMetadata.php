<?php
/**
 * BatchImportMetadata
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BatchImportMetadata Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BatchImportMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BatchImportMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'company_user_guid' => 'string',
        'created_at' => '\DateTime',
        'updated_at' => '\DateTime',
        'template_id' => 'string',
        'batch_id' => 'string',
        'filename' => 'string',
        'document_type' => '\OpenAPI\Client\Model\DocumentTypes',
        'status' => '\OpenAPI\Client\Model\BatchImportStatus',
        'document_count' => 'int',
        'success_count' => 'int',
        'failed_count' => 'int',
        's3_key' => 'string',
        'user_id' => 'int',
        'company_id' => 'int',
        'is_viewed' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'company_user_guid' => null,
        'created_at' => 'date-time',
        'updated_at' => 'date-time',
        'template_id' => null,
        'batch_id' => null,
        'filename' => null,
        'document_type' => null,
        'status' => null,
        'document_count' => 'int32',
        'success_count' => 'int32',
        'failed_count' => 'int32',
        's3_key' => null,
        'user_id' => 'int64',
        'company_id' => 'int64',
        'is_viewed' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'company_user_guid' => 'companyUserGuid',
        'created_at' => 'createdAt',
        'updated_at' => 'updatedAt',
        'template_id' => 'templateId',
        'batch_id' => 'batchId',
        'filename' => 'filename',
        'document_type' => 'documentType',
        'status' => 'status',
        'document_count' => 'documentCount',
        'success_count' => 'successCount',
        'failed_count' => 'failedCount',
        's3_key' => 's3Key',
        'user_id' => 'userId',
        'company_id' => 'companyId',
        'is_viewed' => 'isViewed'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'company_user_guid' => 'setCompanyUserGuid',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt',
        'template_id' => 'setTemplateId',
        'batch_id' => 'setBatchId',
        'filename' => 'setFilename',
        'document_type' => 'setDocumentType',
        'status' => 'setStatus',
        'document_count' => 'setDocumentCount',
        'success_count' => 'setSuccessCount',
        'failed_count' => 'setFailedCount',
        's3_key' => 'setS3Key',
        'user_id' => 'setUserId',
        'company_id' => 'setCompanyId',
        'is_viewed' => 'setIsViewed'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'company_user_guid' => 'getCompanyUserGuid',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt',
        'template_id' => 'getTemplateId',
        'batch_id' => 'getBatchId',
        'filename' => 'getFilename',
        'document_type' => 'getDocumentType',
        'status' => 'getStatus',
        'document_count' => 'getDocumentCount',
        'success_count' => 'getSuccessCount',
        'failed_count' => 'getFailedCount',
        's3_key' => 'getS3Key',
        'user_id' => 'getUserId',
        'company_id' => 'getCompanyId',
        'is_viewed' => 'getIsViewed'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['company_user_guid'] = $data['company_user_guid'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
        $this->container['template_id'] = $data['template_id'] ?? null;
        $this->container['batch_id'] = $data['batch_id'] ?? null;
        $this->container['filename'] = $data['filename'] ?? null;
        $this->container['document_type'] = $data['document_type'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['document_count'] = $data['document_count'] ?? null;
        $this->container['success_count'] = $data['success_count'] ?? null;
        $this->container['failed_count'] = $data['failed_count'] ?? null;
        $this->container['s3_key'] = $data['s3_key'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['is_viewed'] = $data['is_viewed'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets company_user_guid
     *
     * @return string|null
     */
    public function getCompanyUserGuid()
    {
        return $this->container['company_user_guid'];
    }

    /**
     * Sets company_user_guid
     *
     * @param string|null $company_user_guid company_user_guid
     *
     * @return self
     */
    public function setCompanyUserGuid($company_user_guid)
    {
        $this->container['company_user_guid'] = $company_user_guid;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string|null $template_id template_id
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets batch_id
     *
     * @return string|null
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param string|null $batch_id batch_id
     *
     * @return self
     */
    public function setBatchId($batch_id)
    {
        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets filename
     *
     * @return string|null
     */
    public function getFilename()
    {
        return $this->container['filename'];
    }

    /**
     * Sets filename
     *
     * @param string|null $filename filename
     *
     * @return self
     */
    public function setFilename($filename)
    {
        $this->container['filename'] = $filename;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return \OpenAPI\Client\Model\DocumentTypes|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param \OpenAPI\Client\Model\DocumentTypes|null $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\BatchImportStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\BatchImportStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets document_count
     *
     * @return int|null
     */
    public function getDocumentCount()
    {
        return $this->container['document_count'];
    }

    /**
     * Sets document_count
     *
     * @param int|null $document_count document_count
     *
     * @return self
     */
    public function setDocumentCount($document_count)
    {
        $this->container['document_count'] = $document_count;

        return $this;
    }

    /**
     * Gets success_count
     *
     * @return int|null
     */
    public function getSuccessCount()
    {
        return $this->container['success_count'];
    }

    /**
     * Sets success_count
     *
     * @param int|null $success_count success_count
     *
     * @return self
     */
    public function setSuccessCount($success_count)
    {
        $this->container['success_count'] = $success_count;

        return $this;
    }

    /**
     * Gets failed_count
     *
     * @return int|null
     */
    public function getFailedCount()
    {
        return $this->container['failed_count'];
    }

    /**
     * Sets failed_count
     *
     * @param int|null $failed_count failed_count
     *
     * @return self
     */
    public function setFailedCount($failed_count)
    {
        $this->container['failed_count'] = $failed_count;

        return $this;
    }

    /**
     * Gets s3_key
     *
     * @return string|null
     */
    public function getS3Key()
    {
        return $this->container['s3_key'];
    }

    /**
     * Sets s3_key
     *
     * @param string|null $s3_key s3_key
     *
     * @return self
     */
    public function setS3Key($s3_key)
    {
        $this->container['s3_key'] = $s3_key;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int|null $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets is_viewed
     *
     * @return bool|null
     */
    public function getIsViewed()
    {
        return $this->container['is_viewed'];
    }

    /**
     * Sets is_viewed
     *
     * @param bool|null $is_viewed is_viewed
     *
     * @return self
     */
    public function setIsViewed($is_viewed)
    {
        $this->container['is_viewed'] = $is_viewed;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


