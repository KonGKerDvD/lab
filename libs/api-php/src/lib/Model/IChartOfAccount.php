<?php
/**
 * IChartOfAccount
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IChartOfAccount Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class IChartOfAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IChartOfAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'code' => 'string',
        'name_local' => 'string',
        'name_foreign' => 'string',
        'description_local' => 'string',
        'description_foreign' => 'string',
        'category' => '\OpenAPI\Client\Model\ChartOfAccountCategory',
        'parent_id' => 'int',
        'is_folder' => 'bool',
        'is_bank' => 'bool',
        'is_receivable' => 'bool',
        'is_delete' => 'bool',
        'is_lock' => 'bool',
        'createdon' => '\DateTime',
        'modifiedon' => '\DateTime',
        'modifiedby' => 'int',
        'value' => 'float',
        'left' => 'int',
        'right' => 'int',
        'is_default' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'code' => null,
        'name_local' => null,
        'name_foreign' => null,
        'description_local' => null,
        'description_foreign' => null,
        'category' => null,
        'parent_id' => 'int64',
        'is_folder' => null,
        'is_bank' => null,
        'is_receivable' => null,
        'is_delete' => null,
        'is_lock' => null,
        'createdon' => 'date-time',
        'modifiedon' => 'date-time',
        'modifiedby' => 'int64',
        'value' => 'decimal',
        'left' => 'int32',
        'right' => 'int32',
        'is_default' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'code' => 'code',
        'name_local' => 'nameLocal',
        'name_foreign' => 'nameForeign',
        'description_local' => 'descriptionLocal',
        'description_foreign' => 'descriptionForeign',
        'category' => 'category',
        'parent_id' => 'parentId',
        'is_folder' => 'isFolder',
        'is_bank' => 'isBank',
        'is_receivable' => 'isReceivable',
        'is_delete' => 'isDelete',
        'is_lock' => 'isLock',
        'createdon' => 'createdon',
        'modifiedon' => 'modifiedon',
        'modifiedby' => 'modifiedby',
        'value' => 'value',
        'left' => 'left',
        'right' => 'right',
        'is_default' => 'isDefault'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'code' => 'setCode',
        'name_local' => 'setNameLocal',
        'name_foreign' => 'setNameForeign',
        'description_local' => 'setDescriptionLocal',
        'description_foreign' => 'setDescriptionForeign',
        'category' => 'setCategory',
        'parent_id' => 'setParentId',
        'is_folder' => 'setIsFolder',
        'is_bank' => 'setIsBank',
        'is_receivable' => 'setIsReceivable',
        'is_delete' => 'setIsDelete',
        'is_lock' => 'setIsLock',
        'createdon' => 'setCreatedon',
        'modifiedon' => 'setModifiedon',
        'modifiedby' => 'setModifiedby',
        'value' => 'setValue',
        'left' => 'setLeft',
        'right' => 'setRight',
        'is_default' => 'setIsDefault'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'code' => 'getCode',
        'name_local' => 'getNameLocal',
        'name_foreign' => 'getNameForeign',
        'description_local' => 'getDescriptionLocal',
        'description_foreign' => 'getDescriptionForeign',
        'category' => 'getCategory',
        'parent_id' => 'getParentId',
        'is_folder' => 'getIsFolder',
        'is_bank' => 'getIsBank',
        'is_receivable' => 'getIsReceivable',
        'is_delete' => 'getIsDelete',
        'is_lock' => 'getIsLock',
        'createdon' => 'getCreatedon',
        'modifiedon' => 'getModifiedon',
        'modifiedby' => 'getModifiedby',
        'value' => 'getValue',
        'left' => 'getLeft',
        'right' => 'getRight',
        'is_default' => 'getIsDefault'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['code'] = $data['code'] ?? null;
        $this->container['name_local'] = $data['name_local'] ?? null;
        $this->container['name_foreign'] = $data['name_foreign'] ?? null;
        $this->container['description_local'] = $data['description_local'] ?? null;
        $this->container['description_foreign'] = $data['description_foreign'] ?? null;
        $this->container['category'] = $data['category'] ?? null;
        $this->container['parent_id'] = $data['parent_id'] ?? null;
        $this->container['is_folder'] = $data['is_folder'] ?? null;
        $this->container['is_bank'] = $data['is_bank'] ?? null;
        $this->container['is_receivable'] = $data['is_receivable'] ?? null;
        $this->container['is_delete'] = $data['is_delete'] ?? null;
        $this->container['is_lock'] = $data['is_lock'] ?? null;
        $this->container['createdon'] = $data['createdon'] ?? null;
        $this->container['modifiedon'] = $data['modifiedon'] ?? null;
        $this->container['modifiedby'] = $data['modifiedby'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['left'] = $data['left'] ?? null;
        $this->container['right'] = $data['right'] ?? null;
        $this->container['is_default'] = $data['is_default'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets name_local
     *
     * @return string|null
     */
    public function getNameLocal()
    {
        return $this->container['name_local'];
    }

    /**
     * Sets name_local
     *
     * @param string|null $name_local name_local
     *
     * @return self
     */
    public function setNameLocal($name_local)
    {
        $this->container['name_local'] = $name_local;

        return $this;
    }

    /**
     * Gets name_foreign
     *
     * @return string|null
     */
    public function getNameForeign()
    {
        return $this->container['name_foreign'];
    }

    /**
     * Sets name_foreign
     *
     * @param string|null $name_foreign name_foreign
     *
     * @return self
     */
    public function setNameForeign($name_foreign)
    {
        $this->container['name_foreign'] = $name_foreign;

        return $this;
    }

    /**
     * Gets description_local
     *
     * @return string|null
     */
    public function getDescriptionLocal()
    {
        return $this->container['description_local'];
    }

    /**
     * Sets description_local
     *
     * @param string|null $description_local description_local
     *
     * @return self
     */
    public function setDescriptionLocal($description_local)
    {
        $this->container['description_local'] = $description_local;

        return $this;
    }

    /**
     * Gets description_foreign
     *
     * @return string|null
     */
    public function getDescriptionForeign()
    {
        return $this->container['description_foreign'];
    }

    /**
     * Sets description_foreign
     *
     * @param string|null $description_foreign description_foreign
     *
     * @return self
     */
    public function setDescriptionForeign($description_foreign)
    {
        $this->container['description_foreign'] = $description_foreign;

        return $this;
    }

    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\ChartOfAccountCategory|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\ChartOfAccountCategory|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int|null
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int|null $parent_id parent_id
     *
     * @return self
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets is_folder
     *
     * @return bool|null
     */
    public function getIsFolder()
    {
        return $this->container['is_folder'];
    }

    /**
     * Sets is_folder
     *
     * @param bool|null $is_folder is_folder
     *
     * @return self
     */
    public function setIsFolder($is_folder)
    {
        $this->container['is_folder'] = $is_folder;

        return $this;
    }

    /**
     * Gets is_bank
     *
     * @return bool|null
     */
    public function getIsBank()
    {
        return $this->container['is_bank'];
    }

    /**
     * Sets is_bank
     *
     * @param bool|null $is_bank is_bank
     *
     * @return self
     */
    public function setIsBank($is_bank)
    {
        $this->container['is_bank'] = $is_bank;

        return $this;
    }

    /**
     * Gets is_receivable
     *
     * @return bool|null
     */
    public function getIsReceivable()
    {
        return $this->container['is_receivable'];
    }

    /**
     * Sets is_receivable
     *
     * @param bool|null $is_receivable is_receivable
     *
     * @return self
     */
    public function setIsReceivable($is_receivable)
    {
        $this->container['is_receivable'] = $is_receivable;

        return $this;
    }

    /**
     * Gets is_delete
     *
     * @return bool|null
     */
    public function getIsDelete()
    {
        return $this->container['is_delete'];
    }

    /**
     * Sets is_delete
     *
     * @param bool|null $is_delete is_delete
     *
     * @return self
     */
    public function setIsDelete($is_delete)
    {
        $this->container['is_delete'] = $is_delete;

        return $this;
    }

    /**
     * Gets is_lock
     *
     * @return bool|null
     */
    public function getIsLock()
    {
        return $this->container['is_lock'];
    }

    /**
     * Sets is_lock
     *
     * @param bool|null $is_lock is_lock
     *
     * @return self
     */
    public function setIsLock($is_lock)
    {
        $this->container['is_lock'] = $is_lock;

        return $this;
    }

    /**
     * Gets createdon
     *
     * @return \DateTime|null
     */
    public function getCreatedon()
    {
        return $this->container['createdon'];
    }

    /**
     * Sets createdon
     *
     * @param \DateTime|null $createdon createdon
     *
     * @return self
     */
    public function setCreatedon($createdon)
    {
        $this->container['createdon'] = $createdon;

        return $this;
    }

    /**
     * Gets modifiedon
     *
     * @return \DateTime|null
     */
    public function getModifiedon()
    {
        return $this->container['modifiedon'];
    }

    /**
     * Sets modifiedon
     *
     * @param \DateTime|null $modifiedon modifiedon
     *
     * @return self
     */
    public function setModifiedon($modifiedon)
    {
        $this->container['modifiedon'] = $modifiedon;

        return $this;
    }

    /**
     * Gets modifiedby
     *
     * @return int|null
     */
    public function getModifiedby()
    {
        return $this->container['modifiedby'];
    }

    /**
     * Sets modifiedby
     *
     * @param int|null $modifiedby modifiedby
     *
     * @return self
     */
    public function setModifiedby($modifiedby)
    {
        $this->container['modifiedby'] = $modifiedby;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets left
     *
     * @return int|null
     */
    public function getLeft()
    {
        return $this->container['left'];
    }

    /**
     * Sets left
     *
     * @param int|null $left left
     *
     * @return self
     */
    public function setLeft($left)
    {
        $this->container['left'] = $left;

        return $this;
    }

    /**
     * Gets right
     *
     * @return int|null
     */
    public function getRight()
    {
        return $this->container['right'];
    }

    /**
     * Sets right
     *
     * @param int|null $right right
     *
     * @return self
     */
    public function setRight($right)
    {
        $this->container['right'] = $right;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool|null
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool|null $is_default is_default
     *
     * @return self
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


