<?php
/**
 * ProductList
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ProductList Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ProductList implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductList';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'bar_code' => 'string',
        'name' => 'string',
        'unit_measurement' => 'string',
        'unit_price' => 'float',
        'unit_price_with_vat' => 'float',
        'unit_weight' => 'float',
        'category_id' => 'int',
        'description' => 'string',
        'remarks' => 'string',
        'gallery_id' => 'int',
        'is_vat' => 'bool',
        'main_unit_id' => 'int',
        'sub_unit_id' => 'int',
        'main_unit_amount' => 'int',
        'sub_unit_amount' => 'int',
        'has_stock' => 'bool',
        'product_code' => 'string',
        'type' => '\OpenAPI\Client\Model\ProductTypes',
        'buy_price' => 'float',
        'buy_price_with_vat' => 'float',
        'is_buy_vat' => 'bool',
        'allow_over_sold' => 'bool',
        'image' => 'string',
        'is_delete' => 'bool',
        'vat_rate' => 'int',
        'buy_vat_rate' => 'int',
        'reset_transaction_id' => 'int',
        'created_on' => '\DateTime',
        'modified_on' => '\DateTime',
        'brought_forward_on' => '\DateTime',
        'buy_description' => 'string',
        'buy_chart_of_account_id' => 'int',
        'sell_chart_of_account_id' => 'int',
        'product_non_inventory_type' => 'OneOfProductNonInventoryType',
        'transaction_id' => 'string',
        'product_main_unit' => 'OneOfProductUnit',
        'product_sub_unit' => 'OneOfProductUnit',
        'product_category' => 'OneOfProductCategory',
        'is_migrate' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'bar_code' => null,
        'name' => null,
        'unit_measurement' => null,
        'unit_price' => 'decimal',
        'unit_price_with_vat' => 'decimal',
        'unit_weight' => 'decimal',
        'category_id' => 'int64',
        'description' => null,
        'remarks' => null,
        'gallery_id' => 'int64',
        'is_vat' => null,
        'main_unit_id' => 'int64',
        'sub_unit_id' => 'int64',
        'main_unit_amount' => 'int32',
        'sub_unit_amount' => 'int32',
        'has_stock' => null,
        'product_code' => null,
        'type' => null,
        'buy_price' => 'decimal',
        'buy_price_with_vat' => 'decimal',
        'is_buy_vat' => null,
        'allow_over_sold' => null,
        'image' => null,
        'is_delete' => null,
        'vat_rate' => 'int32',
        'buy_vat_rate' => 'int32',
        'reset_transaction_id' => 'int64',
        'created_on' => 'date-time',
        'modified_on' => 'date-time',
        'brought_forward_on' => 'date-time',
        'buy_description' => null,
        'buy_chart_of_account_id' => 'int64',
        'sell_chart_of_account_id' => 'int64',
        'product_non_inventory_type' => null,
        'transaction_id' => null,
        'product_main_unit' => null,
        'product_sub_unit' => null,
        'product_category' => null,
        'is_migrate' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'bar_code' => 'barCode',
        'name' => 'name',
        'unit_measurement' => 'unitMeasurement',
        'unit_price' => 'unitPrice',
        'unit_price_with_vat' => 'unitPriceWithVat',
        'unit_weight' => 'unitWeight',
        'category_id' => 'categoryId',
        'description' => 'description',
        'remarks' => 'remarks',
        'gallery_id' => 'galleryId',
        'is_vat' => 'isVat',
        'main_unit_id' => 'mainUnitId',
        'sub_unit_id' => 'subUnitId',
        'main_unit_amount' => 'mainUnitAmount',
        'sub_unit_amount' => 'subUnitAmount',
        'has_stock' => 'hasStock',
        'product_code' => 'productCode',
        'type' => 'type',
        'buy_price' => 'buyPrice',
        'buy_price_with_vat' => 'buyPriceWithVat',
        'is_buy_vat' => 'isBuyVat',
        'allow_over_sold' => 'allowOverSold',
        'image' => 'image',
        'is_delete' => 'isDelete',
        'vat_rate' => 'vatRate',
        'buy_vat_rate' => 'buyVatRate',
        'reset_transaction_id' => 'resetTransactionId',
        'created_on' => 'createdOn',
        'modified_on' => 'modifiedOn',
        'brought_forward_on' => 'broughtForwardOn',
        'buy_description' => 'buyDescription',
        'buy_chart_of_account_id' => 'buyChartOfAccountId',
        'sell_chart_of_account_id' => 'sellChartOfAccountId',
        'product_non_inventory_type' => 'productNonInventoryType',
        'transaction_id' => 'transactionId',
        'product_main_unit' => 'productMainUnit',
        'product_sub_unit' => 'productSubUnit',
        'product_category' => 'productCategory',
        'is_migrate' => 'isMigrate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'bar_code' => 'setBarCode',
        'name' => 'setName',
        'unit_measurement' => 'setUnitMeasurement',
        'unit_price' => 'setUnitPrice',
        'unit_price_with_vat' => 'setUnitPriceWithVat',
        'unit_weight' => 'setUnitWeight',
        'category_id' => 'setCategoryId',
        'description' => 'setDescription',
        'remarks' => 'setRemarks',
        'gallery_id' => 'setGalleryId',
        'is_vat' => 'setIsVat',
        'main_unit_id' => 'setMainUnitId',
        'sub_unit_id' => 'setSubUnitId',
        'main_unit_amount' => 'setMainUnitAmount',
        'sub_unit_amount' => 'setSubUnitAmount',
        'has_stock' => 'setHasStock',
        'product_code' => 'setProductCode',
        'type' => 'setType',
        'buy_price' => 'setBuyPrice',
        'buy_price_with_vat' => 'setBuyPriceWithVat',
        'is_buy_vat' => 'setIsBuyVat',
        'allow_over_sold' => 'setAllowOverSold',
        'image' => 'setImage',
        'is_delete' => 'setIsDelete',
        'vat_rate' => 'setVatRate',
        'buy_vat_rate' => 'setBuyVatRate',
        'reset_transaction_id' => 'setResetTransactionId',
        'created_on' => 'setCreatedOn',
        'modified_on' => 'setModifiedOn',
        'brought_forward_on' => 'setBroughtForwardOn',
        'buy_description' => 'setBuyDescription',
        'buy_chart_of_account_id' => 'setBuyChartOfAccountId',
        'sell_chart_of_account_id' => 'setSellChartOfAccountId',
        'product_non_inventory_type' => 'setProductNonInventoryType',
        'transaction_id' => 'setTransactionId',
        'product_main_unit' => 'setProductMainUnit',
        'product_sub_unit' => 'setProductSubUnit',
        'product_category' => 'setProductCategory',
        'is_migrate' => 'setIsMigrate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'bar_code' => 'getBarCode',
        'name' => 'getName',
        'unit_measurement' => 'getUnitMeasurement',
        'unit_price' => 'getUnitPrice',
        'unit_price_with_vat' => 'getUnitPriceWithVat',
        'unit_weight' => 'getUnitWeight',
        'category_id' => 'getCategoryId',
        'description' => 'getDescription',
        'remarks' => 'getRemarks',
        'gallery_id' => 'getGalleryId',
        'is_vat' => 'getIsVat',
        'main_unit_id' => 'getMainUnitId',
        'sub_unit_id' => 'getSubUnitId',
        'main_unit_amount' => 'getMainUnitAmount',
        'sub_unit_amount' => 'getSubUnitAmount',
        'has_stock' => 'getHasStock',
        'product_code' => 'getProductCode',
        'type' => 'getType',
        'buy_price' => 'getBuyPrice',
        'buy_price_with_vat' => 'getBuyPriceWithVat',
        'is_buy_vat' => 'getIsBuyVat',
        'allow_over_sold' => 'getAllowOverSold',
        'image' => 'getImage',
        'is_delete' => 'getIsDelete',
        'vat_rate' => 'getVatRate',
        'buy_vat_rate' => 'getBuyVatRate',
        'reset_transaction_id' => 'getResetTransactionId',
        'created_on' => 'getCreatedOn',
        'modified_on' => 'getModifiedOn',
        'brought_forward_on' => 'getBroughtForwardOn',
        'buy_description' => 'getBuyDescription',
        'buy_chart_of_account_id' => 'getBuyChartOfAccountId',
        'sell_chart_of_account_id' => 'getSellChartOfAccountId',
        'product_non_inventory_type' => 'getProductNonInventoryType',
        'transaction_id' => 'getTransactionId',
        'product_main_unit' => 'getProductMainUnit',
        'product_sub_unit' => 'getProductSubUnit',
        'product_category' => 'getProductCategory',
        'is_migrate' => 'getIsMigrate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['bar_code'] = $data['bar_code'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['unit_measurement'] = $data['unit_measurement'] ?? null;
        $this->container['unit_price'] = $data['unit_price'] ?? null;
        $this->container['unit_price_with_vat'] = $data['unit_price_with_vat'] ?? null;
        $this->container['unit_weight'] = $data['unit_weight'] ?? null;
        $this->container['category_id'] = $data['category_id'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['remarks'] = $data['remarks'] ?? null;
        $this->container['gallery_id'] = $data['gallery_id'] ?? null;
        $this->container['is_vat'] = $data['is_vat'] ?? null;
        $this->container['main_unit_id'] = $data['main_unit_id'] ?? null;
        $this->container['sub_unit_id'] = $data['sub_unit_id'] ?? null;
        $this->container['main_unit_amount'] = $data['main_unit_amount'] ?? null;
        $this->container['sub_unit_amount'] = $data['sub_unit_amount'] ?? null;
        $this->container['has_stock'] = $data['has_stock'] ?? null;
        $this->container['product_code'] = $data['product_code'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['buy_price'] = $data['buy_price'] ?? null;
        $this->container['buy_price_with_vat'] = $data['buy_price_with_vat'] ?? null;
        $this->container['is_buy_vat'] = $data['is_buy_vat'] ?? null;
        $this->container['allow_over_sold'] = $data['allow_over_sold'] ?? null;
        $this->container['image'] = $data['image'] ?? null;
        $this->container['is_delete'] = $data['is_delete'] ?? null;
        $this->container['vat_rate'] = $data['vat_rate'] ?? null;
        $this->container['buy_vat_rate'] = $data['buy_vat_rate'] ?? null;
        $this->container['reset_transaction_id'] = $data['reset_transaction_id'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['brought_forward_on'] = $data['brought_forward_on'] ?? null;
        $this->container['buy_description'] = $data['buy_description'] ?? null;
        $this->container['buy_chart_of_account_id'] = $data['buy_chart_of_account_id'] ?? null;
        $this->container['sell_chart_of_account_id'] = $data['sell_chart_of_account_id'] ?? null;
        $this->container['product_non_inventory_type'] = $data['product_non_inventory_type'] ?? null;
        $this->container['transaction_id'] = $data['transaction_id'] ?? null;
        $this->container['product_main_unit'] = $data['product_main_unit'] ?? null;
        $this->container['product_sub_unit'] = $data['product_sub_unit'] ?? null;
        $this->container['product_category'] = $data['product_category'] ?? null;
        $this->container['is_migrate'] = $data['is_migrate'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bar_code']) && (mb_strlen($this->container['bar_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'bar_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['bar_code']) && (mb_strlen($this->container['bar_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'bar_code', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['unit_measurement']) && (mb_strlen($this->container['unit_measurement']) > 50)) {
            $invalidProperties[] = "invalid value for 'unit_measurement', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['unit_measurement']) && (mb_strlen($this->container['unit_measurement']) < 0)) {
            $invalidProperties[] = "invalid value for 'unit_measurement', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) > 255)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['product_code']) && (mb_strlen($this->container['product_code']) < 0)) {
            $invalidProperties[] = "invalid value for 'product_code', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['transaction_id']) && (mb_strlen($this->container['transaction_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'transaction_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['transaction_id']) && (mb_strlen($this->container['transaction_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'transaction_id', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets bar_code
     *
     * @return string|null
     */
    public function getBarCode()
    {
        return $this->container['bar_code'];
    }

    /**
     * Sets bar_code
     *
     * @param string|null $bar_code bar_code
     *
     * @return self
     */
    public function setBarCode($bar_code)
    {
        if (!is_null($bar_code) && (mb_strlen($bar_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $bar_code when calling ProductList., must be smaller than or equal to 255.');
        }
        if (!is_null($bar_code) && (mb_strlen($bar_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bar_code when calling ProductList., must be bigger than or equal to 0.');
        }

        $this->container['bar_code'] = $bar_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProductList., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ProductList., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets unit_measurement
     *
     * @return string|null
     */
    public function getUnitMeasurement()
    {
        return $this->container['unit_measurement'];
    }

    /**
     * Sets unit_measurement
     *
     * @param string|null $unit_measurement unit_measurement
     *
     * @return self
     */
    public function setUnitMeasurement($unit_measurement)
    {
        if (!is_null($unit_measurement) && (mb_strlen($unit_measurement) > 50)) {
            throw new \InvalidArgumentException('invalid length for $unit_measurement when calling ProductList., must be smaller than or equal to 50.');
        }
        if (!is_null($unit_measurement) && (mb_strlen($unit_measurement) < 0)) {
            throw new \InvalidArgumentException('invalid length for $unit_measurement when calling ProductList., must be bigger than or equal to 0.');
        }

        $this->container['unit_measurement'] = $unit_measurement;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return float|null
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param float|null $unit_price unit_price
     *
     * @return self
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets unit_price_with_vat
     *
     * @return float|null
     */
    public function getUnitPriceWithVat()
    {
        return $this->container['unit_price_with_vat'];
    }

    /**
     * Sets unit_price_with_vat
     *
     * @param float|null $unit_price_with_vat unit_price_with_vat
     *
     * @return self
     */
    public function setUnitPriceWithVat($unit_price_with_vat)
    {
        $this->container['unit_price_with_vat'] = $unit_price_with_vat;

        return $this;
    }

    /**
     * Gets unit_weight
     *
     * @return float|null
     */
    public function getUnitWeight()
    {
        return $this->container['unit_weight'];
    }

    /**
     * Sets unit_weight
     *
     * @param float|null $unit_weight unit_weight
     *
     * @return self
     */
    public function setUnitWeight($unit_weight)
    {
        $this->container['unit_weight'] = $unit_weight;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int|null $category_id category_id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets gallery_id
     *
     * @return int|null
     */
    public function getGalleryId()
    {
        return $this->container['gallery_id'];
    }

    /**
     * Sets gallery_id
     *
     * @param int|null $gallery_id gallery_id
     *
     * @return self
     */
    public function setGalleryId($gallery_id)
    {
        $this->container['gallery_id'] = $gallery_id;

        return $this;
    }

    /**
     * Gets is_vat
     *
     * @return bool|null
     */
    public function getIsVat()
    {
        return $this->container['is_vat'];
    }

    /**
     * Sets is_vat
     *
     * @param bool|null $is_vat is_vat
     *
     * @return self
     */
    public function setIsVat($is_vat)
    {
        $this->container['is_vat'] = $is_vat;

        return $this;
    }

    /**
     * Gets main_unit_id
     *
     * @return int|null
     */
    public function getMainUnitId()
    {
        return $this->container['main_unit_id'];
    }

    /**
     * Sets main_unit_id
     *
     * @param int|null $main_unit_id main_unit_id
     *
     * @return self
     */
    public function setMainUnitId($main_unit_id)
    {
        $this->container['main_unit_id'] = $main_unit_id;

        return $this;
    }

    /**
     * Gets sub_unit_id
     *
     * @return int|null
     */
    public function getSubUnitId()
    {
        return $this->container['sub_unit_id'];
    }

    /**
     * Sets sub_unit_id
     *
     * @param int|null $sub_unit_id sub_unit_id
     *
     * @return self
     */
    public function setSubUnitId($sub_unit_id)
    {
        $this->container['sub_unit_id'] = $sub_unit_id;

        return $this;
    }

    /**
     * Gets main_unit_amount
     *
     * @return int|null
     */
    public function getMainUnitAmount()
    {
        return $this->container['main_unit_amount'];
    }

    /**
     * Sets main_unit_amount
     *
     * @param int|null $main_unit_amount main_unit_amount
     *
     * @return self
     */
    public function setMainUnitAmount($main_unit_amount)
    {
        $this->container['main_unit_amount'] = $main_unit_amount;

        return $this;
    }

    /**
     * Gets sub_unit_amount
     *
     * @return int|null
     */
    public function getSubUnitAmount()
    {
        return $this->container['sub_unit_amount'];
    }

    /**
     * Sets sub_unit_amount
     *
     * @param int|null $sub_unit_amount sub_unit_amount
     *
     * @return self
     */
    public function setSubUnitAmount($sub_unit_amount)
    {
        $this->container['sub_unit_amount'] = $sub_unit_amount;

        return $this;
    }

    /**
     * Gets has_stock
     *
     * @return bool|null
     */
    public function getHasStock()
    {
        return $this->container['has_stock'];
    }

    /**
     * Sets has_stock
     *
     * @param bool|null $has_stock has_stock
     *
     * @return self
     */
    public function setHasStock($has_stock)
    {
        $this->container['has_stock'] = $has_stock;

        return $this;
    }

    /**
     * Gets product_code
     *
     * @return string|null
     */
    public function getProductCode()
    {
        return $this->container['product_code'];
    }

    /**
     * Sets product_code
     *
     * @param string|null $product_code product_code
     *
     * @return self
     */
    public function setProductCode($product_code)
    {
        if (!is_null($product_code) && (mb_strlen($product_code) > 255)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling ProductList., must be smaller than or equal to 255.');
        }
        if (!is_null($product_code) && (mb_strlen($product_code) < 0)) {
            throw new \InvalidArgumentException('invalid length for $product_code when calling ProductList., must be bigger than or equal to 0.');
        }

        $this->container['product_code'] = $product_code;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\ProductTypes|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\ProductTypes|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets buy_price
     *
     * @return float|null
     */
    public function getBuyPrice()
    {
        return $this->container['buy_price'];
    }

    /**
     * Sets buy_price
     *
     * @param float|null $buy_price buy_price
     *
     * @return self
     */
    public function setBuyPrice($buy_price)
    {
        $this->container['buy_price'] = $buy_price;

        return $this;
    }

    /**
     * Gets buy_price_with_vat
     *
     * @return float|null
     */
    public function getBuyPriceWithVat()
    {
        return $this->container['buy_price_with_vat'];
    }

    /**
     * Sets buy_price_with_vat
     *
     * @param float|null $buy_price_with_vat buy_price_with_vat
     *
     * @return self
     */
    public function setBuyPriceWithVat($buy_price_with_vat)
    {
        $this->container['buy_price_with_vat'] = $buy_price_with_vat;

        return $this;
    }

    /**
     * Gets is_buy_vat
     *
     * @return bool|null
     */
    public function getIsBuyVat()
    {
        return $this->container['is_buy_vat'];
    }

    /**
     * Sets is_buy_vat
     *
     * @param bool|null $is_buy_vat is_buy_vat
     *
     * @return self
     */
    public function setIsBuyVat($is_buy_vat)
    {
        $this->container['is_buy_vat'] = $is_buy_vat;

        return $this;
    }

    /**
     * Gets allow_over_sold
     *
     * @return bool|null
     */
    public function getAllowOverSold()
    {
        return $this->container['allow_over_sold'];
    }

    /**
     * Sets allow_over_sold
     *
     * @param bool|null $allow_over_sold allow_over_sold
     *
     * @return self
     */
    public function setAllowOverSold($allow_over_sold)
    {
        $this->container['allow_over_sold'] = $allow_over_sold;

        return $this;
    }

    /**
     * Gets image
     *
     * @return string|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param string|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets is_delete
     *
     * @return bool|null
     */
    public function getIsDelete()
    {
        return $this->container['is_delete'];
    }

    /**
     * Sets is_delete
     *
     * @param bool|null $is_delete is_delete
     *
     * @return self
     */
    public function setIsDelete($is_delete)
    {
        $this->container['is_delete'] = $is_delete;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return int|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param int|null $vat_rate vat_rate
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets buy_vat_rate
     *
     * @return int|null
     */
    public function getBuyVatRate()
    {
        return $this->container['buy_vat_rate'];
    }

    /**
     * Sets buy_vat_rate
     *
     * @param int|null $buy_vat_rate buy_vat_rate
     *
     * @return self
     */
    public function setBuyVatRate($buy_vat_rate)
    {
        $this->container['buy_vat_rate'] = $buy_vat_rate;

        return $this;
    }

    /**
     * Gets reset_transaction_id
     *
     * @return int|null
     */
    public function getResetTransactionId()
    {
        return $this->container['reset_transaction_id'];
    }

    /**
     * Sets reset_transaction_id
     *
     * @param int|null $reset_transaction_id reset_transaction_id
     *
     * @return self
     */
    public function setResetTransactionId($reset_transaction_id)
    {
        $this->container['reset_transaction_id'] = $reset_transaction_id;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime|null $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime|null
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime|null $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets brought_forward_on
     *
     * @return \DateTime|null
     */
    public function getBroughtForwardOn()
    {
        return $this->container['brought_forward_on'];
    }

    /**
     * Sets brought_forward_on
     *
     * @param \DateTime|null $brought_forward_on brought_forward_on
     *
     * @return self
     */
    public function setBroughtForwardOn($brought_forward_on)
    {
        $this->container['brought_forward_on'] = $brought_forward_on;

        return $this;
    }

    /**
     * Gets buy_description
     *
     * @return string|null
     */
    public function getBuyDescription()
    {
        return $this->container['buy_description'];
    }

    /**
     * Sets buy_description
     *
     * @param string|null $buy_description buy_description
     *
     * @return self
     */
    public function setBuyDescription($buy_description)
    {
        $this->container['buy_description'] = $buy_description;

        return $this;
    }

    /**
     * Gets buy_chart_of_account_id
     *
     * @return int|null
     */
    public function getBuyChartOfAccountId()
    {
        return $this->container['buy_chart_of_account_id'];
    }

    /**
     * Sets buy_chart_of_account_id
     *
     * @param int|null $buy_chart_of_account_id buy_chart_of_account_id
     *
     * @return self
     */
    public function setBuyChartOfAccountId($buy_chart_of_account_id)
    {
        $this->container['buy_chart_of_account_id'] = $buy_chart_of_account_id;

        return $this;
    }

    /**
     * Gets sell_chart_of_account_id
     *
     * @return int|null
     */
    public function getSellChartOfAccountId()
    {
        return $this->container['sell_chart_of_account_id'];
    }

    /**
     * Sets sell_chart_of_account_id
     *
     * @param int|null $sell_chart_of_account_id sell_chart_of_account_id
     *
     * @return self
     */
    public function setSellChartOfAccountId($sell_chart_of_account_id)
    {
        $this->container['sell_chart_of_account_id'] = $sell_chart_of_account_id;

        return $this;
    }

    /**
     * Gets product_non_inventory_type
     *
     * @return OneOfProductNonInventoryType|null
     */
    public function getProductNonInventoryType()
    {
        return $this->container['product_non_inventory_type'];
    }

    /**
     * Sets product_non_inventory_type
     *
     * @param OneOfProductNonInventoryType|null $product_non_inventory_type product_non_inventory_type
     *
     * @return self
     */
    public function setProductNonInventoryType($product_non_inventory_type)
    {
        $this->container['product_non_inventory_type'] = $product_non_inventory_type;

        return $this;
    }

    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id transaction_id
     *
     * @return self
     */
    public function setTransactionId($transaction_id)
    {
        if (!is_null($transaction_id) && (mb_strlen($transaction_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transaction_id when calling ProductList., must be smaller than or equal to 50.');
        }
        if (!is_null($transaction_id) && (mb_strlen($transaction_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $transaction_id when calling ProductList., must be bigger than or equal to 0.');
        }

        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets product_main_unit
     *
     * @return OneOfProductUnit|null
     */
    public function getProductMainUnit()
    {
        return $this->container['product_main_unit'];
    }

    /**
     * Sets product_main_unit
     *
     * @param OneOfProductUnit|null $product_main_unit product_main_unit
     *
     * @return self
     */
    public function setProductMainUnit($product_main_unit)
    {
        $this->container['product_main_unit'] = $product_main_unit;

        return $this;
    }

    /**
     * Gets product_sub_unit
     *
     * @return OneOfProductUnit|null
     */
    public function getProductSubUnit()
    {
        return $this->container['product_sub_unit'];
    }

    /**
     * Sets product_sub_unit
     *
     * @param OneOfProductUnit|null $product_sub_unit product_sub_unit
     *
     * @return self
     */
    public function setProductSubUnit($product_sub_unit)
    {
        $this->container['product_sub_unit'] = $product_sub_unit;

        return $this;
    }

    /**
     * Gets product_category
     *
     * @return OneOfProductCategory|null
     */
    public function getProductCategory()
    {
        return $this->container['product_category'];
    }

    /**
     * Sets product_category
     *
     * @param OneOfProductCategory|null $product_category product_category
     *
     * @return self
     */
    public function setProductCategory($product_category)
    {
        $this->container['product_category'] = $product_category;

        return $this;
    }

    /**
     * Gets is_migrate
     *
     * @return bool|null
     */
    public function getIsMigrate()
    {
        return $this->container['is_migrate'];
    }

    /**
     * Sets is_migrate
     *
     * @param bool|null $is_migrate is_migrate
     *
     * @return self
     */
    public function setIsMigrate($is_migrate)
    {
        $this->container['is_migrate'] = $is_migrate;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


