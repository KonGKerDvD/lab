<?php
/**
 * Gallery
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Gallery Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Gallery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Gallery';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'product_list' => '\OpenAPI\Client\Model\ProductList[]',
        'media' => '\OpenAPI\Client\Model\Media[]',
        'journal_entry' => '\OpenAPI\Client\Model\JournalEntry[]',
        'receivable_invoice' => '\OpenAPI\Client\Model\ReceivableInvoice[]',
        'supplier_invoice' => '\OpenAPI\Client\Model\SupplierInvoice[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'description' => null,
        'product_list' => null,
        'media' => null,
        'journal_entry' => null,
        'receivable_invoice' => null,
        'supplier_invoice' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'product_list' => 'productList',
        'media' => 'media',
        'journal_entry' => 'journalEntry',
        'receivable_invoice' => 'receivableInvoice',
        'supplier_invoice' => 'supplierInvoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'product_list' => 'setProductList',
        'media' => 'setMedia',
        'journal_entry' => 'setJournalEntry',
        'receivable_invoice' => 'setReceivableInvoice',
        'supplier_invoice' => 'setSupplierInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'product_list' => 'getProductList',
        'media' => 'getMedia',
        'journal_entry' => 'getJournalEntry',
        'receivable_invoice' => 'getReceivableInvoice',
        'supplier_invoice' => 'getSupplierInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['product_list'] = $data['product_list'] ?? null;
        $this->container['media'] = $data['media'] ?? null;
        $this->container['journal_entry'] = $data['journal_entry'] ?? null;
        $this->container['receivable_invoice'] = $data['receivable_invoice'] ?? null;
        $this->container['supplier_invoice'] = $data['supplier_invoice'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) > 255)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['description']) && (mb_strlen($this->container['description']) < 0)) {
            $invalidProperties[] = "invalid value for 'description', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (!is_null($description) && (mb_strlen($description) > 255)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Gallery., must be smaller than or equal to 255.');
        }
        if (!is_null($description) && (mb_strlen($description) < 0)) {
            throw new \InvalidArgumentException('invalid length for $description when calling Gallery., must be bigger than or equal to 0.');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets product_list
     *
     * @return \OpenAPI\Client\Model\ProductList[]|null
     */
    public function getProductList()
    {
        return $this->container['product_list'];
    }

    /**
     * Sets product_list
     *
     * @param \OpenAPI\Client\Model\ProductList[]|null $product_list product_list
     *
     * @return self
     */
    public function setProductList($product_list)
    {
        $this->container['product_list'] = $product_list;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \OpenAPI\Client\Model\Media[]|null
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \OpenAPI\Client\Model\Media[]|null $media media
     *
     * @return self
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets journal_entry
     *
     * @return \OpenAPI\Client\Model\JournalEntry[]|null
     */
    public function getJournalEntry()
    {
        return $this->container['journal_entry'];
    }

    /**
     * Sets journal_entry
     *
     * @param \OpenAPI\Client\Model\JournalEntry[]|null $journal_entry journal_entry
     *
     * @return self
     */
    public function setJournalEntry($journal_entry)
    {
        $this->container['journal_entry'] = $journal_entry;

        return $this;
    }

    /**
     * Gets receivable_invoice
     *
     * @return \OpenAPI\Client\Model\ReceivableInvoice[]|null
     */
    public function getReceivableInvoice()
    {
        return $this->container['receivable_invoice'];
    }

    /**
     * Sets receivable_invoice
     *
     * @param \OpenAPI\Client\Model\ReceivableInvoice[]|null $receivable_invoice receivable_invoice
     *
     * @return self
     */
    public function setReceivableInvoice($receivable_invoice)
    {
        $this->container['receivable_invoice'] = $receivable_invoice;

        return $this;
    }

    /**
     * Gets supplier_invoice
     *
     * @return \OpenAPI\Client\Model\SupplierInvoice[]|null
     */
    public function getSupplierInvoice()
    {
        return $this->container['supplier_invoice'];
    }

    /**
     * Sets supplier_invoice
     *
     * @param \OpenAPI\Client\Model\SupplierInvoice[]|null $supplier_invoice supplier_invoice
     *
     * @return self
     */
    public function setSupplierInvoice($supplier_invoice)
    {
        $this->container['supplier_invoice'] = $supplier_invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


