<?php
/**
 * ExpenseListAllOf
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ExpenseListAllOf Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ExpenseListAllOf implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ExpenseList_allOf';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'vendor_company_id' => 'int',
        'company_id' => 'int',
        'status' => '\OpenAPI\Client\Model\ExpenseStatus',
        'receipt_image' => 'string',
        'value' => 'float',
        'description' => 'string',
        'expense_category_id' => 'int',
        'document_serial' => 'string',
        'document_id' => 'string',
        'published_on' => '\DateTime',
        'expense_date' => '\DateTime',
        'document_date' => '\DateTime',
        'created_on' => '\DateTime',
        'created_by' => 'int',
        'modified_on' => '\DateTime',
        'published' => 'bool',
        'approved' => 'bool',
        'approved_by' => 'int',
        'remarks' => 'string',
        'is_tax' => 'bool',
        'is_delete' => 'bool',
        'tax_refundable' => 'bool',
        'gallery_id' => 'int',
        'reconciled' => 'bool',
        'nullable_contact_id' => 'int',
        'bank_account_number' => 'string',
        'is_vat_inclusive' => 'bool',
        'method_payment' => 'OneOfPaymentMethod',
        'vendor_name' => 'string',
        'address_local' => 'string',
        'address_local_line2' => 'string',
        'address_local_line3' => 'string',
        'company_tax_id' => 'string',
        'branch' => 'string',
        'vat_rate' => 'int',
        'tax' => 'float',
        'value_include_vat' => 'float',
        'vat_amount' => 'float',
        'document_serial_no_prefix' => 'int',
        'withholding' => 'int',
        'charge' => 'float',
        'date_payment' => '\DateTime',
        'check_number' => 'string',
        'check_bank_id' => 'string',
        'check_date_paid' => '\DateTime',
        'transfer_bank_id' => 'string',
        'collected' => 'float',
        'outstanding' => 'float',
        'payment_with_held' => 'float',
        'reset_transaction_id' => 'int',
        'bank_account_id' => 'int',
        'rule_compile_status' => '\OpenAPI\Client\Model\RuleCompileStatus',
        'remaining_collected' => 'float',
        'remaining_collected_type' => 'OneOfRemainingCollectedType',
        'company' => 'OneOfCompany',
        'vendor_company' => 'OneOfCompany',
        'expense_category' => 'OneOfExpenseCategory',
        'gallery' => 'OneOfGallery',
        'contact' => 'OneOfContact',
        'running_number_type' => 'int',
        'running_modified_on' => '\DateTime',
        'is_foreign_currency' => 'bool',
        'foreign_currency' => 'OneOfCurrency',
        'exchange_rate' => 'float',
        'foreign_value' => 'float',
        'exempt_amount' => 'float',
        'vatable_amount' => 'float',
        'total_after_discount' => 'float',
        'due_date' => '\DateTime',
        'sub_total' => 'float',
        'payroll_detail' => '\OpenAPI\Client\Model\PayrollDetail[]',
        'batch_tax_filing_id' => 'int',
        'batch_tax_filing' => 'OneOfBatchTaxFiling',
        'supplier_invoice_status' => 'OneOfSupplierInvoiceStatus',
        'sale_and_purchase_channel' => 'string',
        'petty_cash_name' => 'string',
        'petty_cash_id' => 'int',
        'cheque_id' => 'int',
        'credit_card_id' => 'int',
        'other_channel_id' => 'int',
        'cheque_cashing_date' => '\DateTime',
        'auto_create_withholding_tax' => 'bool',
        'withholding_tax_income_type' => 'OneOfIncomeType',
        'withholding_tax_income_description' => 'string',
        'withholding_tax_entity' => 'OneOfEntity',
        'exchange_ratio' => 'float',
        'is_manual_rate' => 'bool',
        'exchange_rate_date' => '\DateTime',
        'company_currency_id' => 'int',
        'foreign_inline_vat_value' => 'float',
        'foreign_inline_discount_value' => 'float',
        'foreign_vat_amount' => 'float',
        'foreign_deduction_amount' => 'float',
        'project_id' => 'int',
        'is_manual_vat' => 'bool',
        'external_document_id' => 'string',
        'batch_id' => 'string',
        'document_references' => '\OpenAPI\Client\Model\IDocumentReference[]',
        'referenced_to_me' => '\OpenAPI\Client\Model\IDocumentReference[]',
        'referenced_by_me' => '\OpenAPI\Client\Model\IDocumentReference[]',
        'status_int' => 'int',
        'partial_payment_method' => 'OneOfPartialPaymentMethod',
        'ref_document_status' => 'int',
        'ref_document_status_string' => 'string',
        'is_re_calculate' => 'bool',
        'inline_vat_value' => 'float',
        'inline_discount_value' => 'float',
        'is_migrate' => 'bool',
        'vat_value' => 'float',
        'deduction_amount' => 'float',
        'payment_deduction_type' => 'OneOfDeductionType',
        'document_deduction_type' => 'OneOfDeductionType',
        'is_inline_discount' => 'bool',
        'is_inline_vat' => 'bool',
        'contact_id' => 'int',
        'value_exclude_vat' => 'float',
        'rounding_adjustment' => 'float',
        'name' => 'string',
        'internal_notes' => 'string',
        'project_name' => 'string',
        'project_name_and_project_deatil' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'vendor_company_id' => 'int64',
        'company_id' => 'int64',
        'status' => null,
        'receipt_image' => null,
        'value' => 'decimal',
        'description' => null,
        'expense_category_id' => 'int64',
        'document_serial' => null,
        'document_id' => null,
        'published_on' => 'date-time',
        'expense_date' => 'date-time',
        'document_date' => 'date-time',
        'created_on' => 'date-time',
        'created_by' => 'int64',
        'modified_on' => 'date-time',
        'published' => null,
        'approved' => null,
        'approved_by' => 'int64',
        'remarks' => null,
        'is_tax' => null,
        'is_delete' => null,
        'tax_refundable' => null,
        'gallery_id' => 'int64',
        'reconciled' => null,
        'nullable_contact_id' => 'int64',
        'bank_account_number' => null,
        'is_vat_inclusive' => null,
        'method_payment' => null,
        'vendor_name' => null,
        'address_local' => null,
        'address_local_line2' => null,
        'address_local_line3' => null,
        'company_tax_id' => null,
        'branch' => null,
        'vat_rate' => 'int32',
        'tax' => 'decimal',
        'value_include_vat' => 'decimal',
        'vat_amount' => 'decimal',
        'document_serial_no_prefix' => 'int64',
        'withholding' => 'int32',
        'charge' => 'decimal',
        'date_payment' => 'date-time',
        'check_number' => null,
        'check_bank_id' => null,
        'check_date_paid' => 'date-time',
        'transfer_bank_id' => null,
        'collected' => 'decimal',
        'outstanding' => 'decimal',
        'payment_with_held' => 'decimal',
        'reset_transaction_id' => 'int64',
        'bank_account_id' => 'int64',
        'rule_compile_status' => null,
        'remaining_collected' => 'decimal',
        'remaining_collected_type' => null,
        'company' => null,
        'vendor_company' => null,
        'expense_category' => null,
        'gallery' => null,
        'contact' => null,
        'running_number_type' => 'int32',
        'running_modified_on' => 'date-time',
        'is_foreign_currency' => null,
        'foreign_currency' => null,
        'exchange_rate' => 'decimal',
        'foreign_value' => 'decimal',
        'exempt_amount' => 'decimal',
        'vatable_amount' => 'decimal',
        'total_after_discount' => 'decimal',
        'due_date' => 'date-time',
        'sub_total' => 'decimal',
        'payroll_detail' => null,
        'batch_tax_filing_id' => 'int64',
        'batch_tax_filing' => null,
        'supplier_invoice_status' => null,
        'sale_and_purchase_channel' => null,
        'petty_cash_name' => null,
        'petty_cash_id' => 'int64',
        'cheque_id' => 'int64',
        'credit_card_id' => 'int64',
        'other_channel_id' => 'int64',
        'cheque_cashing_date' => 'date-time',
        'auto_create_withholding_tax' => null,
        'withholding_tax_income_type' => null,
        'withholding_tax_income_description' => null,
        'withholding_tax_entity' => null,
        'exchange_ratio' => 'decimal',
        'is_manual_rate' => null,
        'exchange_rate_date' => 'date-time',
        'company_currency_id' => 'int64',
        'foreign_inline_vat_value' => 'decimal',
        'foreign_inline_discount_value' => 'decimal',
        'foreign_vat_amount' => 'decimal',
        'foreign_deduction_amount' => 'decimal',
        'project_id' => 'int64',
        'is_manual_vat' => null,
        'external_document_id' => null,
        'batch_id' => null,
        'document_references' => null,
        'referenced_to_me' => null,
        'referenced_by_me' => null,
        'status_int' => 'int32',
        'partial_payment_method' => null,
        'ref_document_status' => 'int32',
        'ref_document_status_string' => null,
        'is_re_calculate' => null,
        'inline_vat_value' => 'decimal',
        'inline_discount_value' => 'decimal',
        'is_migrate' => null,
        'vat_value' => 'decimal',
        'deduction_amount' => 'decimal',
        'payment_deduction_type' => null,
        'document_deduction_type' => null,
        'is_inline_discount' => null,
        'is_inline_vat' => null,
        'contact_id' => 'int64',
        'value_exclude_vat' => 'decimal',
        'rounding_adjustment' => 'decimal',
        'name' => null,
        'internal_notes' => null,
        'project_name' => null,
        'project_name_and_project_deatil' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'vendor_company_id' => 'vendorCompanyId',
        'company_id' => 'companyId',
        'status' => 'status',
        'receipt_image' => 'receiptImage',
        'value' => 'value',
        'description' => 'description',
        'expense_category_id' => 'expenseCategoryId',
        'document_serial' => 'documentSerial',
        'document_id' => 'documentId',
        'published_on' => 'publishedOn',
        'expense_date' => 'expenseDate',
        'document_date' => 'documentDate',
        'created_on' => 'createdOn',
        'created_by' => 'createdBy',
        'modified_on' => 'modifiedOn',
        'published' => 'published',
        'approved' => 'approved',
        'approved_by' => 'approvedBy',
        'remarks' => 'remarks',
        'is_tax' => 'isTax',
        'is_delete' => 'isDelete',
        'tax_refundable' => 'taxRefundable',
        'gallery_id' => 'galleryId',
        'reconciled' => 'reconciled',
        'nullable_contact_id' => 'nullableContactId',
        'bank_account_number' => 'bankAccountNumber',
        'is_vat_inclusive' => 'isVatInclusive',
        'method_payment' => 'methodPayment',
        'vendor_name' => 'vendorName',
        'address_local' => 'addressLocal',
        'address_local_line2' => 'addressLocalLine2',
        'address_local_line3' => 'addressLocalLine3',
        'company_tax_id' => 'companyTaxId',
        'branch' => 'branch',
        'vat_rate' => 'vatRate',
        'tax' => 'tax',
        'value_include_vat' => 'valueIncludeVat',
        'vat_amount' => 'vatAmount',
        'document_serial_no_prefix' => 'documentSerialNoPrefix',
        'withholding' => 'withholding',
        'charge' => 'charge',
        'date_payment' => 'datePayment',
        'check_number' => 'checkNumber',
        'check_bank_id' => 'checkBankId',
        'check_date_paid' => 'checkDatePaid',
        'transfer_bank_id' => 'transferBankId',
        'collected' => 'collected',
        'outstanding' => 'outstanding',
        'payment_with_held' => 'paymentWithHeld',
        'reset_transaction_id' => 'resetTransactionId',
        'bank_account_id' => 'bankAccountId',
        'rule_compile_status' => 'ruleCompileStatus',
        'remaining_collected' => 'remainingCollected',
        'remaining_collected_type' => 'remainingCollectedType',
        'company' => 'company',
        'vendor_company' => 'vendorCompany',
        'expense_category' => 'expenseCategory',
        'gallery' => 'gallery',
        'contact' => 'contact',
        'running_number_type' => 'runningNumberType',
        'running_modified_on' => 'runningModifiedOn',
        'is_foreign_currency' => 'isForeignCurrency',
        'foreign_currency' => 'foreignCurrency',
        'exchange_rate' => 'exchangeRate',
        'foreign_value' => 'foreignValue',
        'exempt_amount' => 'exemptAmount',
        'vatable_amount' => 'vatableAmount',
        'total_after_discount' => 'totalAfterDiscount',
        'due_date' => 'dueDate',
        'sub_total' => 'subTotal',
        'payroll_detail' => 'payrollDetail',
        'batch_tax_filing_id' => 'batchTaxFilingId',
        'batch_tax_filing' => 'batchTaxFiling',
        'supplier_invoice_status' => 'supplierInvoiceStatus',
        'sale_and_purchase_channel' => 'saleAndPurchaseChannel',
        'petty_cash_name' => 'pettyCashName',
        'petty_cash_id' => 'pettyCashId',
        'cheque_id' => 'chequeId',
        'credit_card_id' => 'creditCardId',
        'other_channel_id' => 'otherChannelId',
        'cheque_cashing_date' => 'chequeCashingDate',
        'auto_create_withholding_tax' => 'autoCreateWithholdingTax',
        'withholding_tax_income_type' => 'withholdingTaxIncomeType',
        'withholding_tax_income_description' => 'withholdingTaxIncomeDescription',
        'withholding_tax_entity' => 'withholdingTaxEntity',
        'exchange_ratio' => 'exchangeRatio',
        'is_manual_rate' => 'isManualRate',
        'exchange_rate_date' => 'exchangeRateDate',
        'company_currency_id' => 'companyCurrencyId',
        'foreign_inline_vat_value' => 'foreignInlineVatValue',
        'foreign_inline_discount_value' => 'foreignInlineDiscountValue',
        'foreign_vat_amount' => 'foreignVatAmount',
        'foreign_deduction_amount' => 'foreignDeductionAmount',
        'project_id' => 'projectId',
        'is_manual_vat' => 'isManualVat',
        'external_document_id' => 'externalDocumentId',
        'batch_id' => 'batchId',
        'document_references' => 'documentReferences',
        'referenced_to_me' => 'referencedToMe',
        'referenced_by_me' => 'referencedByMe',
        'status_int' => 'statusInt',
        'partial_payment_method' => 'partialPaymentMethod',
        'ref_document_status' => 'refDocumentStatus',
        'ref_document_status_string' => 'refDocumentStatusString',
        'is_re_calculate' => 'isReCalculate',
        'inline_vat_value' => 'inlineVatValue',
        'inline_discount_value' => 'inlineDiscountValue',
        'is_migrate' => 'isMigrate',
        'vat_value' => 'vatValue',
        'deduction_amount' => 'deductionAmount',
        'payment_deduction_type' => 'paymentDeductionType',
        'document_deduction_type' => 'documentDeductionType',
        'is_inline_discount' => 'isInlineDiscount',
        'is_inline_vat' => 'isInlineVat',
        'contact_id' => 'contactId',
        'value_exclude_vat' => 'valueExcludeVat',
        'rounding_adjustment' => 'roundingAdjustment',
        'name' => 'name',
        'internal_notes' => 'internalNotes',
        'project_name' => 'projectName',
        'project_name_and_project_deatil' => 'projectNameAndProjectDeatil'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'vendor_company_id' => 'setVendorCompanyId',
        'company_id' => 'setCompanyId',
        'status' => 'setStatus',
        'receipt_image' => 'setReceiptImage',
        'value' => 'setValue',
        'description' => 'setDescription',
        'expense_category_id' => 'setExpenseCategoryId',
        'document_serial' => 'setDocumentSerial',
        'document_id' => 'setDocumentId',
        'published_on' => 'setPublishedOn',
        'expense_date' => 'setExpenseDate',
        'document_date' => 'setDocumentDate',
        'created_on' => 'setCreatedOn',
        'created_by' => 'setCreatedBy',
        'modified_on' => 'setModifiedOn',
        'published' => 'setPublished',
        'approved' => 'setApproved',
        'approved_by' => 'setApprovedBy',
        'remarks' => 'setRemarks',
        'is_tax' => 'setIsTax',
        'is_delete' => 'setIsDelete',
        'tax_refundable' => 'setTaxRefundable',
        'gallery_id' => 'setGalleryId',
        'reconciled' => 'setReconciled',
        'nullable_contact_id' => 'setNullableContactId',
        'bank_account_number' => 'setBankAccountNumber',
        'is_vat_inclusive' => 'setIsVatInclusive',
        'method_payment' => 'setMethodPayment',
        'vendor_name' => 'setVendorName',
        'address_local' => 'setAddressLocal',
        'address_local_line2' => 'setAddressLocalLine2',
        'address_local_line3' => 'setAddressLocalLine3',
        'company_tax_id' => 'setCompanyTaxId',
        'branch' => 'setBranch',
        'vat_rate' => 'setVatRate',
        'tax' => 'setTax',
        'value_include_vat' => 'setValueIncludeVat',
        'vat_amount' => 'setVatAmount',
        'document_serial_no_prefix' => 'setDocumentSerialNoPrefix',
        'withholding' => 'setWithholding',
        'charge' => 'setCharge',
        'date_payment' => 'setDatePayment',
        'check_number' => 'setCheckNumber',
        'check_bank_id' => 'setCheckBankId',
        'check_date_paid' => 'setCheckDatePaid',
        'transfer_bank_id' => 'setTransferBankId',
        'collected' => 'setCollected',
        'outstanding' => 'setOutstanding',
        'payment_with_held' => 'setPaymentWithHeld',
        'reset_transaction_id' => 'setResetTransactionId',
        'bank_account_id' => 'setBankAccountId',
        'rule_compile_status' => 'setRuleCompileStatus',
        'remaining_collected' => 'setRemainingCollected',
        'remaining_collected_type' => 'setRemainingCollectedType',
        'company' => 'setCompany',
        'vendor_company' => 'setVendorCompany',
        'expense_category' => 'setExpenseCategory',
        'gallery' => 'setGallery',
        'contact' => 'setContact',
        'running_number_type' => 'setRunningNumberType',
        'running_modified_on' => 'setRunningModifiedOn',
        'is_foreign_currency' => 'setIsForeignCurrency',
        'foreign_currency' => 'setForeignCurrency',
        'exchange_rate' => 'setExchangeRate',
        'foreign_value' => 'setForeignValue',
        'exempt_amount' => 'setExemptAmount',
        'vatable_amount' => 'setVatableAmount',
        'total_after_discount' => 'setTotalAfterDiscount',
        'due_date' => 'setDueDate',
        'sub_total' => 'setSubTotal',
        'payroll_detail' => 'setPayrollDetail',
        'batch_tax_filing_id' => 'setBatchTaxFilingId',
        'batch_tax_filing' => 'setBatchTaxFiling',
        'supplier_invoice_status' => 'setSupplierInvoiceStatus',
        'sale_and_purchase_channel' => 'setSaleAndPurchaseChannel',
        'petty_cash_name' => 'setPettyCashName',
        'petty_cash_id' => 'setPettyCashId',
        'cheque_id' => 'setChequeId',
        'credit_card_id' => 'setCreditCardId',
        'other_channel_id' => 'setOtherChannelId',
        'cheque_cashing_date' => 'setChequeCashingDate',
        'auto_create_withholding_tax' => 'setAutoCreateWithholdingTax',
        'withholding_tax_income_type' => 'setWithholdingTaxIncomeType',
        'withholding_tax_income_description' => 'setWithholdingTaxIncomeDescription',
        'withholding_tax_entity' => 'setWithholdingTaxEntity',
        'exchange_ratio' => 'setExchangeRatio',
        'is_manual_rate' => 'setIsManualRate',
        'exchange_rate_date' => 'setExchangeRateDate',
        'company_currency_id' => 'setCompanyCurrencyId',
        'foreign_inline_vat_value' => 'setForeignInlineVatValue',
        'foreign_inline_discount_value' => 'setForeignInlineDiscountValue',
        'foreign_vat_amount' => 'setForeignVatAmount',
        'foreign_deduction_amount' => 'setForeignDeductionAmount',
        'project_id' => 'setProjectId',
        'is_manual_vat' => 'setIsManualVat',
        'external_document_id' => 'setExternalDocumentId',
        'batch_id' => 'setBatchId',
        'document_references' => 'setDocumentReferences',
        'referenced_to_me' => 'setReferencedToMe',
        'referenced_by_me' => 'setReferencedByMe',
        'status_int' => 'setStatusInt',
        'partial_payment_method' => 'setPartialPaymentMethod',
        'ref_document_status' => 'setRefDocumentStatus',
        'ref_document_status_string' => 'setRefDocumentStatusString',
        'is_re_calculate' => 'setIsReCalculate',
        'inline_vat_value' => 'setInlineVatValue',
        'inline_discount_value' => 'setInlineDiscountValue',
        'is_migrate' => 'setIsMigrate',
        'vat_value' => 'setVatValue',
        'deduction_amount' => 'setDeductionAmount',
        'payment_deduction_type' => 'setPaymentDeductionType',
        'document_deduction_type' => 'setDocumentDeductionType',
        'is_inline_discount' => 'setIsInlineDiscount',
        'is_inline_vat' => 'setIsInlineVat',
        'contact_id' => 'setContactId',
        'value_exclude_vat' => 'setValueExcludeVat',
        'rounding_adjustment' => 'setRoundingAdjustment',
        'name' => 'setName',
        'internal_notes' => 'setInternalNotes',
        'project_name' => 'setProjectName',
        'project_name_and_project_deatil' => 'setProjectNameAndProjectDeatil'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'vendor_company_id' => 'getVendorCompanyId',
        'company_id' => 'getCompanyId',
        'status' => 'getStatus',
        'receipt_image' => 'getReceiptImage',
        'value' => 'getValue',
        'description' => 'getDescription',
        'expense_category_id' => 'getExpenseCategoryId',
        'document_serial' => 'getDocumentSerial',
        'document_id' => 'getDocumentId',
        'published_on' => 'getPublishedOn',
        'expense_date' => 'getExpenseDate',
        'document_date' => 'getDocumentDate',
        'created_on' => 'getCreatedOn',
        'created_by' => 'getCreatedBy',
        'modified_on' => 'getModifiedOn',
        'published' => 'getPublished',
        'approved' => 'getApproved',
        'approved_by' => 'getApprovedBy',
        'remarks' => 'getRemarks',
        'is_tax' => 'getIsTax',
        'is_delete' => 'getIsDelete',
        'tax_refundable' => 'getTaxRefundable',
        'gallery_id' => 'getGalleryId',
        'reconciled' => 'getReconciled',
        'nullable_contact_id' => 'getNullableContactId',
        'bank_account_number' => 'getBankAccountNumber',
        'is_vat_inclusive' => 'getIsVatInclusive',
        'method_payment' => 'getMethodPayment',
        'vendor_name' => 'getVendorName',
        'address_local' => 'getAddressLocal',
        'address_local_line2' => 'getAddressLocalLine2',
        'address_local_line3' => 'getAddressLocalLine3',
        'company_tax_id' => 'getCompanyTaxId',
        'branch' => 'getBranch',
        'vat_rate' => 'getVatRate',
        'tax' => 'getTax',
        'value_include_vat' => 'getValueIncludeVat',
        'vat_amount' => 'getVatAmount',
        'document_serial_no_prefix' => 'getDocumentSerialNoPrefix',
        'withholding' => 'getWithholding',
        'charge' => 'getCharge',
        'date_payment' => 'getDatePayment',
        'check_number' => 'getCheckNumber',
        'check_bank_id' => 'getCheckBankId',
        'check_date_paid' => 'getCheckDatePaid',
        'transfer_bank_id' => 'getTransferBankId',
        'collected' => 'getCollected',
        'outstanding' => 'getOutstanding',
        'payment_with_held' => 'getPaymentWithHeld',
        'reset_transaction_id' => 'getResetTransactionId',
        'bank_account_id' => 'getBankAccountId',
        'rule_compile_status' => 'getRuleCompileStatus',
        'remaining_collected' => 'getRemainingCollected',
        'remaining_collected_type' => 'getRemainingCollectedType',
        'company' => 'getCompany',
        'vendor_company' => 'getVendorCompany',
        'expense_category' => 'getExpenseCategory',
        'gallery' => 'getGallery',
        'contact' => 'getContact',
        'running_number_type' => 'getRunningNumberType',
        'running_modified_on' => 'getRunningModifiedOn',
        'is_foreign_currency' => 'getIsForeignCurrency',
        'foreign_currency' => 'getForeignCurrency',
        'exchange_rate' => 'getExchangeRate',
        'foreign_value' => 'getForeignValue',
        'exempt_amount' => 'getExemptAmount',
        'vatable_amount' => 'getVatableAmount',
        'total_after_discount' => 'getTotalAfterDiscount',
        'due_date' => 'getDueDate',
        'sub_total' => 'getSubTotal',
        'payroll_detail' => 'getPayrollDetail',
        'batch_tax_filing_id' => 'getBatchTaxFilingId',
        'batch_tax_filing' => 'getBatchTaxFiling',
        'supplier_invoice_status' => 'getSupplierInvoiceStatus',
        'sale_and_purchase_channel' => 'getSaleAndPurchaseChannel',
        'petty_cash_name' => 'getPettyCashName',
        'petty_cash_id' => 'getPettyCashId',
        'cheque_id' => 'getChequeId',
        'credit_card_id' => 'getCreditCardId',
        'other_channel_id' => 'getOtherChannelId',
        'cheque_cashing_date' => 'getChequeCashingDate',
        'auto_create_withholding_tax' => 'getAutoCreateWithholdingTax',
        'withholding_tax_income_type' => 'getWithholdingTaxIncomeType',
        'withholding_tax_income_description' => 'getWithholdingTaxIncomeDescription',
        'withholding_tax_entity' => 'getWithholdingTaxEntity',
        'exchange_ratio' => 'getExchangeRatio',
        'is_manual_rate' => 'getIsManualRate',
        'exchange_rate_date' => 'getExchangeRateDate',
        'company_currency_id' => 'getCompanyCurrencyId',
        'foreign_inline_vat_value' => 'getForeignInlineVatValue',
        'foreign_inline_discount_value' => 'getForeignInlineDiscountValue',
        'foreign_vat_amount' => 'getForeignVatAmount',
        'foreign_deduction_amount' => 'getForeignDeductionAmount',
        'project_id' => 'getProjectId',
        'is_manual_vat' => 'getIsManualVat',
        'external_document_id' => 'getExternalDocumentId',
        'batch_id' => 'getBatchId',
        'document_references' => 'getDocumentReferences',
        'referenced_to_me' => 'getReferencedToMe',
        'referenced_by_me' => 'getReferencedByMe',
        'status_int' => 'getStatusInt',
        'partial_payment_method' => 'getPartialPaymentMethod',
        'ref_document_status' => 'getRefDocumentStatus',
        'ref_document_status_string' => 'getRefDocumentStatusString',
        'is_re_calculate' => 'getIsReCalculate',
        'inline_vat_value' => 'getInlineVatValue',
        'inline_discount_value' => 'getInlineDiscountValue',
        'is_migrate' => 'getIsMigrate',
        'vat_value' => 'getVatValue',
        'deduction_amount' => 'getDeductionAmount',
        'payment_deduction_type' => 'getPaymentDeductionType',
        'document_deduction_type' => 'getDocumentDeductionType',
        'is_inline_discount' => 'getIsInlineDiscount',
        'is_inline_vat' => 'getIsInlineVat',
        'contact_id' => 'getContactId',
        'value_exclude_vat' => 'getValueExcludeVat',
        'rounding_adjustment' => 'getRoundingAdjustment',
        'name' => 'getName',
        'internal_notes' => 'getInternalNotes',
        'project_name' => 'getProjectName',
        'project_name_and_project_deatil' => 'getProjectNameAndProjectDeatil'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['vendor_company_id'] = $data['vendor_company_id'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['receipt_image'] = $data['receipt_image'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['expense_category_id'] = $data['expense_category_id'] ?? null;
        $this->container['document_serial'] = $data['document_serial'] ?? null;
        $this->container['document_id'] = $data['document_id'] ?? null;
        $this->container['published_on'] = $data['published_on'] ?? null;
        $this->container['expense_date'] = $data['expense_date'] ?? null;
        $this->container['document_date'] = $data['document_date'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['published'] = $data['published'] ?? null;
        $this->container['approved'] = $data['approved'] ?? null;
        $this->container['approved_by'] = $data['approved_by'] ?? null;
        $this->container['remarks'] = $data['remarks'] ?? null;
        $this->container['is_tax'] = $data['is_tax'] ?? null;
        $this->container['is_delete'] = $data['is_delete'] ?? null;
        $this->container['tax_refundable'] = $data['tax_refundable'] ?? null;
        $this->container['gallery_id'] = $data['gallery_id'] ?? null;
        $this->container['reconciled'] = $data['reconciled'] ?? null;
        $this->container['nullable_contact_id'] = $data['nullable_contact_id'] ?? null;
        $this->container['bank_account_number'] = $data['bank_account_number'] ?? null;
        $this->container['is_vat_inclusive'] = $data['is_vat_inclusive'] ?? null;
        $this->container['method_payment'] = $data['method_payment'] ?? null;
        $this->container['vendor_name'] = $data['vendor_name'] ?? null;
        $this->container['address_local'] = $data['address_local'] ?? null;
        $this->container['address_local_line2'] = $data['address_local_line2'] ?? null;
        $this->container['address_local_line3'] = $data['address_local_line3'] ?? null;
        $this->container['company_tax_id'] = $data['company_tax_id'] ?? null;
        $this->container['branch'] = $data['branch'] ?? null;
        $this->container['vat_rate'] = $data['vat_rate'] ?? null;
        $this->container['tax'] = $data['tax'] ?? null;
        $this->container['value_include_vat'] = $data['value_include_vat'] ?? null;
        $this->container['vat_amount'] = $data['vat_amount'] ?? null;
        $this->container['document_serial_no_prefix'] = $data['document_serial_no_prefix'] ?? null;
        $this->container['withholding'] = $data['withholding'] ?? null;
        $this->container['charge'] = $data['charge'] ?? null;
        $this->container['date_payment'] = $data['date_payment'] ?? null;
        $this->container['check_number'] = $data['check_number'] ?? null;
        $this->container['check_bank_id'] = $data['check_bank_id'] ?? null;
        $this->container['check_date_paid'] = $data['check_date_paid'] ?? null;
        $this->container['transfer_bank_id'] = $data['transfer_bank_id'] ?? null;
        $this->container['collected'] = $data['collected'] ?? 0;
        $this->container['outstanding'] = $data['outstanding'] ?? 0;
        $this->container['payment_with_held'] = $data['payment_with_held'] ?? 0;
        $this->container['reset_transaction_id'] = $data['reset_transaction_id'] ?? null;
        $this->container['bank_account_id'] = $data['bank_account_id'] ?? null;
        $this->container['rule_compile_status'] = $data['rule_compile_status'] ?? null;
        $this->container['remaining_collected'] = $data['remaining_collected'] ?? null;
        $this->container['remaining_collected_type'] = $data['remaining_collected_type'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['vendor_company'] = $data['vendor_company'] ?? null;
        $this->container['expense_category'] = $data['expense_category'] ?? null;
        $this->container['gallery'] = $data['gallery'] ?? null;
        $this->container['contact'] = $data['contact'] ?? null;
        $this->container['running_number_type'] = $data['running_number_type'] ?? null;
        $this->container['running_modified_on'] = $data['running_modified_on'] ?? null;
        $this->container['is_foreign_currency'] = $data['is_foreign_currency'] ?? null;
        $this->container['foreign_currency'] = $data['foreign_currency'] ?? null;
        $this->container['exchange_rate'] = $data['exchange_rate'] ?? null;
        $this->container['foreign_value'] = $data['foreign_value'] ?? null;
        $this->container['exempt_amount'] = $data['exempt_amount'] ?? null;
        $this->container['vatable_amount'] = $data['vatable_amount'] ?? null;
        $this->container['total_after_discount'] = $data['total_after_discount'] ?? null;
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['sub_total'] = $data['sub_total'] ?? null;
        $this->container['payroll_detail'] = $data['payroll_detail'] ?? null;
        $this->container['batch_tax_filing_id'] = $data['batch_tax_filing_id'] ?? null;
        $this->container['batch_tax_filing'] = $data['batch_tax_filing'] ?? null;
        $this->container['supplier_invoice_status'] = $data['supplier_invoice_status'] ?? null;
        $this->container['sale_and_purchase_channel'] = $data['sale_and_purchase_channel'] ?? null;
        $this->container['petty_cash_name'] = $data['petty_cash_name'] ?? null;
        $this->container['petty_cash_id'] = $data['petty_cash_id'] ?? null;
        $this->container['cheque_id'] = $data['cheque_id'] ?? null;
        $this->container['credit_card_id'] = $data['credit_card_id'] ?? null;
        $this->container['other_channel_id'] = $data['other_channel_id'] ?? null;
        $this->container['cheque_cashing_date'] = $data['cheque_cashing_date'] ?? null;
        $this->container['auto_create_withholding_tax'] = $data['auto_create_withholding_tax'] ?? null;
        $this->container['withholding_tax_income_type'] = $data['withholding_tax_income_type'] ?? null;
        $this->container['withholding_tax_income_description'] = $data['withholding_tax_income_description'] ?? null;
        $this->container['withholding_tax_entity'] = $data['withholding_tax_entity'] ?? null;
        $this->container['exchange_ratio'] = $data['exchange_ratio'] ?? null;
        $this->container['is_manual_rate'] = $data['is_manual_rate'] ?? null;
        $this->container['exchange_rate_date'] = $data['exchange_rate_date'] ?? null;
        $this->container['company_currency_id'] = $data['company_currency_id'] ?? null;
        $this->container['foreign_inline_vat_value'] = $data['foreign_inline_vat_value'] ?? null;
        $this->container['foreign_inline_discount_value'] = $data['foreign_inline_discount_value'] ?? null;
        $this->container['foreign_vat_amount'] = $data['foreign_vat_amount'] ?? null;
        $this->container['foreign_deduction_amount'] = $data['foreign_deduction_amount'] ?? null;
        $this->container['project_id'] = $data['project_id'] ?? null;
        $this->container['is_manual_vat'] = $data['is_manual_vat'] ?? null;
        $this->container['external_document_id'] = $data['external_document_id'] ?? null;
        $this->container['batch_id'] = $data['batch_id'] ?? null;
        $this->container['document_references'] = $data['document_references'] ?? null;
        $this->container['referenced_to_me'] = $data['referenced_to_me'] ?? null;
        $this->container['referenced_by_me'] = $data['referenced_by_me'] ?? null;
        $this->container['status_int'] = $data['status_int'] ?? null;
        $this->container['partial_payment_method'] = $data['partial_payment_method'] ?? null;
        $this->container['ref_document_status'] = $data['ref_document_status'] ?? null;
        $this->container['ref_document_status_string'] = $data['ref_document_status_string'] ?? null;
        $this->container['is_re_calculate'] = $data['is_re_calculate'] ?? null;
        $this->container['inline_vat_value'] = $data['inline_vat_value'] ?? null;
        $this->container['inline_discount_value'] = $data['inline_discount_value'] ?? null;
        $this->container['is_migrate'] = $data['is_migrate'] ?? null;
        $this->container['vat_value'] = $data['vat_value'] ?? null;
        $this->container['deduction_amount'] = $data['deduction_amount'] ?? null;
        $this->container['payment_deduction_type'] = $data['payment_deduction_type'] ?? null;
        $this->container['document_deduction_type'] = $data['document_deduction_type'] ?? null;
        $this->container['is_inline_discount'] = $data['is_inline_discount'] ?? null;
        $this->container['is_inline_vat'] = $data['is_inline_vat'] ?? null;
        $this->container['contact_id'] = $data['contact_id'] ?? null;
        $this->container['value_exclude_vat'] = $data['value_exclude_vat'] ?? null;
        $this->container['rounding_adjustment'] = $data['rounding_adjustment'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['internal_notes'] = $data['internal_notes'] ?? null;
        $this->container['project_name'] = $data['project_name'] ?? null;
        $this->container['project_name_and_project_deatil'] = $data['project_name_and_project_deatil'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['bank_account_number']) && (mb_strlen($this->container['bank_account_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'bank_account_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['bank_account_number']) && (mb_strlen($this->container['bank_account_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'bank_account_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['check_number']) && (mb_strlen($this->container['check_number']) > 50)) {
            $invalidProperties[] = "invalid value for 'check_number', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['check_number']) && (mb_strlen($this->container['check_number']) < 0)) {
            $invalidProperties[] = "invalid value for 'check_number', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['check_bank_id']) && (mb_strlen($this->container['check_bank_id']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'check_bank_id', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['check_bank_id']) && (mb_strlen($this->container['check_bank_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'check_bank_id', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['transfer_bank_id']) && (mb_strlen($this->container['transfer_bank_id']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'transfer_bank_id', the character length must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['transfer_bank_id']) && (mb_strlen($this->container['transfer_bank_id']) < 0)) {
            $invalidProperties[] = "invalid value for 'transfer_bank_id', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['collected'] === null) {
            $invalidProperties[] = "'collected' can't be null";
        }
        if ($this->container['outstanding'] === null) {
            $invalidProperties[] = "'outstanding' can't be null";
        }
        if ($this->container['payment_with_held'] === null) {
            $invalidProperties[] = "'payment_with_held' can't be null";
        }
        if (!is_null($this->container['external_document_id']) && (mb_strlen($this->container['external_document_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'external_document_id', the character length must be smaller than or equal to 36.";
        }

        if (!is_null($this->container['batch_id']) && (mb_strlen($this->container['batch_id']) > 36)) {
            $invalidProperties[] = "invalid value for 'batch_id', the character length must be smaller than or equal to 36.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets vendor_company_id
     *
     * @return int|null
     */
    public function getVendorCompanyId()
    {
        return $this->container['vendor_company_id'];
    }

    /**
     * Sets vendor_company_id
     *
     * @param int|null $vendor_company_id vendor_company_id
     *
     * @return self
     */
    public function setVendorCompanyId($vendor_company_id)
    {
        $this->container['vendor_company_id'] = $vendor_company_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int|null $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ExpenseStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ExpenseStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets receipt_image
     *
     * @return string|null
     */
    public function getReceiptImage()
    {
        return $this->container['receipt_image'];
    }

    /**
     * Sets receipt_image
     *
     * @param string|null $receipt_image receipt_image
     *
     * @return self
     */
    public function setReceiptImage($receipt_image)
    {
        $this->container['receipt_image'] = $receipt_image;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets expense_category_id
     *
     * @return int|null
     */
    public function getExpenseCategoryId()
    {
        return $this->container['expense_category_id'];
    }

    /**
     * Sets expense_category_id
     *
     * @param int|null $expense_category_id expense_category_id
     *
     * @return self
     */
    public function setExpenseCategoryId($expense_category_id)
    {
        $this->container['expense_category_id'] = $expense_category_id;

        return $this;
    }

    /**
     * Gets document_serial
     *
     * @return string|null
     */
    public function getDocumentSerial()
    {
        return $this->container['document_serial'];
    }

    /**
     * Sets document_serial
     *
     * @param string|null $document_serial document_serial
     *
     * @return self
     */
    public function setDocumentSerial($document_serial)
    {
        $this->container['document_serial'] = $document_serial;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string|null
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string|null $document_id document_id
     *
     * @return self
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets published_on
     *
     * @return \DateTime|null
     */
    public function getPublishedOn()
    {
        return $this->container['published_on'];
    }

    /**
     * Sets published_on
     *
     * @param \DateTime|null $published_on published_on
     *
     * @return self
     */
    public function setPublishedOn($published_on)
    {
        $this->container['published_on'] = $published_on;

        return $this;
    }

    /**
     * Gets expense_date
     *
     * @return \DateTime|null
     */
    public function getExpenseDate()
    {
        return $this->container['expense_date'];
    }

    /**
     * Sets expense_date
     *
     * @param \DateTime|null $expense_date expense_date
     *
     * @return self
     */
    public function setExpenseDate($expense_date)
    {
        $this->container['expense_date'] = $expense_date;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime|null
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime|null $document_date document_date
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime|null $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime|null
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime|null $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets published
     *
     * @return bool|null
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool|null $published published
     *
     * @return self
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets approved
     *
     * @return bool|null
     */
    public function getApproved()
    {
        return $this->container['approved'];
    }

    /**
     * Sets approved
     *
     * @param bool|null $approved approved
     *
     * @return self
     */
    public function setApproved($approved)
    {
        $this->container['approved'] = $approved;

        return $this;
    }

    /**
     * Gets approved_by
     *
     * @return int|null
     */
    public function getApprovedBy()
    {
        return $this->container['approved_by'];
    }

    /**
     * Sets approved_by
     *
     * @param int|null $approved_by approved_by
     *
     * @return self
     */
    public function setApprovedBy($approved_by)
    {
        $this->container['approved_by'] = $approved_by;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets is_tax
     *
     * @return bool|null
     */
    public function getIsTax()
    {
        return $this->container['is_tax'];
    }

    /**
     * Sets is_tax
     *
     * @param bool|null $is_tax is_tax
     *
     * @return self
     */
    public function setIsTax($is_tax)
    {
        $this->container['is_tax'] = $is_tax;

        return $this;
    }

    /**
     * Gets is_delete
     *
     * @return bool|null
     */
    public function getIsDelete()
    {
        return $this->container['is_delete'];
    }

    /**
     * Sets is_delete
     *
     * @param bool|null $is_delete is_delete
     *
     * @return self
     */
    public function setIsDelete($is_delete)
    {
        $this->container['is_delete'] = $is_delete;

        return $this;
    }

    /**
     * Gets tax_refundable
     *
     * @return bool|null
     */
    public function getTaxRefundable()
    {
        return $this->container['tax_refundable'];
    }

    /**
     * Sets tax_refundable
     *
     * @param bool|null $tax_refundable tax_refundable
     *
     * @return self
     */
    public function setTaxRefundable($tax_refundable)
    {
        $this->container['tax_refundable'] = $tax_refundable;

        return $this;
    }

    /**
     * Gets gallery_id
     *
     * @return int|null
     */
    public function getGalleryId()
    {
        return $this->container['gallery_id'];
    }

    /**
     * Sets gallery_id
     *
     * @param int|null $gallery_id gallery_id
     *
     * @return self
     */
    public function setGalleryId($gallery_id)
    {
        $this->container['gallery_id'] = $gallery_id;

        return $this;
    }

    /**
     * Gets reconciled
     *
     * @return bool|null
     */
    public function getReconciled()
    {
        return $this->container['reconciled'];
    }

    /**
     * Sets reconciled
     *
     * @param bool|null $reconciled reconciled
     *
     * @return self
     */
    public function setReconciled($reconciled)
    {
        $this->container['reconciled'] = $reconciled;

        return $this;
    }

    /**
     * Gets nullable_contact_id
     *
     * @return int|null
     */
    public function getNullableContactId()
    {
        return $this->container['nullable_contact_id'];
    }

    /**
     * Sets nullable_contact_id
     *
     * @param int|null $nullable_contact_id nullable_contact_id
     *
     * @return self
     */
    public function setNullableContactId($nullable_contact_id)
    {
        $this->container['nullable_contact_id'] = $nullable_contact_id;

        return $this;
    }

    /**
     * Gets bank_account_number
     *
     * @return string|null
     */
    public function getBankAccountNumber()
    {
        return $this->container['bank_account_number'];
    }

    /**
     * Sets bank_account_number
     *
     * @param string|null $bank_account_number bank_account_number
     *
     * @return self
     */
    public function setBankAccountNumber($bank_account_number)
    {
        if (!is_null($bank_account_number) && (mb_strlen($bank_account_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_number when calling ExpenseListAllOf., must be smaller than or equal to 50.');
        }
        if (!is_null($bank_account_number) && (mb_strlen($bank_account_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $bank_account_number when calling ExpenseListAllOf., must be bigger than or equal to 0.');
        }

        $this->container['bank_account_number'] = $bank_account_number;

        return $this;
    }

    /**
     * Gets is_vat_inclusive
     *
     * @return bool|null
     */
    public function getIsVatInclusive()
    {
        return $this->container['is_vat_inclusive'];
    }

    /**
     * Sets is_vat_inclusive
     *
     * @param bool|null $is_vat_inclusive is_vat_inclusive
     *
     * @return self
     */
    public function setIsVatInclusive($is_vat_inclusive)
    {
        $this->container['is_vat_inclusive'] = $is_vat_inclusive;

        return $this;
    }

    /**
     * Gets method_payment
     *
     * @return OneOfPaymentMethod|null
     */
    public function getMethodPayment()
    {
        return $this->container['method_payment'];
    }

    /**
     * Sets method_payment
     *
     * @param OneOfPaymentMethod|null $method_payment method_payment
     *
     * @return self
     */
    public function setMethodPayment($method_payment)
    {
        $this->container['method_payment'] = $method_payment;

        return $this;
    }

    /**
     * Gets vendor_name
     *
     * @return string|null
     */
    public function getVendorName()
    {
        return $this->container['vendor_name'];
    }

    /**
     * Sets vendor_name
     *
     * @param string|null $vendor_name vendor_name
     *
     * @return self
     */
    public function setVendorName($vendor_name)
    {
        $this->container['vendor_name'] = $vendor_name;

        return $this;
    }

    /**
     * Gets address_local
     *
     * @return string|null
     */
    public function getAddressLocal()
    {
        return $this->container['address_local'];
    }

    /**
     * Sets address_local
     *
     * @param string|null $address_local address_local
     *
     * @return self
     */
    public function setAddressLocal($address_local)
    {
        $this->container['address_local'] = $address_local;

        return $this;
    }

    /**
     * Gets address_local_line2
     *
     * @return string|null
     */
    public function getAddressLocalLine2()
    {
        return $this->container['address_local_line2'];
    }

    /**
     * Sets address_local_line2
     *
     * @param string|null $address_local_line2 address_local_line2
     *
     * @return self
     */
    public function setAddressLocalLine2($address_local_line2)
    {
        $this->container['address_local_line2'] = $address_local_line2;

        return $this;
    }

    /**
     * Gets address_local_line3
     *
     * @return string|null
     */
    public function getAddressLocalLine3()
    {
        return $this->container['address_local_line3'];
    }

    /**
     * Sets address_local_line3
     *
     * @param string|null $address_local_line3 address_local_line3
     *
     * @return self
     */
    public function setAddressLocalLine3($address_local_line3)
    {
        $this->container['address_local_line3'] = $address_local_line3;

        return $this;
    }

    /**
     * Gets company_tax_id
     *
     * @return string|null
     */
    public function getCompanyTaxId()
    {
        return $this->container['company_tax_id'];
    }

    /**
     * Sets company_tax_id
     *
     * @param string|null $company_tax_id company_tax_id
     *
     * @return self
     */
    public function setCompanyTaxId($company_tax_id)
    {
        $this->container['company_tax_id'] = $company_tax_id;

        return $this;
    }

    /**
     * Gets branch
     *
     * @return string|null
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string|null $branch branch
     *
     * @return self
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets vat_rate
     *
     * @return int|null
     */
    public function getVatRate()
    {
        return $this->container['vat_rate'];
    }

    /**
     * Sets vat_rate
     *
     * @param int|null $vat_rate vat_rate
     *
     * @return self
     */
    public function setVatRate($vat_rate)
    {
        $this->container['vat_rate'] = $vat_rate;

        return $this;
    }

    /**
     * Gets tax
     *
     * @return float|null
     */
    public function getTax()
    {
        return $this->container['tax'];
    }

    /**
     * Sets tax
     *
     * @param float|null $tax tax
     *
     * @return self
     */
    public function setTax($tax)
    {
        $this->container['tax'] = $tax;

        return $this;
    }

    /**
     * Gets value_include_vat
     *
     * @return float|null
     */
    public function getValueIncludeVat()
    {
        return $this->container['value_include_vat'];
    }

    /**
     * Sets value_include_vat
     *
     * @param float|null $value_include_vat value_include_vat
     *
     * @return self
     */
    public function setValueIncludeVat($value_include_vat)
    {
        $this->container['value_include_vat'] = $value_include_vat;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return float|null
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param float|null $vat_amount vat_amount
     *
     * @return self
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets document_serial_no_prefix
     *
     * @return int|null
     */
    public function getDocumentSerialNoPrefix()
    {
        return $this->container['document_serial_no_prefix'];
    }

    /**
     * Sets document_serial_no_prefix
     *
     * @param int|null $document_serial_no_prefix document_serial_no_prefix
     *
     * @return self
     */
    public function setDocumentSerialNoPrefix($document_serial_no_prefix)
    {
        $this->container['document_serial_no_prefix'] = $document_serial_no_prefix;

        return $this;
    }

    /**
     * Gets withholding
     *
     * @return int|null
     */
    public function getWithholding()
    {
        return $this->container['withholding'];
    }

    /**
     * Sets withholding
     *
     * @param int|null $withholding withholding
     *
     * @return self
     */
    public function setWithholding($withholding)
    {
        $this->container['withholding'] = $withholding;

        return $this;
    }

    /**
     * Gets charge
     *
     * @return float|null
     */
    public function getCharge()
    {
        return $this->container['charge'];
    }

    /**
     * Sets charge
     *
     * @param float|null $charge charge
     *
     * @return self
     */
    public function setCharge($charge)
    {
        $this->container['charge'] = $charge;

        return $this;
    }

    /**
     * Gets date_payment
     *
     * @return \DateTime|null
     */
    public function getDatePayment()
    {
        return $this->container['date_payment'];
    }

    /**
     * Sets date_payment
     *
     * @param \DateTime|null $date_payment date_payment
     *
     * @return self
     */
    public function setDatePayment($date_payment)
    {
        $this->container['date_payment'] = $date_payment;

        return $this;
    }

    /**
     * Gets check_number
     *
     * @return string|null
     */
    public function getCheckNumber()
    {
        return $this->container['check_number'];
    }

    /**
     * Sets check_number
     *
     * @param string|null $check_number check_number
     *
     * @return self
     */
    public function setCheckNumber($check_number)
    {
        if (!is_null($check_number) && (mb_strlen($check_number) > 50)) {
            throw new \InvalidArgumentException('invalid length for $check_number when calling ExpenseListAllOf., must be smaller than or equal to 50.');
        }
        if (!is_null($check_number) && (mb_strlen($check_number) < 0)) {
            throw new \InvalidArgumentException('invalid length for $check_number when calling ExpenseListAllOf., must be bigger than or equal to 0.');
        }

        $this->container['check_number'] = $check_number;

        return $this;
    }

    /**
     * Gets check_bank_id
     *
     * @return string|null
     */
    public function getCheckBankId()
    {
        return $this->container['check_bank_id'];
    }

    /**
     * Sets check_bank_id
     *
     * @param string|null $check_bank_id check_bank_id
     *
     * @return self
     */
    public function setCheckBankId($check_bank_id)
    {
        if (!is_null($check_bank_id) && (mb_strlen($check_bank_id) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $check_bank_id when calling ExpenseListAllOf., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($check_bank_id) && (mb_strlen($check_bank_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $check_bank_id when calling ExpenseListAllOf., must be bigger than or equal to 0.');
        }

        $this->container['check_bank_id'] = $check_bank_id;

        return $this;
    }

    /**
     * Gets check_date_paid
     *
     * @return \DateTime|null
     */
    public function getCheckDatePaid()
    {
        return $this->container['check_date_paid'];
    }

    /**
     * Sets check_date_paid
     *
     * @param \DateTime|null $check_date_paid check_date_paid
     *
     * @return self
     */
    public function setCheckDatePaid($check_date_paid)
    {
        $this->container['check_date_paid'] = $check_date_paid;

        return $this;
    }

    /**
     * Gets transfer_bank_id
     *
     * @return string|null
     */
    public function getTransferBankId()
    {
        return $this->container['transfer_bank_id'];
    }

    /**
     * Sets transfer_bank_id
     *
     * @param string|null $transfer_bank_id transfer_bank_id
     *
     * @return self
     */
    public function setTransferBankId($transfer_bank_id)
    {
        if (!is_null($transfer_bank_id) && (mb_strlen($transfer_bank_id) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $transfer_bank_id when calling ExpenseListAllOf., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($transfer_bank_id) && (mb_strlen($transfer_bank_id) < 0)) {
            throw new \InvalidArgumentException('invalid length for $transfer_bank_id when calling ExpenseListAllOf., must be bigger than or equal to 0.');
        }

        $this->container['transfer_bank_id'] = $transfer_bank_id;

        return $this;
    }

    /**
     * Gets collected
     *
     * @return float
     */
    public function getCollected()
    {
        return $this->container['collected'];
    }

    /**
     * Sets collected
     *
     * @param float $collected collected
     *
     * @return self
     */
    public function setCollected($collected)
    {
        $this->container['collected'] = $collected;

        return $this;
    }

    /**
     * Gets outstanding
     *
     * @return float
     */
    public function getOutstanding()
    {
        return $this->container['outstanding'];
    }

    /**
     * Sets outstanding
     *
     * @param float $outstanding outstanding
     *
     * @return self
     */
    public function setOutstanding($outstanding)
    {
        $this->container['outstanding'] = $outstanding;

        return $this;
    }

    /**
     * Gets payment_with_held
     *
     * @return float
     */
    public function getPaymentWithHeld()
    {
        return $this->container['payment_with_held'];
    }

    /**
     * Sets payment_with_held
     *
     * @param float $payment_with_held payment_with_held
     *
     * @return self
     */
    public function setPaymentWithHeld($payment_with_held)
    {
        $this->container['payment_with_held'] = $payment_with_held;

        return $this;
    }

    /**
     * Gets reset_transaction_id
     *
     * @return int|null
     */
    public function getResetTransactionId()
    {
        return $this->container['reset_transaction_id'];
    }

    /**
     * Sets reset_transaction_id
     *
     * @param int|null $reset_transaction_id reset_transaction_id
     *
     * @return self
     */
    public function setResetTransactionId($reset_transaction_id)
    {
        $this->container['reset_transaction_id'] = $reset_transaction_id;

        return $this;
    }

    /**
     * Gets bank_account_id
     *
     * @return int|null
     */
    public function getBankAccountId()
    {
        return $this->container['bank_account_id'];
    }

    /**
     * Sets bank_account_id
     *
     * @param int|null $bank_account_id bank_account_id
     *
     * @return self
     */
    public function setBankAccountId($bank_account_id)
    {
        $this->container['bank_account_id'] = $bank_account_id;

        return $this;
    }

    /**
     * Gets rule_compile_status
     *
     * @return \OpenAPI\Client\Model\RuleCompileStatus|null
     */
    public function getRuleCompileStatus()
    {
        return $this->container['rule_compile_status'];
    }

    /**
     * Sets rule_compile_status
     *
     * @param \OpenAPI\Client\Model\RuleCompileStatus|null $rule_compile_status rule_compile_status
     *
     * @return self
     */
    public function setRuleCompileStatus($rule_compile_status)
    {
        $this->container['rule_compile_status'] = $rule_compile_status;

        return $this;
    }

    /**
     * Gets remaining_collected
     *
     * @return float|null
     */
    public function getRemainingCollected()
    {
        return $this->container['remaining_collected'];
    }

    /**
     * Sets remaining_collected
     *
     * @param float|null $remaining_collected remaining_collected
     *
     * @return self
     */
    public function setRemainingCollected($remaining_collected)
    {
        $this->container['remaining_collected'] = $remaining_collected;

        return $this;
    }

    /**
     * Gets remaining_collected_type
     *
     * @return OneOfRemainingCollectedType|null
     */
    public function getRemainingCollectedType()
    {
        return $this->container['remaining_collected_type'];
    }

    /**
     * Sets remaining_collected_type
     *
     * @param OneOfRemainingCollectedType|null $remaining_collected_type remaining_collected_type
     *
     * @return self
     */
    public function setRemainingCollectedType($remaining_collected_type)
    {
        $this->container['remaining_collected_type'] = $remaining_collected_type;

        return $this;
    }

    /**
     * Gets company
     *
     * @return OneOfCompany|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param OneOfCompany|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets vendor_company
     *
     * @return OneOfCompany|null
     */
    public function getVendorCompany()
    {
        return $this->container['vendor_company'];
    }

    /**
     * Sets vendor_company
     *
     * @param OneOfCompany|null $vendor_company vendor_company
     *
     * @return self
     */
    public function setVendorCompany($vendor_company)
    {
        $this->container['vendor_company'] = $vendor_company;

        return $this;
    }

    /**
     * Gets expense_category
     *
     * @return OneOfExpenseCategory|null
     */
    public function getExpenseCategory()
    {
        return $this->container['expense_category'];
    }

    /**
     * Sets expense_category
     *
     * @param OneOfExpenseCategory|null $expense_category expense_category
     *
     * @return self
     */
    public function setExpenseCategory($expense_category)
    {
        $this->container['expense_category'] = $expense_category;

        return $this;
    }

    /**
     * Gets gallery
     *
     * @return OneOfGallery|null
     */
    public function getGallery()
    {
        return $this->container['gallery'];
    }

    /**
     * Sets gallery
     *
     * @param OneOfGallery|null $gallery gallery
     *
     * @return self
     */
    public function setGallery($gallery)
    {
        $this->container['gallery'] = $gallery;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return OneOfContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param OneOfContact|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets running_number_type
     *
     * @return int|null
     */
    public function getRunningNumberType()
    {
        return $this->container['running_number_type'];
    }

    /**
     * Sets running_number_type
     *
     * @param int|null $running_number_type running_number_type
     *
     * @return self
     */
    public function setRunningNumberType($running_number_type)
    {
        $this->container['running_number_type'] = $running_number_type;

        return $this;
    }

    /**
     * Gets running_modified_on
     *
     * @return \DateTime|null
     */
    public function getRunningModifiedOn()
    {
        return $this->container['running_modified_on'];
    }

    /**
     * Sets running_modified_on
     *
     * @param \DateTime|null $running_modified_on running_modified_on
     *
     * @return self
     */
    public function setRunningModifiedOn($running_modified_on)
    {
        $this->container['running_modified_on'] = $running_modified_on;

        return $this;
    }

    /**
     * Gets is_foreign_currency
     *
     * @return bool|null
     */
    public function getIsForeignCurrency()
    {
        return $this->container['is_foreign_currency'];
    }

    /**
     * Sets is_foreign_currency
     *
     * @param bool|null $is_foreign_currency is_foreign_currency
     *
     * @return self
     */
    public function setIsForeignCurrency($is_foreign_currency)
    {
        $this->container['is_foreign_currency'] = $is_foreign_currency;

        return $this;
    }

    /**
     * Gets foreign_currency
     *
     * @return OneOfCurrency|null
     */
    public function getForeignCurrency()
    {
        return $this->container['foreign_currency'];
    }

    /**
     * Sets foreign_currency
     *
     * @param OneOfCurrency|null $foreign_currency foreign_currency
     *
     * @return self
     */
    public function setForeignCurrency($foreign_currency)
    {
        $this->container['foreign_currency'] = $foreign_currency;

        return $this;
    }

    /**
     * Gets exchange_rate
     *
     * @return float|null
     */
    public function getExchangeRate()
    {
        return $this->container['exchange_rate'];
    }

    /**
     * Sets exchange_rate
     *
     * @param float|null $exchange_rate exchange_rate
     *
     * @return self
     */
    public function setExchangeRate($exchange_rate)
    {
        $this->container['exchange_rate'] = $exchange_rate;

        return $this;
    }

    /**
     * Gets foreign_value
     *
     * @return float|null
     */
    public function getForeignValue()
    {
        return $this->container['foreign_value'];
    }

    /**
     * Sets foreign_value
     *
     * @param float|null $foreign_value foreign_value
     *
     * @return self
     */
    public function setForeignValue($foreign_value)
    {
        $this->container['foreign_value'] = $foreign_value;

        return $this;
    }

    /**
     * Gets exempt_amount
     *
     * @return float|null
     */
    public function getExemptAmount()
    {
        return $this->container['exempt_amount'];
    }

    /**
     * Sets exempt_amount
     *
     * @param float|null $exempt_amount exempt_amount
     *
     * @return self
     */
    public function setExemptAmount($exempt_amount)
    {
        $this->container['exempt_amount'] = $exempt_amount;

        return $this;
    }

    /**
     * Gets vatable_amount
     *
     * @return float|null
     */
    public function getVatableAmount()
    {
        return $this->container['vatable_amount'];
    }

    /**
     * Sets vatable_amount
     *
     * @param float|null $vatable_amount vatable_amount
     *
     * @return self
     */
    public function setVatableAmount($vatable_amount)
    {
        $this->container['vatable_amount'] = $vatable_amount;

        return $this;
    }

    /**
     * Gets total_after_discount
     *
     * @return float|null
     */
    public function getTotalAfterDiscount()
    {
        return $this->container['total_after_discount'];
    }

    /**
     * Sets total_after_discount
     *
     * @param float|null $total_after_discount total_after_discount
     *
     * @return self
     */
    public function setTotalAfterDiscount($total_after_discount)
    {
        $this->container['total_after_discount'] = $total_after_discount;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return float|null
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param float|null $sub_total sub_total
     *
     * @return self
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets payroll_detail
     *
     * @return \OpenAPI\Client\Model\PayrollDetail[]|null
     */
    public function getPayrollDetail()
    {
        return $this->container['payroll_detail'];
    }

    /**
     * Sets payroll_detail
     *
     * @param \OpenAPI\Client\Model\PayrollDetail[]|null $payroll_detail payroll_detail
     *
     * @return self
     */
    public function setPayrollDetail($payroll_detail)
    {
        $this->container['payroll_detail'] = $payroll_detail;

        return $this;
    }

    /**
     * Gets batch_tax_filing_id
     *
     * @return int|null
     */
    public function getBatchTaxFilingId()
    {
        return $this->container['batch_tax_filing_id'];
    }

    /**
     * Sets batch_tax_filing_id
     *
     * @param int|null $batch_tax_filing_id batch_tax_filing_id
     *
     * @return self
     */
    public function setBatchTaxFilingId($batch_tax_filing_id)
    {
        $this->container['batch_tax_filing_id'] = $batch_tax_filing_id;

        return $this;
    }

    /**
     * Gets batch_tax_filing
     *
     * @return OneOfBatchTaxFiling|null
     */
    public function getBatchTaxFiling()
    {
        return $this->container['batch_tax_filing'];
    }

    /**
     * Sets batch_tax_filing
     *
     * @param OneOfBatchTaxFiling|null $batch_tax_filing batch_tax_filing
     *
     * @return self
     */
    public function setBatchTaxFiling($batch_tax_filing)
    {
        $this->container['batch_tax_filing'] = $batch_tax_filing;

        return $this;
    }

    /**
     * Gets supplier_invoice_status
     *
     * @return OneOfSupplierInvoiceStatus|null
     */
    public function getSupplierInvoiceStatus()
    {
        return $this->container['supplier_invoice_status'];
    }

    /**
     * Sets supplier_invoice_status
     *
     * @param OneOfSupplierInvoiceStatus|null $supplier_invoice_status supplier_invoice_status
     *
     * @return self
     */
    public function setSupplierInvoiceStatus($supplier_invoice_status)
    {
        $this->container['supplier_invoice_status'] = $supplier_invoice_status;

        return $this;
    }

    /**
     * Gets sale_and_purchase_channel
     *
     * @return string|null
     */
    public function getSaleAndPurchaseChannel()
    {
        return $this->container['sale_and_purchase_channel'];
    }

    /**
     * Sets sale_and_purchase_channel
     *
     * @param string|null $sale_and_purchase_channel sale_and_purchase_channel
     *
     * @return self
     */
    public function setSaleAndPurchaseChannel($sale_and_purchase_channel)
    {
        $this->container['sale_and_purchase_channel'] = $sale_and_purchase_channel;

        return $this;
    }

    /**
     * Gets petty_cash_name
     *
     * @return string|null
     */
    public function getPettyCashName()
    {
        return $this->container['petty_cash_name'];
    }

    /**
     * Sets petty_cash_name
     *
     * @param string|null $petty_cash_name petty_cash_name
     *
     * @return self
     */
    public function setPettyCashName($petty_cash_name)
    {
        $this->container['petty_cash_name'] = $petty_cash_name;

        return $this;
    }

    /**
     * Gets petty_cash_id
     *
     * @return int|null
     */
    public function getPettyCashId()
    {
        return $this->container['petty_cash_id'];
    }

    /**
     * Sets petty_cash_id
     *
     * @param int|null $petty_cash_id petty_cash_id
     *
     * @return self
     */
    public function setPettyCashId($petty_cash_id)
    {
        $this->container['petty_cash_id'] = $petty_cash_id;

        return $this;
    }

    /**
     * Gets cheque_id
     *
     * @return int|null
     */
    public function getChequeId()
    {
        return $this->container['cheque_id'];
    }

    /**
     * Sets cheque_id
     *
     * @param int|null $cheque_id cheque_id
     *
     * @return self
     */
    public function setChequeId($cheque_id)
    {
        $this->container['cheque_id'] = $cheque_id;

        return $this;
    }

    /**
     * Gets credit_card_id
     *
     * @return int|null
     */
    public function getCreditCardId()
    {
        return $this->container['credit_card_id'];
    }

    /**
     * Sets credit_card_id
     *
     * @param int|null $credit_card_id credit_card_id
     *
     * @return self
     */
    public function setCreditCardId($credit_card_id)
    {
        $this->container['credit_card_id'] = $credit_card_id;

        return $this;
    }

    /**
     * Gets other_channel_id
     *
     * @return int|null
     */
    public function getOtherChannelId()
    {
        return $this->container['other_channel_id'];
    }

    /**
     * Sets other_channel_id
     *
     * @param int|null $other_channel_id other_channel_id
     *
     * @return self
     */
    public function setOtherChannelId($other_channel_id)
    {
        $this->container['other_channel_id'] = $other_channel_id;

        return $this;
    }

    /**
     * Gets cheque_cashing_date
     *
     * @return \DateTime|null
     */
    public function getChequeCashingDate()
    {
        return $this->container['cheque_cashing_date'];
    }

    /**
     * Sets cheque_cashing_date
     *
     * @param \DateTime|null $cheque_cashing_date cheque_cashing_date
     *
     * @return self
     */
    public function setChequeCashingDate($cheque_cashing_date)
    {
        $this->container['cheque_cashing_date'] = $cheque_cashing_date;

        return $this;
    }

    /**
     * Gets auto_create_withholding_tax
     *
     * @return bool|null
     */
    public function getAutoCreateWithholdingTax()
    {
        return $this->container['auto_create_withholding_tax'];
    }

    /**
     * Sets auto_create_withholding_tax
     *
     * @param bool|null $auto_create_withholding_tax auto_create_withholding_tax
     *
     * @return self
     */
    public function setAutoCreateWithholdingTax($auto_create_withholding_tax)
    {
        $this->container['auto_create_withholding_tax'] = $auto_create_withholding_tax;

        return $this;
    }

    /**
     * Gets withholding_tax_income_type
     *
     * @return OneOfIncomeType|null
     */
    public function getWithholdingTaxIncomeType()
    {
        return $this->container['withholding_tax_income_type'];
    }

    /**
     * Sets withholding_tax_income_type
     *
     * @param OneOfIncomeType|null $withholding_tax_income_type withholding_tax_income_type
     *
     * @return self
     */
    public function setWithholdingTaxIncomeType($withholding_tax_income_type)
    {
        $this->container['withholding_tax_income_type'] = $withholding_tax_income_type;

        return $this;
    }

    /**
     * Gets withholding_tax_income_description
     *
     * @return string|null
     */
    public function getWithholdingTaxIncomeDescription()
    {
        return $this->container['withholding_tax_income_description'];
    }

    /**
     * Sets withholding_tax_income_description
     *
     * @param string|null $withholding_tax_income_description withholding_tax_income_description
     *
     * @return self
     */
    public function setWithholdingTaxIncomeDescription($withholding_tax_income_description)
    {
        $this->container['withholding_tax_income_description'] = $withholding_tax_income_description;

        return $this;
    }

    /**
     * Gets withholding_tax_entity
     *
     * @return OneOfEntity|null
     */
    public function getWithholdingTaxEntity()
    {
        return $this->container['withholding_tax_entity'];
    }

    /**
     * Sets withholding_tax_entity
     *
     * @param OneOfEntity|null $withholding_tax_entity withholding_tax_entity
     *
     * @return self
     */
    public function setWithholdingTaxEntity($withholding_tax_entity)
    {
        $this->container['withholding_tax_entity'] = $withholding_tax_entity;

        return $this;
    }

    /**
     * Gets exchange_ratio
     *
     * @return float|null
     */
    public function getExchangeRatio()
    {
        return $this->container['exchange_ratio'];
    }

    /**
     * Sets exchange_ratio
     *
     * @param float|null $exchange_ratio exchange_ratio
     *
     * @return self
     */
    public function setExchangeRatio($exchange_ratio)
    {
        $this->container['exchange_ratio'] = $exchange_ratio;

        return $this;
    }

    /**
     * Gets is_manual_rate
     *
     * @return bool|null
     */
    public function getIsManualRate()
    {
        return $this->container['is_manual_rate'];
    }

    /**
     * Sets is_manual_rate
     *
     * @param bool|null $is_manual_rate is_manual_rate
     *
     * @return self
     */
    public function setIsManualRate($is_manual_rate)
    {
        $this->container['is_manual_rate'] = $is_manual_rate;

        return $this;
    }

    /**
     * Gets exchange_rate_date
     *
     * @return \DateTime|null
     */
    public function getExchangeRateDate()
    {
        return $this->container['exchange_rate_date'];
    }

    /**
     * Sets exchange_rate_date
     *
     * @param \DateTime|null $exchange_rate_date exchange_rate_date
     *
     * @return self
     */
    public function setExchangeRateDate($exchange_rate_date)
    {
        $this->container['exchange_rate_date'] = $exchange_rate_date;

        return $this;
    }

    /**
     * Gets company_currency_id
     *
     * @return int|null
     */
    public function getCompanyCurrencyId()
    {
        return $this->container['company_currency_id'];
    }

    /**
     * Sets company_currency_id
     *
     * @param int|null $company_currency_id company_currency_id
     *
     * @return self
     */
    public function setCompanyCurrencyId($company_currency_id)
    {
        $this->container['company_currency_id'] = $company_currency_id;

        return $this;
    }

    /**
     * Gets foreign_inline_vat_value
     *
     * @return float|null
     */
    public function getForeignInlineVatValue()
    {
        return $this->container['foreign_inline_vat_value'];
    }

    /**
     * Sets foreign_inline_vat_value
     *
     * @param float|null $foreign_inline_vat_value foreign_inline_vat_value
     *
     * @return self
     */
    public function setForeignInlineVatValue($foreign_inline_vat_value)
    {
        $this->container['foreign_inline_vat_value'] = $foreign_inline_vat_value;

        return $this;
    }

    /**
     * Gets foreign_inline_discount_value
     *
     * @return float|null
     */
    public function getForeignInlineDiscountValue()
    {
        return $this->container['foreign_inline_discount_value'];
    }

    /**
     * Sets foreign_inline_discount_value
     *
     * @param float|null $foreign_inline_discount_value foreign_inline_discount_value
     *
     * @return self
     */
    public function setForeignInlineDiscountValue($foreign_inline_discount_value)
    {
        $this->container['foreign_inline_discount_value'] = $foreign_inline_discount_value;

        return $this;
    }

    /**
     * Gets foreign_vat_amount
     *
     * @return float|null
     */
    public function getForeignVatAmount()
    {
        return $this->container['foreign_vat_amount'];
    }

    /**
     * Sets foreign_vat_amount
     *
     * @param float|null $foreign_vat_amount foreign_vat_amount
     *
     * @return self
     */
    public function setForeignVatAmount($foreign_vat_amount)
    {
        $this->container['foreign_vat_amount'] = $foreign_vat_amount;

        return $this;
    }

    /**
     * Gets foreign_deduction_amount
     *
     * @return float|null
     */
    public function getForeignDeductionAmount()
    {
        return $this->container['foreign_deduction_amount'];
    }

    /**
     * Sets foreign_deduction_amount
     *
     * @param float|null $foreign_deduction_amount foreign_deduction_amount
     *
     * @return self
     */
    public function setForeignDeductionAmount($foreign_deduction_amount)
    {
        $this->container['foreign_deduction_amount'] = $foreign_deduction_amount;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets is_manual_vat
     *
     * @return bool|null
     */
    public function getIsManualVat()
    {
        return $this->container['is_manual_vat'];
    }

    /**
     * Sets is_manual_vat
     *
     * @param bool|null $is_manual_vat is_manual_vat
     *
     * @return self
     */
    public function setIsManualVat($is_manual_vat)
    {
        $this->container['is_manual_vat'] = $is_manual_vat;

        return $this;
    }

    /**
     * Gets external_document_id
     *
     * @return string|null
     */
    public function getExternalDocumentId()
    {
        return $this->container['external_document_id'];
    }

    /**
     * Sets external_document_id
     *
     * @param string|null $external_document_id external_document_id
     *
     * @return self
     */
    public function setExternalDocumentId($external_document_id)
    {
        if (!is_null($external_document_id) && (mb_strlen($external_document_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $external_document_id when calling ExpenseListAllOf., must be smaller than or equal to 36.');
        }

        $this->container['external_document_id'] = $external_document_id;

        return $this;
    }

    /**
     * Gets batch_id
     *
     * @return string|null
     */
    public function getBatchId()
    {
        return $this->container['batch_id'];
    }

    /**
     * Sets batch_id
     *
     * @param string|null $batch_id batch_id
     *
     * @return self
     */
    public function setBatchId($batch_id)
    {
        if (!is_null($batch_id) && (mb_strlen($batch_id) > 36)) {
            throw new \InvalidArgumentException('invalid length for $batch_id when calling ExpenseListAllOf., must be smaller than or equal to 36.');
        }

        $this->container['batch_id'] = $batch_id;

        return $this;
    }

    /**
     * Gets document_references
     *
     * @return \OpenAPI\Client\Model\IDocumentReference[]|null
     */
    public function getDocumentReferences()
    {
        return $this->container['document_references'];
    }

    /**
     * Sets document_references
     *
     * @param \OpenAPI\Client\Model\IDocumentReference[]|null $document_references document_references
     *
     * @return self
     */
    public function setDocumentReferences($document_references)
    {
        $this->container['document_references'] = $document_references;

        return $this;
    }

    /**
     * Gets referenced_to_me
     *
     * @return \OpenAPI\Client\Model\IDocumentReference[]|null
     */
    public function getReferencedToMe()
    {
        return $this->container['referenced_to_me'];
    }

    /**
     * Sets referenced_to_me
     *
     * @param \OpenAPI\Client\Model\IDocumentReference[]|null $referenced_to_me referenced_to_me
     *
     * @return self
     */
    public function setReferencedToMe($referenced_to_me)
    {
        $this->container['referenced_to_me'] = $referenced_to_me;

        return $this;
    }

    /**
     * Gets referenced_by_me
     *
     * @return \OpenAPI\Client\Model\IDocumentReference[]|null
     */
    public function getReferencedByMe()
    {
        return $this->container['referenced_by_me'];
    }

    /**
     * Sets referenced_by_me
     *
     * @param \OpenAPI\Client\Model\IDocumentReference[]|null $referenced_by_me referenced_by_me
     *
     * @return self
     */
    public function setReferencedByMe($referenced_by_me)
    {
        $this->container['referenced_by_me'] = $referenced_by_me;

        return $this;
    }

    /**
     * Gets status_int
     *
     * @return int|null
     */
    public function getStatusInt()
    {
        return $this->container['status_int'];
    }

    /**
     * Sets status_int
     *
     * @param int|null $status_int status_int
     *
     * @return self
     */
    public function setStatusInt($status_int)
    {
        $this->container['status_int'] = $status_int;

        return $this;
    }

    /**
     * Gets partial_payment_method
     *
     * @return OneOfPartialPaymentMethod|null
     */
    public function getPartialPaymentMethod()
    {
        return $this->container['partial_payment_method'];
    }

    /**
     * Sets partial_payment_method
     *
     * @param OneOfPartialPaymentMethod|null $partial_payment_method partial_payment_method
     *
     * @return self
     */
    public function setPartialPaymentMethod($partial_payment_method)
    {
        $this->container['partial_payment_method'] = $partial_payment_method;

        return $this;
    }

    /**
     * Gets ref_document_status
     *
     * @return int|null
     */
    public function getRefDocumentStatus()
    {
        return $this->container['ref_document_status'];
    }

    /**
     * Sets ref_document_status
     *
     * @param int|null $ref_document_status ref_document_status
     *
     * @return self
     */
    public function setRefDocumentStatus($ref_document_status)
    {
        $this->container['ref_document_status'] = $ref_document_status;

        return $this;
    }

    /**
     * Gets ref_document_status_string
     *
     * @return string|null
     */
    public function getRefDocumentStatusString()
    {
        return $this->container['ref_document_status_string'];
    }

    /**
     * Sets ref_document_status_string
     *
     * @param string|null $ref_document_status_string ref_document_status_string
     *
     * @return self
     */
    public function setRefDocumentStatusString($ref_document_status_string)
    {
        $this->container['ref_document_status_string'] = $ref_document_status_string;

        return $this;
    }

    /**
     * Gets is_re_calculate
     *
     * @return bool|null
     */
    public function getIsReCalculate()
    {
        return $this->container['is_re_calculate'];
    }

    /**
     * Sets is_re_calculate
     *
     * @param bool|null $is_re_calculate is_re_calculate
     *
     * @return self
     */
    public function setIsReCalculate($is_re_calculate)
    {
        $this->container['is_re_calculate'] = $is_re_calculate;

        return $this;
    }

    /**
     * Gets inline_vat_value
     *
     * @return float|null
     */
    public function getInlineVatValue()
    {
        return $this->container['inline_vat_value'];
    }

    /**
     * Sets inline_vat_value
     *
     * @param float|null $inline_vat_value inline_vat_value
     *
     * @return self
     */
    public function setInlineVatValue($inline_vat_value)
    {
        $this->container['inline_vat_value'] = $inline_vat_value;

        return $this;
    }

    /**
     * Gets inline_discount_value
     *
     * @return float|null
     */
    public function getInlineDiscountValue()
    {
        return $this->container['inline_discount_value'];
    }

    /**
     * Sets inline_discount_value
     *
     * @param float|null $inline_discount_value inline_discount_value
     *
     * @return self
     */
    public function setInlineDiscountValue($inline_discount_value)
    {
        $this->container['inline_discount_value'] = $inline_discount_value;

        return $this;
    }

    /**
     * Gets is_migrate
     *
     * @return bool|null
     */
    public function getIsMigrate()
    {
        return $this->container['is_migrate'];
    }

    /**
     * Sets is_migrate
     *
     * @param bool|null $is_migrate is_migrate
     *
     * @return self
     */
    public function setIsMigrate($is_migrate)
    {
        $this->container['is_migrate'] = $is_migrate;

        return $this;
    }

    /**
     * Gets vat_value
     *
     * @return float|null
     */
    public function getVatValue()
    {
        return $this->container['vat_value'];
    }

    /**
     * Sets vat_value
     *
     * @param float|null $vat_value vat_value
     *
     * @return self
     */
    public function setVatValue($vat_value)
    {
        $this->container['vat_value'] = $vat_value;

        return $this;
    }

    /**
     * Gets deduction_amount
     *
     * @return float|null
     */
    public function getDeductionAmount()
    {
        return $this->container['deduction_amount'];
    }

    /**
     * Sets deduction_amount
     *
     * @param float|null $deduction_amount deduction_amount
     *
     * @return self
     */
    public function setDeductionAmount($deduction_amount)
    {
        $this->container['deduction_amount'] = $deduction_amount;

        return $this;
    }

    /**
     * Gets payment_deduction_type
     *
     * @return OneOfDeductionType|null
     */
    public function getPaymentDeductionType()
    {
        return $this->container['payment_deduction_type'];
    }

    /**
     * Sets payment_deduction_type
     *
     * @param OneOfDeductionType|null $payment_deduction_type payment_deduction_type
     *
     * @return self
     */
    public function setPaymentDeductionType($payment_deduction_type)
    {
        $this->container['payment_deduction_type'] = $payment_deduction_type;

        return $this;
    }

    /**
     * Gets document_deduction_type
     *
     * @return OneOfDeductionType|null
     */
    public function getDocumentDeductionType()
    {
        return $this->container['document_deduction_type'];
    }

    /**
     * Sets document_deduction_type
     *
     * @param OneOfDeductionType|null $document_deduction_type document_deduction_type
     *
     * @return self
     */
    public function setDocumentDeductionType($document_deduction_type)
    {
        $this->container['document_deduction_type'] = $document_deduction_type;

        return $this;
    }

    /**
     * Gets is_inline_discount
     *
     * @return bool|null
     */
    public function getIsInlineDiscount()
    {
        return $this->container['is_inline_discount'];
    }

    /**
     * Sets is_inline_discount
     *
     * @param bool|null $is_inline_discount is_inline_discount
     *
     * @return self
     */
    public function setIsInlineDiscount($is_inline_discount)
    {
        $this->container['is_inline_discount'] = $is_inline_discount;

        return $this;
    }

    /**
     * Gets is_inline_vat
     *
     * @return bool|null
     */
    public function getIsInlineVat()
    {
        return $this->container['is_inline_vat'];
    }

    /**
     * Sets is_inline_vat
     *
     * @param bool|null $is_inline_vat is_inline_vat
     *
     * @return self
     */
    public function setIsInlineVat($is_inline_vat)
    {
        $this->container['is_inline_vat'] = $is_inline_vat;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int|null
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int|null $contact_id contact_id
     *
     * @return self
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets value_exclude_vat
     *
     * @return float|null
     */
    public function getValueExcludeVat()
    {
        return $this->container['value_exclude_vat'];
    }

    /**
     * Sets value_exclude_vat
     *
     * @param float|null $value_exclude_vat value_exclude_vat
     *
     * @return self
     */
    public function setValueExcludeVat($value_exclude_vat)
    {
        $this->container['value_exclude_vat'] = $value_exclude_vat;

        return $this;
    }

    /**
     * Gets rounding_adjustment
     *
     * @return float|null
     */
    public function getRoundingAdjustment()
    {
        return $this->container['rounding_adjustment'];
    }

    /**
     * Sets rounding_adjustment
     *
     * @param float|null $rounding_adjustment rounding_adjustment
     *
     * @return self
     */
    public function setRoundingAdjustment($rounding_adjustment)
    {
        $this->container['rounding_adjustment'] = $rounding_adjustment;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets internal_notes
     *
     * @return string|null
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     *
     * @param string|null $internal_notes internal_notes
     *
     * @return self
     */
    public function setInternalNotes($internal_notes)
    {
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string|null $project_name project_name
     *
     * @return self
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets project_name_and_project_deatil
     *
     * @return string|null
     */
    public function getProjectNameAndProjectDeatil()
    {
        return $this->container['project_name_and_project_deatil'];
    }

    /**
     * Sets project_name_and_project_deatil
     *
     * @param string|null $project_name_and_project_deatil project_name_and_project_deatil
     *
     * @return self
     */
    public function setProjectNameAndProjectDeatil($project_name_and_project_deatil)
    {
        $this->container['project_name_and_project_deatil'] = $project_name_and_project_deatil;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


