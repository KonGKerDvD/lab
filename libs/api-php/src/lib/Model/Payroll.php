<?php
/**
 * Payroll
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Payroll Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Payroll implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Payroll';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'company_id' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'payment_cycle' => 'int',
        'status' => '\OpenAPI\Client\Model\PayrollStatus',
        'is_delete' => 'bool',
        'created_on' => '\DateTime',
        'modified_on' => '\DateTime',
        'created_by' => 'int',
        'modified_by' => 'int',
        'expense_id' => 'int',
        'gallery_id' => 'int',
        'remarks' => 'string',
        'total' => 'float',
        'bank_id' => 'int',
        'account_number' => 'string',
        'add_amount' => 'float',
        'deduct_amount' => 'float',
        'net_total' => 'float',
        'running_number_type' => 'int',
        'date_payment' => '\DateTime',
        'document_date' => '\DateTime',
        'total_payroll_cash' => 'float',
        'total_payroll_transfer' => 'float',
        'fee' => 'float',
        'payment_remarks' => 'string',
        'employer_account_number' => 'string',
        'employer_account_branch' => 'string',
        'bank_account_id' => 'int',
        'account_type' => 'OneOfBankAccountType',
        'reference_id' => 'string',
        'payroll_version' => 'int',
        'company' => 'OneOfCompany',
        'created_by_user' => 'OneOfUser',
        'modified_by_user' => 'OneOfUser',
        'payroll_detail' => '\OpenAPI\Client\Model\PayrollDetail[]',
        'gallery' => 'OneOfGallery',
        'is_migrate' => 'bool',
        'rule_compile_status' => '\OpenAPI\Client\Model\RuleCompileStatus',
        'is_partial_payments' => 'bool',
        'paid_period' => 'OneOfPaidPeriod',
        'social_security_percent' => 'float',
        'status_int' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'company_id' => 'int64',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'payment_cycle' => 'int32',
        'status' => null,
        'is_delete' => null,
        'created_on' => 'date-time',
        'modified_on' => 'date-time',
        'created_by' => 'int64',
        'modified_by' => 'int64',
        'expense_id' => 'int64',
        'gallery_id' => 'int64',
        'remarks' => null,
        'total' => 'decimal',
        'bank_id' => 'int32',
        'account_number' => null,
        'add_amount' => 'decimal',
        'deduct_amount' => 'decimal',
        'net_total' => 'decimal',
        'running_number_type' => 'int32',
        'date_payment' => 'date-time',
        'document_date' => 'date-time',
        'total_payroll_cash' => 'decimal',
        'total_payroll_transfer' => 'decimal',
        'fee' => 'decimal',
        'payment_remarks' => null,
        'employer_account_number' => null,
        'employer_account_branch' => null,
        'bank_account_id' => 'int64',
        'account_type' => null,
        'reference_id' => null,
        'payroll_version' => 'int32',
        'company' => null,
        'created_by_user' => null,
        'modified_by_user' => null,
        'payroll_detail' => null,
        'gallery' => null,
        'is_migrate' => null,
        'rule_compile_status' => null,
        'is_partial_payments' => null,
        'paid_period' => null,
        'social_security_percent' => 'decimal',
        'status_int' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'company_id' => 'companyId',
        'start_date' => 'startDate',
        'end_date' => 'endDate',
        'payment_cycle' => 'paymentCycle',
        'status' => 'status',
        'is_delete' => 'isDelete',
        'created_on' => 'createdOn',
        'modified_on' => 'modifiedOn',
        'created_by' => 'createdBy',
        'modified_by' => 'modifiedBy',
        'expense_id' => 'expenseId',
        'gallery_id' => 'galleryId',
        'remarks' => 'remarks',
        'total' => 'total',
        'bank_id' => 'bankId',
        'account_number' => 'accountNumber',
        'add_amount' => 'addAmount',
        'deduct_amount' => 'deductAmount',
        'net_total' => 'netTotal',
        'running_number_type' => 'runningNumberType',
        'date_payment' => 'datePayment',
        'document_date' => 'documentDate',
        'total_payroll_cash' => 'totalPayrollCash',
        'total_payroll_transfer' => 'totalPayrollTransfer',
        'fee' => 'fee',
        'payment_remarks' => 'paymentRemarks',
        'employer_account_number' => 'employerAccountNumber',
        'employer_account_branch' => 'employerAccountBranch',
        'bank_account_id' => 'bankAccountId',
        'account_type' => 'accountType',
        'reference_id' => 'referenceId',
        'payroll_version' => 'payrollVersion',
        'company' => 'company',
        'created_by_user' => 'createdByUser',
        'modified_by_user' => 'modifiedByUser',
        'payroll_detail' => 'payrollDetail',
        'gallery' => 'gallery',
        'is_migrate' => 'isMigrate',
        'rule_compile_status' => 'ruleCompileStatus',
        'is_partial_payments' => 'isPartialPayments',
        'paid_period' => 'paidPeriod',
        'social_security_percent' => 'socialSecurityPercent',
        'status_int' => 'statusInt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'payment_cycle' => 'setPaymentCycle',
        'status' => 'setStatus',
        'is_delete' => 'setIsDelete',
        'created_on' => 'setCreatedOn',
        'modified_on' => 'setModifiedOn',
        'created_by' => 'setCreatedBy',
        'modified_by' => 'setModifiedBy',
        'expense_id' => 'setExpenseId',
        'gallery_id' => 'setGalleryId',
        'remarks' => 'setRemarks',
        'total' => 'setTotal',
        'bank_id' => 'setBankId',
        'account_number' => 'setAccountNumber',
        'add_amount' => 'setAddAmount',
        'deduct_amount' => 'setDeductAmount',
        'net_total' => 'setNetTotal',
        'running_number_type' => 'setRunningNumberType',
        'date_payment' => 'setDatePayment',
        'document_date' => 'setDocumentDate',
        'total_payroll_cash' => 'setTotalPayrollCash',
        'total_payroll_transfer' => 'setTotalPayrollTransfer',
        'fee' => 'setFee',
        'payment_remarks' => 'setPaymentRemarks',
        'employer_account_number' => 'setEmployerAccountNumber',
        'employer_account_branch' => 'setEmployerAccountBranch',
        'bank_account_id' => 'setBankAccountId',
        'account_type' => 'setAccountType',
        'reference_id' => 'setReferenceId',
        'payroll_version' => 'setPayrollVersion',
        'company' => 'setCompany',
        'created_by_user' => 'setCreatedByUser',
        'modified_by_user' => 'setModifiedByUser',
        'payroll_detail' => 'setPayrollDetail',
        'gallery' => 'setGallery',
        'is_migrate' => 'setIsMigrate',
        'rule_compile_status' => 'setRuleCompileStatus',
        'is_partial_payments' => 'setIsPartialPayments',
        'paid_period' => 'setPaidPeriod',
        'social_security_percent' => 'setSocialSecurityPercent',
        'status_int' => 'setStatusInt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'payment_cycle' => 'getPaymentCycle',
        'status' => 'getStatus',
        'is_delete' => 'getIsDelete',
        'created_on' => 'getCreatedOn',
        'modified_on' => 'getModifiedOn',
        'created_by' => 'getCreatedBy',
        'modified_by' => 'getModifiedBy',
        'expense_id' => 'getExpenseId',
        'gallery_id' => 'getGalleryId',
        'remarks' => 'getRemarks',
        'total' => 'getTotal',
        'bank_id' => 'getBankId',
        'account_number' => 'getAccountNumber',
        'add_amount' => 'getAddAmount',
        'deduct_amount' => 'getDeductAmount',
        'net_total' => 'getNetTotal',
        'running_number_type' => 'getRunningNumberType',
        'date_payment' => 'getDatePayment',
        'document_date' => 'getDocumentDate',
        'total_payroll_cash' => 'getTotalPayrollCash',
        'total_payroll_transfer' => 'getTotalPayrollTransfer',
        'fee' => 'getFee',
        'payment_remarks' => 'getPaymentRemarks',
        'employer_account_number' => 'getEmployerAccountNumber',
        'employer_account_branch' => 'getEmployerAccountBranch',
        'bank_account_id' => 'getBankAccountId',
        'account_type' => 'getAccountType',
        'reference_id' => 'getReferenceId',
        'payroll_version' => 'getPayrollVersion',
        'company' => 'getCompany',
        'created_by_user' => 'getCreatedByUser',
        'modified_by_user' => 'getModifiedByUser',
        'payroll_detail' => 'getPayrollDetail',
        'gallery' => 'getGallery',
        'is_migrate' => 'getIsMigrate',
        'rule_compile_status' => 'getRuleCompileStatus',
        'is_partial_payments' => 'getIsPartialPayments',
        'paid_period' => 'getPaidPeriod',
        'social_security_percent' => 'getSocialSecurityPercent',
        'status_int' => 'getStatusInt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['payment_cycle'] = $data['payment_cycle'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['is_delete'] = $data['is_delete'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['modified_by'] = $data['modified_by'] ?? null;
        $this->container['expense_id'] = $data['expense_id'] ?? null;
        $this->container['gallery_id'] = $data['gallery_id'] ?? null;
        $this->container['remarks'] = $data['remarks'] ?? null;
        $this->container['total'] = $data['total'] ?? null;
        $this->container['bank_id'] = $data['bank_id'] ?? null;
        $this->container['account_number'] = $data['account_number'] ?? null;
        $this->container['add_amount'] = $data['add_amount'] ?? null;
        $this->container['deduct_amount'] = $data['deduct_amount'] ?? null;
        $this->container['net_total'] = $data['net_total'] ?? null;
        $this->container['running_number_type'] = $data['running_number_type'] ?? null;
        $this->container['date_payment'] = $data['date_payment'] ?? null;
        $this->container['document_date'] = $data['document_date'] ?? null;
        $this->container['total_payroll_cash'] = $data['total_payroll_cash'] ?? null;
        $this->container['total_payroll_transfer'] = $data['total_payroll_transfer'] ?? null;
        $this->container['fee'] = $data['fee'] ?? null;
        $this->container['payment_remarks'] = $data['payment_remarks'] ?? null;
        $this->container['employer_account_number'] = $data['employer_account_number'] ?? null;
        $this->container['employer_account_branch'] = $data['employer_account_branch'] ?? null;
        $this->container['bank_account_id'] = $data['bank_account_id'] ?? null;
        $this->container['account_type'] = $data['account_type'] ?? null;
        $this->container['reference_id'] = $data['reference_id'] ?? null;
        $this->container['payroll_version'] = $data['payroll_version'] ?? null;
        $this->container['company'] = $data['company'] ?? null;
        $this->container['created_by_user'] = $data['created_by_user'] ?? null;
        $this->container['modified_by_user'] = $data['modified_by_user'] ?? null;
        $this->container['payroll_detail'] = $data['payroll_detail'] ?? null;
        $this->container['gallery'] = $data['gallery'] ?? null;
        $this->container['is_migrate'] = $data['is_migrate'] ?? null;
        $this->container['rule_compile_status'] = $data['rule_compile_status'] ?? null;
        $this->container['is_partial_payments'] = $data['is_partial_payments'] ?? null;
        $this->container['paid_period'] = $data['paid_period'] ?? null;
        $this->container['social_security_percent'] = $data['social_security_percent'] ?? 5;
        $this->container['status_int'] = $data['status_int'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int|null $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date start_date
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime|null $end_date end_date
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets payment_cycle
     *
     * @return int|null
     */
    public function getPaymentCycle()
    {
        return $this->container['payment_cycle'];
    }

    /**
     * Sets payment_cycle
     *
     * @param int|null $payment_cycle payment_cycle
     *
     * @return self
     */
    public function setPaymentCycle($payment_cycle)
    {
        $this->container['payment_cycle'] = $payment_cycle;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\PayrollStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\PayrollStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_delete
     *
     * @return bool|null
     */
    public function getIsDelete()
    {
        return $this->container['is_delete'];
    }

    /**
     * Sets is_delete
     *
     * @param bool|null $is_delete is_delete
     *
     * @return self
     */
    public function setIsDelete($is_delete)
    {
        $this->container['is_delete'] = $is_delete;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime|null $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime|null
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime|null $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return int|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param int|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets modified_by
     *
     * @return int|null
     */
    public function getModifiedBy()
    {
        return $this->container['modified_by'];
    }

    /**
     * Sets modified_by
     *
     * @param int|null $modified_by modified_by
     *
     * @return self
     */
    public function setModifiedBy($modified_by)
    {
        $this->container['modified_by'] = $modified_by;

        return $this;
    }

    /**
     * Gets expense_id
     *
     * @return int|null
     */
    public function getExpenseId()
    {
        return $this->container['expense_id'];
    }

    /**
     * Sets expense_id
     *
     * @param int|null $expense_id expense_id
     *
     * @return self
     */
    public function setExpenseId($expense_id)
    {
        $this->container['expense_id'] = $expense_id;

        return $this;
    }

    /**
     * Gets gallery_id
     *
     * @return int|null
     */
    public function getGalleryId()
    {
        return $this->container['gallery_id'];
    }

    /**
     * Sets gallery_id
     *
     * @param int|null $gallery_id gallery_id
     *
     * @return self
     */
    public function setGalleryId($gallery_id)
    {
        $this->container['gallery_id'] = $gallery_id;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets total
     *
     * @return float|null
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param float|null $total total
     *
     * @return self
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets bank_id
     *
     * @return int|null
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     *
     * @param int|null $bank_id bank_id
     *
     * @return self
     */
    public function setBankId($bank_id)
    {
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string|null
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string|null $account_number account_number
     *
     * @return self
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets add_amount
     *
     * @return float|null
     */
    public function getAddAmount()
    {
        return $this->container['add_amount'];
    }

    /**
     * Sets add_amount
     *
     * @param float|null $add_amount add_amount
     *
     * @return self
     */
    public function setAddAmount($add_amount)
    {
        $this->container['add_amount'] = $add_amount;

        return $this;
    }

    /**
     * Gets deduct_amount
     *
     * @return float|null
     */
    public function getDeductAmount()
    {
        return $this->container['deduct_amount'];
    }

    /**
     * Sets deduct_amount
     *
     * @param float|null $deduct_amount deduct_amount
     *
     * @return self
     */
    public function setDeductAmount($deduct_amount)
    {
        $this->container['deduct_amount'] = $deduct_amount;

        return $this;
    }

    /**
     * Gets net_total
     *
     * @return float|null
     */
    public function getNetTotal()
    {
        return $this->container['net_total'];
    }

    /**
     * Sets net_total
     *
     * @param float|null $net_total net_total
     *
     * @return self
     */
    public function setNetTotal($net_total)
    {
        $this->container['net_total'] = $net_total;

        return $this;
    }

    /**
     * Gets running_number_type
     *
     * @return int|null
     */
    public function getRunningNumberType()
    {
        return $this->container['running_number_type'];
    }

    /**
     * Sets running_number_type
     *
     * @param int|null $running_number_type running_number_type
     *
     * @return self
     */
    public function setRunningNumberType($running_number_type)
    {
        $this->container['running_number_type'] = $running_number_type;

        return $this;
    }

    /**
     * Gets date_payment
     *
     * @return \DateTime|null
     */
    public function getDatePayment()
    {
        return $this->container['date_payment'];
    }

    /**
     * Sets date_payment
     *
     * @param \DateTime|null $date_payment date_payment
     *
     * @return self
     */
    public function setDatePayment($date_payment)
    {
        $this->container['date_payment'] = $date_payment;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime|null
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime|null $document_date document_date
     *
     * @return self
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets total_payroll_cash
     *
     * @return float|null
     */
    public function getTotalPayrollCash()
    {
        return $this->container['total_payroll_cash'];
    }

    /**
     * Sets total_payroll_cash
     *
     * @param float|null $total_payroll_cash total_payroll_cash
     *
     * @return self
     */
    public function setTotalPayrollCash($total_payroll_cash)
    {
        $this->container['total_payroll_cash'] = $total_payroll_cash;

        return $this;
    }

    /**
     * Gets total_payroll_transfer
     *
     * @return float|null
     */
    public function getTotalPayrollTransfer()
    {
        return $this->container['total_payroll_transfer'];
    }

    /**
     * Sets total_payroll_transfer
     *
     * @param float|null $total_payroll_transfer total_payroll_transfer
     *
     * @return self
     */
    public function setTotalPayrollTransfer($total_payroll_transfer)
    {
        $this->container['total_payroll_transfer'] = $total_payroll_transfer;

        return $this;
    }

    /**
     * Gets fee
     *
     * @return float|null
     */
    public function getFee()
    {
        return $this->container['fee'];
    }

    /**
     * Sets fee
     *
     * @param float|null $fee fee
     *
     * @return self
     */
    public function setFee($fee)
    {
        $this->container['fee'] = $fee;

        return $this;
    }

    /**
     * Gets payment_remarks
     *
     * @return string|null
     */
    public function getPaymentRemarks()
    {
        return $this->container['payment_remarks'];
    }

    /**
     * Sets payment_remarks
     *
     * @param string|null $payment_remarks payment_remarks
     *
     * @return self
     */
    public function setPaymentRemarks($payment_remarks)
    {
        $this->container['payment_remarks'] = $payment_remarks;

        return $this;
    }

    /**
     * Gets employer_account_number
     *
     * @return string|null
     */
    public function getEmployerAccountNumber()
    {
        return $this->container['employer_account_number'];
    }

    /**
     * Sets employer_account_number
     *
     * @param string|null $employer_account_number employer_account_number
     *
     * @return self
     */
    public function setEmployerAccountNumber($employer_account_number)
    {
        $this->container['employer_account_number'] = $employer_account_number;

        return $this;
    }

    /**
     * Gets employer_account_branch
     *
     * @return string|null
     */
    public function getEmployerAccountBranch()
    {
        return $this->container['employer_account_branch'];
    }

    /**
     * Sets employer_account_branch
     *
     * @param string|null $employer_account_branch employer_account_branch
     *
     * @return self
     */
    public function setEmployerAccountBranch($employer_account_branch)
    {
        $this->container['employer_account_branch'] = $employer_account_branch;

        return $this;
    }

    /**
     * Gets bank_account_id
     *
     * @return int|null
     */
    public function getBankAccountId()
    {
        return $this->container['bank_account_id'];
    }

    /**
     * Sets bank_account_id
     *
     * @param int|null $bank_account_id bank_account_id
     *
     * @return self
     */
    public function setBankAccountId($bank_account_id)
    {
        $this->container['bank_account_id'] = $bank_account_id;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return OneOfBankAccountType|null
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param OneOfBankAccountType|null $account_type account_type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return string|null
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param string|null $reference_id reference_id
     *
     * @return self
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets payroll_version
     *
     * @return int|null
     */
    public function getPayrollVersion()
    {
        return $this->container['payroll_version'];
    }

    /**
     * Sets payroll_version
     *
     * @param int|null $payroll_version payroll_version
     *
     * @return self
     */
    public function setPayrollVersion($payroll_version)
    {
        $this->container['payroll_version'] = $payroll_version;

        return $this;
    }

    /**
     * Gets company
     *
     * @return OneOfCompany|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param OneOfCompany|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return OneOfUser|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param OneOfUser|null $created_by_user created_by_user
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets modified_by_user
     *
     * @return OneOfUser|null
     */
    public function getModifiedByUser()
    {
        return $this->container['modified_by_user'];
    }

    /**
     * Sets modified_by_user
     *
     * @param OneOfUser|null $modified_by_user modified_by_user
     *
     * @return self
     */
    public function setModifiedByUser($modified_by_user)
    {
        $this->container['modified_by_user'] = $modified_by_user;

        return $this;
    }

    /**
     * Gets payroll_detail
     *
     * @return \OpenAPI\Client\Model\PayrollDetail[]|null
     */
    public function getPayrollDetail()
    {
        return $this->container['payroll_detail'];
    }

    /**
     * Sets payroll_detail
     *
     * @param \OpenAPI\Client\Model\PayrollDetail[]|null $payroll_detail payroll_detail
     *
     * @return self
     */
    public function setPayrollDetail($payroll_detail)
    {
        $this->container['payroll_detail'] = $payroll_detail;

        return $this;
    }

    /**
     * Gets gallery
     *
     * @return OneOfGallery|null
     */
    public function getGallery()
    {
        return $this->container['gallery'];
    }

    /**
     * Sets gallery
     *
     * @param OneOfGallery|null $gallery gallery
     *
     * @return self
     */
    public function setGallery($gallery)
    {
        $this->container['gallery'] = $gallery;

        return $this;
    }

    /**
     * Gets is_migrate
     *
     * @return bool|null
     */
    public function getIsMigrate()
    {
        return $this->container['is_migrate'];
    }

    /**
     * Sets is_migrate
     *
     * @param bool|null $is_migrate is_migrate
     *
     * @return self
     */
    public function setIsMigrate($is_migrate)
    {
        $this->container['is_migrate'] = $is_migrate;

        return $this;
    }

    /**
     * Gets rule_compile_status
     *
     * @return \OpenAPI\Client\Model\RuleCompileStatus|null
     */
    public function getRuleCompileStatus()
    {
        return $this->container['rule_compile_status'];
    }

    /**
     * Sets rule_compile_status
     *
     * @param \OpenAPI\Client\Model\RuleCompileStatus|null $rule_compile_status rule_compile_status
     *
     * @return self
     */
    public function setRuleCompileStatus($rule_compile_status)
    {
        $this->container['rule_compile_status'] = $rule_compile_status;

        return $this;
    }

    /**
     * Gets is_partial_payments
     *
     * @return bool|null
     */
    public function getIsPartialPayments()
    {
        return $this->container['is_partial_payments'];
    }

    /**
     * Sets is_partial_payments
     *
     * @param bool|null $is_partial_payments is_partial_payments
     *
     * @return self
     */
    public function setIsPartialPayments($is_partial_payments)
    {
        $this->container['is_partial_payments'] = $is_partial_payments;

        return $this;
    }

    /**
     * Gets paid_period
     *
     * @return OneOfPaidPeriod|null
     */
    public function getPaidPeriod()
    {
        return $this->container['paid_period'];
    }

    /**
     * Sets paid_period
     *
     * @param OneOfPaidPeriod|null $paid_period paid_period
     *
     * @return self
     */
    public function setPaidPeriod($paid_period)
    {
        $this->container['paid_period'] = $paid_period;

        return $this;
    }

    /**
     * Gets social_security_percent
     *
     * @return float|null
     */
    public function getSocialSecurityPercent()
    {
        return $this->container['social_security_percent'];
    }

    /**
     * Sets social_security_percent
     *
     * @param float|null $social_security_percent social_security_percent
     *
     * @return self
     */
    public function setSocialSecurityPercent($social_security_percent)
    {
        $this->container['social_security_percent'] = $social_security_percent;

        return $this;
    }

    /**
     * Gets status_int
     *
     * @return int|null
     */
    public function getStatusInt()
    {
        return $this->container['status_int'];
    }

    /**
     * Sets status_int
     *
     * @param int|null $status_int status_int
     *
     * @return self
     */
    public function setStatusInt($status_int)
    {
        $this->container['status_int'] = $status_int;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


