<?php
/**
 * Document
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Document Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Document implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'record_id' => 'int',
        'contact_code' => 'string',
        'contact_name' => 'string',
        'contact_address' => 'string',
        'contact_tax_id' => 'string',
        'contact_branch' => 'string',
        'contact_person' => 'string',
        'contact_email' => 'string',
        'contact_number' => 'string',
        'contact_zip_code' => 'string',
        'contact_group' => 'int',
        'published_on' => '\DateTime',
        'credit_type' => 'int',
        'credit_days' => 'int',
        'due_date' => '\DateTime',
        'sales_name' => 'string',
        'project_name' => 'string',
        'reference' => 'string',
        'is_vat_inclusive' => 'bool',
        'use_receipt_deduction' => 'bool',
        'sub_total' => 'float',
        'discount_percentage' => 'int',
        'discount_amount' => 'float',
        'total_after_discount' => 'float',
        'is_vat' => 'bool',
        'vat_amount' => 'float',
        'grand_total' => 'float',
        'document_show_withholding_tax' => 'bool',
        'document_withholding_tax_percentage' => 'int',
        'document_withholding_tax_amount' => 'float',
        'document_deduction_type' => 'int',
        'document_deduction_amount' => 'float',
        'remarks' => 'string',
        'internal_notes' => 'string',
        'show_signature_or_stamp' => 'bool',
        'document_structure_type' => 'string',
        'external_id' => 'string',
        'sale_and_purchase_channel' => 'string',
        'row_index' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'record_id' => 'int64',
        'contact_code' => null,
        'contact_name' => null,
        'contact_address' => null,
        'contact_tax_id' => null,
        'contact_branch' => null,
        'contact_person' => null,
        'contact_email' => null,
        'contact_number' => null,
        'contact_zip_code' => null,
        'contact_group' => 'int32',
        'published_on' => 'date-time',
        'credit_type' => 'int32',
        'credit_days' => 'int32',
        'due_date' => 'date-time',
        'sales_name' => null,
        'project_name' => null,
        'reference' => null,
        'is_vat_inclusive' => null,
        'use_receipt_deduction' => null,
        'sub_total' => 'decimal',
        'discount_percentage' => 'int32',
        'discount_amount' => 'decimal',
        'total_after_discount' => 'decimal',
        'is_vat' => null,
        'vat_amount' => 'decimal',
        'grand_total' => 'decimal',
        'document_show_withholding_tax' => null,
        'document_withholding_tax_percentage' => 'int32',
        'document_withholding_tax_amount' => 'decimal',
        'document_deduction_type' => 'int32',
        'document_deduction_amount' => 'decimal',
        'remarks' => null,
        'internal_notes' => null,
        'show_signature_or_stamp' => null,
        'document_structure_type' => null,
        'external_id' => null,
        'sale_and_purchase_channel' => null,
        'row_index' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'record_id' => 'recordId',
        'contact_code' => 'contactCode',
        'contact_name' => 'contactName',
        'contact_address' => 'contactAddress',
        'contact_tax_id' => 'contactTaxId',
        'contact_branch' => 'contactBranch',
        'contact_person' => 'contactPerson',
        'contact_email' => 'contactEmail',
        'contact_number' => 'contactNumber',
        'contact_zip_code' => 'contactZipCode',
        'contact_group' => 'contactGroup',
        'published_on' => 'publishedOn',
        'credit_type' => 'creditType',
        'credit_days' => 'creditDays',
        'due_date' => 'dueDate',
        'sales_name' => 'salesName',
        'project_name' => 'projectName',
        'reference' => 'reference',
        'is_vat_inclusive' => 'isVatInclusive',
        'use_receipt_deduction' => 'useReceiptDeduction',
        'sub_total' => 'subTotal',
        'discount_percentage' => 'discountPercentage',
        'discount_amount' => 'discountAmount',
        'total_after_discount' => 'totalAfterDiscount',
        'is_vat' => 'isVat',
        'vat_amount' => 'vatAmount',
        'grand_total' => 'grandTotal',
        'document_show_withholding_tax' => 'documentShowWithholdingTax',
        'document_withholding_tax_percentage' => 'documentWithholdingTaxPercentage',
        'document_withholding_tax_amount' => 'documentWithholdingTaxAmount',
        'document_deduction_type' => 'documentDeductionType',
        'document_deduction_amount' => 'documentDeductionAmount',
        'remarks' => 'remarks',
        'internal_notes' => 'internalNotes',
        'show_signature_or_stamp' => 'showSignatureOrStamp',
        'document_structure_type' => 'documentStructureType',
        'external_id' => 'externalId',
        'sale_and_purchase_channel' => 'saleAndPurchaseChannel',
        'row_index' => 'rowIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'record_id' => 'setRecordId',
        'contact_code' => 'setContactCode',
        'contact_name' => 'setContactName',
        'contact_address' => 'setContactAddress',
        'contact_tax_id' => 'setContactTaxId',
        'contact_branch' => 'setContactBranch',
        'contact_person' => 'setContactPerson',
        'contact_email' => 'setContactEmail',
        'contact_number' => 'setContactNumber',
        'contact_zip_code' => 'setContactZipCode',
        'contact_group' => 'setContactGroup',
        'published_on' => 'setPublishedOn',
        'credit_type' => 'setCreditType',
        'credit_days' => 'setCreditDays',
        'due_date' => 'setDueDate',
        'sales_name' => 'setSalesName',
        'project_name' => 'setProjectName',
        'reference' => 'setReference',
        'is_vat_inclusive' => 'setIsVatInclusive',
        'use_receipt_deduction' => 'setUseReceiptDeduction',
        'sub_total' => 'setSubTotal',
        'discount_percentage' => 'setDiscountPercentage',
        'discount_amount' => 'setDiscountAmount',
        'total_after_discount' => 'setTotalAfterDiscount',
        'is_vat' => 'setIsVat',
        'vat_amount' => 'setVatAmount',
        'grand_total' => 'setGrandTotal',
        'document_show_withholding_tax' => 'setDocumentShowWithholdingTax',
        'document_withholding_tax_percentage' => 'setDocumentWithholdingTaxPercentage',
        'document_withholding_tax_amount' => 'setDocumentWithholdingTaxAmount',
        'document_deduction_type' => 'setDocumentDeductionType',
        'document_deduction_amount' => 'setDocumentDeductionAmount',
        'remarks' => 'setRemarks',
        'internal_notes' => 'setInternalNotes',
        'show_signature_or_stamp' => 'setShowSignatureOrStamp',
        'document_structure_type' => 'setDocumentStructureType',
        'external_id' => 'setExternalId',
        'sale_and_purchase_channel' => 'setSaleAndPurchaseChannel',
        'row_index' => 'setRowIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'record_id' => 'getRecordId',
        'contact_code' => 'getContactCode',
        'contact_name' => 'getContactName',
        'contact_address' => 'getContactAddress',
        'contact_tax_id' => 'getContactTaxId',
        'contact_branch' => 'getContactBranch',
        'contact_person' => 'getContactPerson',
        'contact_email' => 'getContactEmail',
        'contact_number' => 'getContactNumber',
        'contact_zip_code' => 'getContactZipCode',
        'contact_group' => 'getContactGroup',
        'published_on' => 'getPublishedOn',
        'credit_type' => 'getCreditType',
        'credit_days' => 'getCreditDays',
        'due_date' => 'getDueDate',
        'sales_name' => 'getSalesName',
        'project_name' => 'getProjectName',
        'reference' => 'getReference',
        'is_vat_inclusive' => 'getIsVatInclusive',
        'use_receipt_deduction' => 'getUseReceiptDeduction',
        'sub_total' => 'getSubTotal',
        'discount_percentage' => 'getDiscountPercentage',
        'discount_amount' => 'getDiscountAmount',
        'total_after_discount' => 'getTotalAfterDiscount',
        'is_vat' => 'getIsVat',
        'vat_amount' => 'getVatAmount',
        'grand_total' => 'getGrandTotal',
        'document_show_withholding_tax' => 'getDocumentShowWithholdingTax',
        'document_withholding_tax_percentage' => 'getDocumentWithholdingTaxPercentage',
        'document_withholding_tax_amount' => 'getDocumentWithholdingTaxAmount',
        'document_deduction_type' => 'getDocumentDeductionType',
        'document_deduction_amount' => 'getDocumentDeductionAmount',
        'remarks' => 'getRemarks',
        'internal_notes' => 'getInternalNotes',
        'show_signature_or_stamp' => 'getShowSignatureOrStamp',
        'document_structure_type' => 'getDocumentStructureType',
        'external_id' => 'getExternalId',
        'sale_and_purchase_channel' => 'getSaleAndPurchaseChannel',
        'row_index' => 'getRowIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['record_id'] = $data['record_id'] ?? null;
        $this->container['contact_code'] = $data['contact_code'] ?? null;
        $this->container['contact_name'] = $data['contact_name'] ?? null;
        $this->container['contact_address'] = $data['contact_address'] ?? null;
        $this->container['contact_tax_id'] = $data['contact_tax_id'] ?? null;
        $this->container['contact_branch'] = $data['contact_branch'] ?? null;
        $this->container['contact_person'] = $data['contact_person'] ?? null;
        $this->container['contact_email'] = $data['contact_email'] ?? null;
        $this->container['contact_number'] = $data['contact_number'] ?? null;
        $this->container['contact_zip_code'] = $data['contact_zip_code'] ?? null;
        $this->container['contact_group'] = $data['contact_group'] ?? null;
        $this->container['published_on'] = $data['published_on'] ?? null;
        $this->container['credit_type'] = $data['credit_type'] ?? null;
        $this->container['credit_days'] = $data['credit_days'] ?? null;
        $this->container['due_date'] = $data['due_date'] ?? null;
        $this->container['sales_name'] = $data['sales_name'] ?? null;
        $this->container['project_name'] = $data['project_name'] ?? null;
        $this->container['reference'] = $data['reference'] ?? null;
        $this->container['is_vat_inclusive'] = $data['is_vat_inclusive'] ?? null;
        $this->container['use_receipt_deduction'] = $data['use_receipt_deduction'] ?? null;
        $this->container['sub_total'] = $data['sub_total'] ?? null;
        $this->container['discount_percentage'] = $data['discount_percentage'] ?? null;
        $this->container['discount_amount'] = $data['discount_amount'] ?? null;
        $this->container['total_after_discount'] = $data['total_after_discount'] ?? null;
        $this->container['is_vat'] = $data['is_vat'] ?? null;
        $this->container['vat_amount'] = $data['vat_amount'] ?? null;
        $this->container['grand_total'] = $data['grand_total'] ?? null;
        $this->container['document_show_withholding_tax'] = $data['document_show_withholding_tax'] ?? null;
        $this->container['document_withholding_tax_percentage'] = $data['document_withholding_tax_percentage'] ?? null;
        $this->container['document_withholding_tax_amount'] = $data['document_withholding_tax_amount'] ?? null;
        $this->container['document_deduction_type'] = $data['document_deduction_type'] ?? null;
        $this->container['document_deduction_amount'] = $data['document_deduction_amount'] ?? null;
        $this->container['remarks'] = $data['remarks'] ?? null;
        $this->container['internal_notes'] = $data['internal_notes'] ?? null;
        $this->container['show_signature_or_stamp'] = $data['show_signature_or_stamp'] ?? null;
        $this->container['document_structure_type'] = $data['document_structure_type'] ?? null;
        $this->container['external_id'] = $data['external_id'] ?? null;
        $this->container['sale_and_purchase_channel'] = $data['sale_and_purchase_channel'] ?? null;
        $this->container['row_index'] = $data['row_index'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets record_id
     *
     * @return int|null
     */
    public function getRecordId()
    {
        return $this->container['record_id'];
    }

    /**
     * Sets record_id
     *
     * @param int|null $record_id record_id
     *
     * @return self
     */
    public function setRecordId($record_id)
    {
        $this->container['record_id'] = $record_id;

        return $this;
    }

    /**
     * Gets contact_code
     *
     * @return string|null
     */
    public function getContactCode()
    {
        return $this->container['contact_code'];
    }

    /**
     * Sets contact_code
     *
     * @param string|null $contact_code contact_code
     *
     * @return self
     */
    public function setContactCode($contact_code)
    {
        $this->container['contact_code'] = $contact_code;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string|null
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string|null $contact_name contact_name
     *
     * @return self
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets contact_address
     *
     * @return string|null
     */
    public function getContactAddress()
    {
        return $this->container['contact_address'];
    }

    /**
     * Sets contact_address
     *
     * @param string|null $contact_address contact_address
     *
     * @return self
     */
    public function setContactAddress($contact_address)
    {
        $this->container['contact_address'] = $contact_address;

        return $this;
    }

    /**
     * Gets contact_tax_id
     *
     * @return string|null
     */
    public function getContactTaxId()
    {
        return $this->container['contact_tax_id'];
    }

    /**
     * Sets contact_tax_id
     *
     * @param string|null $contact_tax_id contact_tax_id
     *
     * @return self
     */
    public function setContactTaxId($contact_tax_id)
    {
        $this->container['contact_tax_id'] = $contact_tax_id;

        return $this;
    }

    /**
     * Gets contact_branch
     *
     * @return string|null
     */
    public function getContactBranch()
    {
        return $this->container['contact_branch'];
    }

    /**
     * Sets contact_branch
     *
     * @param string|null $contact_branch contact_branch
     *
     * @return self
     */
    public function setContactBranch($contact_branch)
    {
        $this->container['contact_branch'] = $contact_branch;

        return $this;
    }

    /**
     * Gets contact_person
     *
     * @return string|null
     */
    public function getContactPerson()
    {
        return $this->container['contact_person'];
    }

    /**
     * Sets contact_person
     *
     * @param string|null $contact_person contact_person
     *
     * @return self
     */
    public function setContactPerson($contact_person)
    {
        $this->container['contact_person'] = $contact_person;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string|null
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string|null $contact_email contact_email
     *
     * @return self
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets contact_number
     *
     * @return string|null
     */
    public function getContactNumber()
    {
        return $this->container['contact_number'];
    }

    /**
     * Sets contact_number
     *
     * @param string|null $contact_number contact_number
     *
     * @return self
     */
    public function setContactNumber($contact_number)
    {
        $this->container['contact_number'] = $contact_number;

        return $this;
    }

    /**
     * Gets contact_zip_code
     *
     * @return string|null
     */
    public function getContactZipCode()
    {
        return $this->container['contact_zip_code'];
    }

    /**
     * Sets contact_zip_code
     *
     * @param string|null $contact_zip_code contact_zip_code
     *
     * @return self
     */
    public function setContactZipCode($contact_zip_code)
    {
        $this->container['contact_zip_code'] = $contact_zip_code;

        return $this;
    }

    /**
     * Gets contact_group
     *
     * @return int|null
     */
    public function getContactGroup()
    {
        return $this->container['contact_group'];
    }

    /**
     * Sets contact_group
     *
     * @param int|null $contact_group contact_group
     *
     * @return self
     */
    public function setContactGroup($contact_group)
    {
        $this->container['contact_group'] = $contact_group;

        return $this;
    }

    /**
     * Gets published_on
     *
     * @return \DateTime|null
     */
    public function getPublishedOn()
    {
        return $this->container['published_on'];
    }

    /**
     * Sets published_on
     *
     * @param \DateTime|null $published_on published_on
     *
     * @return self
     */
    public function setPublishedOn($published_on)
    {
        $this->container['published_on'] = $published_on;

        return $this;
    }

    /**
     * Gets credit_type
     *
     * @return int|null
     */
    public function getCreditType()
    {
        return $this->container['credit_type'];
    }

    /**
     * Sets credit_type
     *
     * @param int|null $credit_type credit_type
     *
     * @return self
     */
    public function setCreditType($credit_type)
    {
        $this->container['credit_type'] = $credit_type;

        return $this;
    }

    /**
     * Gets credit_days
     *
     * @return int|null
     */
    public function getCreditDays()
    {
        return $this->container['credit_days'];
    }

    /**
     * Sets credit_days
     *
     * @param int|null $credit_days credit_days
     *
     * @return self
     */
    public function setCreditDays($credit_days)
    {
        $this->container['credit_days'] = $credit_days;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets sales_name
     *
     * @return string|null
     */
    public function getSalesName()
    {
        return $this->container['sales_name'];
    }

    /**
     * Sets sales_name
     *
     * @param string|null $sales_name sales_name
     *
     * @return self
     */
    public function setSalesName($sales_name)
    {
        $this->container['sales_name'] = $sales_name;

        return $this;
    }

    /**
     * Gets project_name
     *
     * @return string|null
     */
    public function getProjectName()
    {
        return $this->container['project_name'];
    }

    /**
     * Sets project_name
     *
     * @param string|null $project_name project_name
     *
     * @return self
     */
    public function setProjectName($project_name)
    {
        $this->container['project_name'] = $project_name;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string|null
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string|null $reference reference
     *
     * @return self
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets is_vat_inclusive
     *
     * @return bool|null
     */
    public function getIsVatInclusive()
    {
        return $this->container['is_vat_inclusive'];
    }

    /**
     * Sets is_vat_inclusive
     *
     * @param bool|null $is_vat_inclusive is_vat_inclusive
     *
     * @return self
     */
    public function setIsVatInclusive($is_vat_inclusive)
    {
        $this->container['is_vat_inclusive'] = $is_vat_inclusive;

        return $this;
    }

    /**
     * Gets use_receipt_deduction
     *
     * @return bool|null
     */
    public function getUseReceiptDeduction()
    {
        return $this->container['use_receipt_deduction'];
    }

    /**
     * Sets use_receipt_deduction
     *
     * @param bool|null $use_receipt_deduction use_receipt_deduction
     *
     * @return self
     */
    public function setUseReceiptDeduction($use_receipt_deduction)
    {
        $this->container['use_receipt_deduction'] = $use_receipt_deduction;

        return $this;
    }

    /**
     * Gets sub_total
     *
     * @return float|null
     */
    public function getSubTotal()
    {
        return $this->container['sub_total'];
    }

    /**
     * Sets sub_total
     *
     * @param float|null $sub_total sub_total
     *
     * @return self
     */
    public function setSubTotal($sub_total)
    {
        $this->container['sub_total'] = $sub_total;

        return $this;
    }

    /**
     * Gets discount_percentage
     *
     * @return int|null
     */
    public function getDiscountPercentage()
    {
        return $this->container['discount_percentage'];
    }

    /**
     * Sets discount_percentage
     *
     * @param int|null $discount_percentage discount_percentage
     *
     * @return self
     */
    public function setDiscountPercentage($discount_percentage)
    {
        $this->container['discount_percentage'] = $discount_percentage;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return float|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param float|null $discount_amount discount_amount
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets total_after_discount
     *
     * @return float|null
     */
    public function getTotalAfterDiscount()
    {
        return $this->container['total_after_discount'];
    }

    /**
     * Sets total_after_discount
     *
     * @param float|null $total_after_discount total_after_discount
     *
     * @return self
     */
    public function setTotalAfterDiscount($total_after_discount)
    {
        $this->container['total_after_discount'] = $total_after_discount;

        return $this;
    }

    /**
     * Gets is_vat
     *
     * @return bool|null
     */
    public function getIsVat()
    {
        return $this->container['is_vat'];
    }

    /**
     * Sets is_vat
     *
     * @param bool|null $is_vat is_vat
     *
     * @return self
     */
    public function setIsVat($is_vat)
    {
        $this->container['is_vat'] = $is_vat;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return float|null
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param float|null $vat_amount vat_amount
     *
     * @return self
     */
    public function setVatAmount($vat_amount)
    {
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets grand_total
     *
     * @return float|null
     */
    public function getGrandTotal()
    {
        return $this->container['grand_total'];
    }

    /**
     * Sets grand_total
     *
     * @param float|null $grand_total grand_total
     *
     * @return self
     */
    public function setGrandTotal($grand_total)
    {
        $this->container['grand_total'] = $grand_total;

        return $this;
    }

    /**
     * Gets document_show_withholding_tax
     *
     * @return bool|null
     */
    public function getDocumentShowWithholdingTax()
    {
        return $this->container['document_show_withholding_tax'];
    }

    /**
     * Sets document_show_withholding_tax
     *
     * @param bool|null $document_show_withholding_tax document_show_withholding_tax
     *
     * @return self
     */
    public function setDocumentShowWithholdingTax($document_show_withholding_tax)
    {
        $this->container['document_show_withholding_tax'] = $document_show_withholding_tax;

        return $this;
    }

    /**
     * Gets document_withholding_tax_percentage
     *
     * @return int|null
     */
    public function getDocumentWithholdingTaxPercentage()
    {
        return $this->container['document_withholding_tax_percentage'];
    }

    /**
     * Sets document_withholding_tax_percentage
     *
     * @param int|null $document_withholding_tax_percentage document_withholding_tax_percentage
     *
     * @return self
     */
    public function setDocumentWithholdingTaxPercentage($document_withholding_tax_percentage)
    {
        $this->container['document_withholding_tax_percentage'] = $document_withholding_tax_percentage;

        return $this;
    }

    /**
     * Gets document_withholding_tax_amount
     *
     * @return float|null
     */
    public function getDocumentWithholdingTaxAmount()
    {
        return $this->container['document_withholding_tax_amount'];
    }

    /**
     * Sets document_withholding_tax_amount
     *
     * @param float|null $document_withholding_tax_amount document_withholding_tax_amount
     *
     * @return self
     */
    public function setDocumentWithholdingTaxAmount($document_withholding_tax_amount)
    {
        $this->container['document_withholding_tax_amount'] = $document_withholding_tax_amount;

        return $this;
    }

    /**
     * Gets document_deduction_type
     *
     * @return int|null
     */
    public function getDocumentDeductionType()
    {
        return $this->container['document_deduction_type'];
    }

    /**
     * Sets document_deduction_type
     *
     * @param int|null $document_deduction_type document_deduction_type
     *
     * @return self
     */
    public function setDocumentDeductionType($document_deduction_type)
    {
        $this->container['document_deduction_type'] = $document_deduction_type;

        return $this;
    }

    /**
     * Gets document_deduction_amount
     *
     * @return float|null
     */
    public function getDocumentDeductionAmount()
    {
        return $this->container['document_deduction_amount'];
    }

    /**
     * Sets document_deduction_amount
     *
     * @param float|null $document_deduction_amount document_deduction_amount
     *
     * @return self
     */
    public function setDocumentDeductionAmount($document_deduction_amount)
    {
        $this->container['document_deduction_amount'] = $document_deduction_amount;

        return $this;
    }

    /**
     * Gets remarks
     *
     * @return string|null
     */
    public function getRemarks()
    {
        return $this->container['remarks'];
    }

    /**
     * Sets remarks
     *
     * @param string|null $remarks remarks
     *
     * @return self
     */
    public function setRemarks($remarks)
    {
        $this->container['remarks'] = $remarks;

        return $this;
    }

    /**
     * Gets internal_notes
     *
     * @return string|null
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     *
     * @param string|null $internal_notes internal_notes
     *
     * @return self
     */
    public function setInternalNotes($internal_notes)
    {
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets show_signature_or_stamp
     *
     * @return bool|null
     */
    public function getShowSignatureOrStamp()
    {
        return $this->container['show_signature_or_stamp'];
    }

    /**
     * Sets show_signature_or_stamp
     *
     * @param bool|null $show_signature_or_stamp show_signature_or_stamp
     *
     * @return self
     */
    public function setShowSignatureOrStamp($show_signature_or_stamp)
    {
        $this->container['show_signature_or_stamp'] = $show_signature_or_stamp;

        return $this;
    }

    /**
     * Gets document_structure_type
     *
     * @return string|null
     */
    public function getDocumentStructureType()
    {
        return $this->container['document_structure_type'];
    }

    /**
     * Sets document_structure_type
     *
     * @param string|null $document_structure_type document_structure_type
     *
     * @return self
     */
    public function setDocumentStructureType($document_structure_type)
    {
        $this->container['document_structure_type'] = $document_structure_type;

        return $this;
    }

    /**
     * Gets external_id
     *
     * @return string|null
     */
    public function getExternalId()
    {
        return $this->container['external_id'];
    }

    /**
     * Sets external_id
     *
     * @param string|null $external_id external_id
     *
     * @return self
     */
    public function setExternalId($external_id)
    {
        $this->container['external_id'] = $external_id;

        return $this;
    }

    /**
     * Gets sale_and_purchase_channel
     *
     * @return string|null
     */
    public function getSaleAndPurchaseChannel()
    {
        return $this->container['sale_and_purchase_channel'];
    }

    /**
     * Sets sale_and_purchase_channel
     *
     * @param string|null $sale_and_purchase_channel sale_and_purchase_channel
     *
     * @return self
     */
    public function setSaleAndPurchaseChannel($sale_and_purchase_channel)
    {
        $this->container['sale_and_purchase_channel'] = $sale_and_purchase_channel;

        return $this;
    }

    /**
     * Gets row_index
     *
     * @return string|null
     */
    public function getRowIndex()
    {
        return $this->container['row_index'];
    }

    /**
     * Sets row_index
     *
     * @param string|null $row_index row_index
     *
     * @return self
     */
    public function setRowIndex($row_index)
    {
        $this->container['row_index'] = $row_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


