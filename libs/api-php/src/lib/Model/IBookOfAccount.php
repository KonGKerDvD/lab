<?php
/**
 * IBookOfAccount
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * IBookOfAccount Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class IBookOfAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IBookOfAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'journal_entry_id' => 'int',
        'company_id' => 'int',
        'debit_credit' => '\OpenAPI\Client\Model\FinancialTransactionType',
        'book_of_account_status' => '\OpenAPI\Client\Model\BookOfAccountStatus',
        'chart_of_account_id' => 'int',
        'posted_date' => '\DateTime',
        'created_on' => '\DateTime',
        'modified_on' => '\DateTime',
        'approved_on' => '\DateTime',
        'value' => 'float',
        'balance' => 'float',
        'exclude_void_balance' => 'float',
        'row_number' => 'int',
        'description' => 'string',
        'description_foreign' => 'string',
        'chart_of_account_name' => 'string',
        'journal_entry' => 'OneOfIJournalEntryBase',
        'chart_of_account' => 'OneOfIChartOfAccount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'journal_entry_id' => 'int64',
        'company_id' => 'int64',
        'debit_credit' => null,
        'book_of_account_status' => null,
        'chart_of_account_id' => 'int64',
        'posted_date' => 'date-time',
        'created_on' => 'date-time',
        'modified_on' => 'date-time',
        'approved_on' => 'date-time',
        'value' => 'decimal',
        'balance' => 'decimal',
        'exclude_void_balance' => 'decimal',
        'row_number' => 'int32',
        'description' => null,
        'description_foreign' => null,
        'chart_of_account_name' => null,
        'journal_entry' => null,
        'chart_of_account' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'journal_entry_id' => 'journalEntryId',
        'company_id' => 'companyId',
        'debit_credit' => 'debitCredit',
        'book_of_account_status' => 'bookOfAccountStatus',
        'chart_of_account_id' => 'chartOfAccountId',
        'posted_date' => 'postedDate',
        'created_on' => 'createdOn',
        'modified_on' => 'modifiedOn',
        'approved_on' => 'approvedOn',
        'value' => 'value',
        'balance' => 'balance',
        'exclude_void_balance' => 'excludeVoidBalance',
        'row_number' => 'rowNumber',
        'description' => 'description',
        'description_foreign' => 'descriptionForeign',
        'chart_of_account_name' => 'chartOfAccountName',
        'journal_entry' => 'journalEntry',
        'chart_of_account' => 'chartOfAccount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'journal_entry_id' => 'setJournalEntryId',
        'company_id' => 'setCompanyId',
        'debit_credit' => 'setDebitCredit',
        'book_of_account_status' => 'setBookOfAccountStatus',
        'chart_of_account_id' => 'setChartOfAccountId',
        'posted_date' => 'setPostedDate',
        'created_on' => 'setCreatedOn',
        'modified_on' => 'setModifiedOn',
        'approved_on' => 'setApprovedOn',
        'value' => 'setValue',
        'balance' => 'setBalance',
        'exclude_void_balance' => 'setExcludeVoidBalance',
        'row_number' => 'setRowNumber',
        'description' => 'setDescription',
        'description_foreign' => 'setDescriptionForeign',
        'chart_of_account_name' => 'setChartOfAccountName',
        'journal_entry' => 'setJournalEntry',
        'chart_of_account' => 'setChartOfAccount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'journal_entry_id' => 'getJournalEntryId',
        'company_id' => 'getCompanyId',
        'debit_credit' => 'getDebitCredit',
        'book_of_account_status' => 'getBookOfAccountStatus',
        'chart_of_account_id' => 'getChartOfAccountId',
        'posted_date' => 'getPostedDate',
        'created_on' => 'getCreatedOn',
        'modified_on' => 'getModifiedOn',
        'approved_on' => 'getApprovedOn',
        'value' => 'getValue',
        'balance' => 'getBalance',
        'exclude_void_balance' => 'getExcludeVoidBalance',
        'row_number' => 'getRowNumber',
        'description' => 'getDescription',
        'description_foreign' => 'getDescriptionForeign',
        'chart_of_account_name' => 'getChartOfAccountName',
        'journal_entry' => 'getJournalEntry',
        'chart_of_account' => 'getChartOfAccount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['journal_entry_id'] = $data['journal_entry_id'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['debit_credit'] = $data['debit_credit'] ?? null;
        $this->container['book_of_account_status'] = $data['book_of_account_status'] ?? null;
        $this->container['chart_of_account_id'] = $data['chart_of_account_id'] ?? null;
        $this->container['posted_date'] = $data['posted_date'] ?? null;
        $this->container['created_on'] = $data['created_on'] ?? null;
        $this->container['modified_on'] = $data['modified_on'] ?? null;
        $this->container['approved_on'] = $data['approved_on'] ?? null;
        $this->container['value'] = $data['value'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['exclude_void_balance'] = $data['exclude_void_balance'] ?? null;
        $this->container['row_number'] = $data['row_number'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['description_foreign'] = $data['description_foreign'] ?? null;
        $this->container['chart_of_account_name'] = $data['chart_of_account_name'] ?? null;
        $this->container['journal_entry'] = $data['journal_entry'] ?? null;
        $this->container['chart_of_account'] = $data['chart_of_account'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets journal_entry_id
     *
     * @return int|null
     */
    public function getJournalEntryId()
    {
        return $this->container['journal_entry_id'];
    }

    /**
     * Sets journal_entry_id
     *
     * @param int|null $journal_entry_id journal_entry_id
     *
     * @return self
     */
    public function setJournalEntryId($journal_entry_id)
    {
        $this->container['journal_entry_id'] = $journal_entry_id;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int|null
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int|null $company_id company_id
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets debit_credit
     *
     * @return \OpenAPI\Client\Model\FinancialTransactionType|null
     */
    public function getDebitCredit()
    {
        return $this->container['debit_credit'];
    }

    /**
     * Sets debit_credit
     *
     * @param \OpenAPI\Client\Model\FinancialTransactionType|null $debit_credit debit_credit
     *
     * @return self
     */
    public function setDebitCredit($debit_credit)
    {
        $this->container['debit_credit'] = $debit_credit;

        return $this;
    }

    /**
     * Gets book_of_account_status
     *
     * @return \OpenAPI\Client\Model\BookOfAccountStatus|null
     */
    public function getBookOfAccountStatus()
    {
        return $this->container['book_of_account_status'];
    }

    /**
     * Sets book_of_account_status
     *
     * @param \OpenAPI\Client\Model\BookOfAccountStatus|null $book_of_account_status book_of_account_status
     *
     * @return self
     */
    public function setBookOfAccountStatus($book_of_account_status)
    {
        $this->container['book_of_account_status'] = $book_of_account_status;

        return $this;
    }

    /**
     * Gets chart_of_account_id
     *
     * @return int|null
     */
    public function getChartOfAccountId()
    {
        return $this->container['chart_of_account_id'];
    }

    /**
     * Sets chart_of_account_id
     *
     * @param int|null $chart_of_account_id chart_of_account_id
     *
     * @return self
     */
    public function setChartOfAccountId($chart_of_account_id)
    {
        $this->container['chart_of_account_id'] = $chart_of_account_id;

        return $this;
    }

    /**
     * Gets posted_date
     *
     * @return \DateTime|null
     */
    public function getPostedDate()
    {
        return $this->container['posted_date'];
    }

    /**
     * Sets posted_date
     *
     * @param \DateTime|null $posted_date posted_date
     *
     * @return self
     */
    public function setPostedDate($posted_date)
    {
        $this->container['posted_date'] = $posted_date;

        return $this;
    }

    /**
     * Gets created_on
     *
     * @return \DateTime|null
     */
    public function getCreatedOn()
    {
        return $this->container['created_on'];
    }

    /**
     * Sets created_on
     *
     * @param \DateTime|null $created_on created_on
     *
     * @return self
     */
    public function setCreatedOn($created_on)
    {
        $this->container['created_on'] = $created_on;

        return $this;
    }

    /**
     * Gets modified_on
     *
     * @return \DateTime|null
     */
    public function getModifiedOn()
    {
        return $this->container['modified_on'];
    }

    /**
     * Sets modified_on
     *
     * @param \DateTime|null $modified_on modified_on
     *
     * @return self
     */
    public function setModifiedOn($modified_on)
    {
        $this->container['modified_on'] = $modified_on;

        return $this;
    }

    /**
     * Gets approved_on
     *
     * @return \DateTime|null
     */
    public function getApprovedOn()
    {
        return $this->container['approved_on'];
    }

    /**
     * Sets approved_on
     *
     * @param \DateTime|null $approved_on approved_on
     *
     * @return self
     */
    public function setApprovedOn($approved_on)
    {
        $this->container['approved_on'] = $approved_on;

        return $this;
    }

    /**
     * Gets value
     *
     * @return float|null
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param float|null $value value
     *
     * @return self
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets exclude_void_balance
     *
     * @return float|null
     */
    public function getExcludeVoidBalance()
    {
        return $this->container['exclude_void_balance'];
    }

    /**
     * Sets exclude_void_balance
     *
     * @param float|null $exclude_void_balance exclude_void_balance
     *
     * @return self
     */
    public function setExcludeVoidBalance($exclude_void_balance)
    {
        $this->container['exclude_void_balance'] = $exclude_void_balance;

        return $this;
    }

    /**
     * Gets row_number
     *
     * @return int|null
     */
    public function getRowNumber()
    {
        return $this->container['row_number'];
    }

    /**
     * Sets row_number
     *
     * @param int|null $row_number row_number
     *
     * @return self
     */
    public function setRowNumber($row_number)
    {
        $this->container['row_number'] = $row_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets description_foreign
     *
     * @return string|null
     */
    public function getDescriptionForeign()
    {
        return $this->container['description_foreign'];
    }

    /**
     * Sets description_foreign
     *
     * @param string|null $description_foreign description_foreign
     *
     * @return self
     */
    public function setDescriptionForeign($description_foreign)
    {
        $this->container['description_foreign'] = $description_foreign;

        return $this;
    }

    /**
     * Gets chart_of_account_name
     *
     * @return string|null
     */
    public function getChartOfAccountName()
    {
        return $this->container['chart_of_account_name'];
    }

    /**
     * Sets chart_of_account_name
     *
     * @param string|null $chart_of_account_name chart_of_account_name
     *
     * @return self
     */
    public function setChartOfAccountName($chart_of_account_name)
    {
        $this->container['chart_of_account_name'] = $chart_of_account_name;

        return $this;
    }

    /**
     * Gets journal_entry
     *
     * @return OneOfIJournalEntryBase|null
     */
    public function getJournalEntry()
    {
        return $this->container['journal_entry'];
    }

    /**
     * Sets journal_entry
     *
     * @param OneOfIJournalEntryBase|null $journal_entry journal_entry
     *
     * @return self
     */
    public function setJournalEntry($journal_entry)
    {
        $this->container['journal_entry'] = $journal_entry;

        return $this;
    }

    /**
     * Gets chart_of_account
     *
     * @return OneOfIChartOfAccount|null
     */
    public function getChartOfAccount()
    {
        return $this->container['chart_of_account'];
    }

    /**
     * Sets chart_of_account
     *
     * @param OneOfIChartOfAccount|null $chart_of_account chart_of_account
     *
     * @return self
     */
    public function setChartOfAccount($chart_of_account)
    {
        $this->container['chart_of_account'] = $chart_of_account;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


