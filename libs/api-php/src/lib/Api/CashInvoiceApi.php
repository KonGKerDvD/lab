<?php
/**
 * CashInvoiceApi
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * FlowAccount Open API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * CashInvoiceApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CashInvoiceApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cashInvoiceChangeStatusByKey
     *
     * To change status by the document id and key
     *
     * @param  int $document_id document_id (required)
     * @param  string $status_key status_key (required)
     * @param  string $culture culture (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cashInvoiceChangeStatusByKey($document_id, $status_key, $culture)
    {
        list($response) = $this->cashInvoiceChangeStatusByKeyWithHttpInfo($document_id, $status_key, $culture);
        return $response;
    }

    /**
     * Operation cashInvoiceChangeStatusByKeyWithHttpInfo
     *
     * To change status by the document id and key
     *
     * @param  int $document_id (required)
     * @param  string $status_key (required)
     * @param  string $culture (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashInvoiceChangeStatusByKeyWithHttpInfo($document_id, $status_key, $culture)
    {
        $request = $this->cashInvoiceChangeStatusByKeyRequest($document_id, $status_key, $culture);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashInvoiceChangeStatusByKeyAsync
     *
     * To change status by the document id and key
     *
     * @param  int $document_id (required)
     * @param  string $status_key (required)
     * @param  string $culture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceChangeStatusByKeyAsync($document_id, $status_key, $culture)
    {
        return $this->cashInvoiceChangeStatusByKeyAsyncWithHttpInfo($document_id, $status_key, $culture)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashInvoiceChangeStatusByKeyAsyncWithHttpInfo
     *
     * To change status by the document id and key
     *
     * @param  int $document_id (required)
     * @param  string $status_key (required)
     * @param  string $culture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceChangeStatusByKeyAsyncWithHttpInfo($document_id, $status_key, $culture)
    {
        $returnType = '\SplFileObject';
        $request = $this->cashInvoiceChangeStatusByKeyRequest($document_id, $status_key, $culture);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashInvoiceChangeStatusByKey'
     *
     * @param  int $document_id (required)
     * @param  string $status_key (required)
     * @param  string $culture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cashInvoiceChangeStatusByKeyRequest($document_id, $status_key, $culture)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling cashInvoiceChangeStatusByKey'
            );
        }
        // verify the required parameter 'status_key' is set
        if ($status_key === null || (is_array($status_key) && count($status_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $status_key when calling cashInvoiceChangeStatusByKey'
            );
        }
        // verify the required parameter 'culture' is set
        if ($culture === null || (is_array($culture) && count($culture) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $culture when calling cashInvoiceChangeStatusByKey'
            );
        }

        $resourcePath = '/{culture}/cash-invoices/{documentId}/status-key/{statusKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($status_key !== null) {
            $resourcePath = str_replace(
                '{' . 'statusKey' . '}',
                ObjectSerializer::toPathValue($status_key),
                $resourcePath
            );
        }
        // path params
        if ($culture !== null) {
            $resourcePath = str_replace(
                '{' . 'culture' . '}',
                ObjectSerializer::toPathValue($culture),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer (Reference) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashInvoiceCreate
     *
     * To Create a document with SimpleDocument as the parameter
     *
     * @param  string $culture culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document simple_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessageSent
     */
    public function cashInvoiceCreate($culture, $simple_document)
    {
        list($response) = $this->cashInvoiceCreateWithHttpInfo($culture, $simple_document);
        return $response;
    }

    /**
     * Operation cashInvoiceCreateWithHttpInfo
     *
     * To Create a document with SimpleDocument as the parameter
     *
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessageSent, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashInvoiceCreateWithHttpInfo($culture, $simple_document)
    {
        $request = $this->cashInvoiceCreateRequest($culture, $simple_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MessageSent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessageSent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MessageSent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessageSent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashInvoiceCreateAsync
     *
     * To Create a document with SimpleDocument as the parameter
     *
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceCreateAsync($culture, $simple_document)
    {
        return $this->cashInvoiceCreateAsyncWithHttpInfo($culture, $simple_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashInvoiceCreateAsyncWithHttpInfo
     *
     * To Create a document with SimpleDocument as the parameter
     *
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceCreateAsyncWithHttpInfo($culture, $simple_document)
    {
        $returnType = '\OpenAPI\Client\Model\MessageSent';
        $request = $this->cashInvoiceCreateRequest($culture, $simple_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashInvoiceCreate'
     *
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cashInvoiceCreateRequest($culture, $simple_document)
    {
        // verify the required parameter 'culture' is set
        if ($culture === null || (is_array($culture) && count($culture) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $culture when calling cashInvoiceCreate'
            );
        }
        // verify the required parameter 'simple_document' is set
        if ($simple_document === null || (is_array($simple_document) && count($simple_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $simple_document when calling cashInvoiceCreate'
            );
        }

        $resourcePath = '/{culture}/cash-invoices/simple-document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($culture !== null) {
            $resourcePath = str_replace(
                '{' . 'culture' . '}',
                ObjectSerializer::toPathValue($culture),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($simple_document)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($simple_document));
            } else {
                $httpBody = $simple_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer (Reference) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashInvoiceCreate2
     *
     * To Create a document with InlineDocument as the parameter
     *
     * @param  string $culture culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document inline_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\MessageSent
     */
    public function cashInvoiceCreate2($culture, $inline_document)
    {
        list($response) = $this->cashInvoiceCreate2WithHttpInfo($culture, $inline_document);
        return $response;
    }

    /**
     * Operation cashInvoiceCreate2WithHttpInfo
     *
     * To Create a document with InlineDocument as the parameter
     *
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\MessageSent, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashInvoiceCreate2WithHttpInfo($culture, $inline_document)
    {
        $request = $this->cashInvoiceCreate2Request($culture, $inline_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\MessageSent' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\MessageSent', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\MessageSent';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\MessageSent',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashInvoiceCreate2Async
     *
     * To Create a document with InlineDocument as the parameter
     *
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceCreate2Async($culture, $inline_document)
    {
        return $this->cashInvoiceCreate2AsyncWithHttpInfo($culture, $inline_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashInvoiceCreate2AsyncWithHttpInfo
     *
     * To Create a document with InlineDocument as the parameter
     *
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceCreate2AsyncWithHttpInfo($culture, $inline_document)
    {
        $returnType = '\OpenAPI\Client\Model\MessageSent';
        $request = $this->cashInvoiceCreate2Request($culture, $inline_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashInvoiceCreate2'
     *
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cashInvoiceCreate2Request($culture, $inline_document)
    {
        // verify the required parameter 'culture' is set
        if ($culture === null || (is_array($culture) && count($culture) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $culture when calling cashInvoiceCreate2'
            );
        }
        // verify the required parameter 'inline_document' is set
        if ($inline_document === null || (is_array($inline_document) && count($inline_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_document when calling cashInvoiceCreate2'
            );
        }

        $resourcePath = '/{culture}/cash-invoices/inline-document';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($culture !== null) {
            $resourcePath = str_replace(
                '{' . 'culture' . '}',
                ObjectSerializer::toPathValue($culture),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_document)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_document));
            } else {
                $httpBody = $inline_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer (Reference) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashInvoiceDelete
     *
     * To delete the document given a list of documentids
     *
     * @param  int $id id (required)
     * @param  string $culture culture (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cashInvoiceDelete($id, $culture)
    {
        list($response) = $this->cashInvoiceDeleteWithHttpInfo($id, $culture);
        return $response;
    }

    /**
     * Operation cashInvoiceDeleteWithHttpInfo
     *
     * To delete the document given a list of documentids
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashInvoiceDeleteWithHttpInfo($id, $culture)
    {
        $request = $this->cashInvoiceDeleteRequest($id, $culture);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashInvoiceDeleteAsync
     *
     * To delete the document given a list of documentids
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceDeleteAsync($id, $culture)
    {
        return $this->cashInvoiceDeleteAsyncWithHttpInfo($id, $culture)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashInvoiceDeleteAsyncWithHttpInfo
     *
     * To delete the document given a list of documentids
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceDeleteAsyncWithHttpInfo($id, $culture)
    {
        $returnType = '\SplFileObject';
        $request = $this->cashInvoiceDeleteRequest($id, $culture);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashInvoiceDelete'
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cashInvoiceDeleteRequest($id, $culture)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cashInvoiceDelete'
            );
        }
        // verify the required parameter 'culture' is set
        if ($culture === null || (is_array($culture) && count($culture) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $culture when calling cashInvoiceDelete'
            );
        }

        $resourcePath = '/{culture}/cash-invoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($culture !== null) {
            $resourcePath = str_replace(
                '{' . 'culture' . '}',
                ObjectSerializer::toPathValue($culture),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer (Reference) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashInvoiceDetails
     *
     * To get details of a document
     *
     * @param  int $id Sql DocumentId (required)
     * @param  string $culture culture (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cashInvoiceDetails($id, $culture)
    {
        list($response) = $this->cashInvoiceDetailsWithHttpInfo($id, $culture);
        return $response;
    }

    /**
     * Operation cashInvoiceDetailsWithHttpInfo
     *
     * To get details of a document
     *
     * @param  int $id Sql DocumentId (required)
     * @param  string $culture (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashInvoiceDetailsWithHttpInfo($id, $culture)
    {
        $request = $this->cashInvoiceDetailsRequest($id, $culture);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashInvoiceDetailsAsync
     *
     * To get details of a document
     *
     * @param  int $id Sql DocumentId (required)
     * @param  string $culture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceDetailsAsync($id, $culture)
    {
        return $this->cashInvoiceDetailsAsyncWithHttpInfo($id, $culture)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashInvoiceDetailsAsyncWithHttpInfo
     *
     * To get details of a document
     *
     * @param  int $id Sql DocumentId (required)
     * @param  string $culture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceDetailsAsyncWithHttpInfo($id, $culture)
    {
        $returnType = '\SplFileObject';
        $request = $this->cashInvoiceDetailsRequest($id, $culture);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashInvoiceDetails'
     *
     * @param  int $id Sql DocumentId (required)
     * @param  string $culture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cashInvoiceDetailsRequest($id, $culture)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cashInvoiceDetails'
            );
        }
        // verify the required parameter 'culture' is set
        if ($culture === null || (is_array($culture) && count($culture) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $culture when calling cashInvoiceDetails'
            );
        }

        $resourcePath = '/{culture}/cash-invoices/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($culture !== null) {
            $resourcePath = str_replace(
                '{' . 'culture' . '}',
                ObjectSerializer::toPathValue($culture),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer (Reference) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashInvoiceEdit
     *
     * To Update a document with simpleDocument as the parameter
     *
     * @param  int $id id (required)
     * @param  string $culture culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document simple_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cashInvoiceEdit($id, $culture, $simple_document)
    {
        list($response) = $this->cashInvoiceEditWithHttpInfo($id, $culture, $simple_document);
        return $response;
    }

    /**
     * Operation cashInvoiceEditWithHttpInfo
     *
     * To Update a document with simpleDocument as the parameter
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashInvoiceEditWithHttpInfo($id, $culture, $simple_document)
    {
        $request = $this->cashInvoiceEditRequest($id, $culture, $simple_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashInvoiceEditAsync
     *
     * To Update a document with simpleDocument as the parameter
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceEditAsync($id, $culture, $simple_document)
    {
        return $this->cashInvoiceEditAsyncWithHttpInfo($id, $culture, $simple_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashInvoiceEditAsyncWithHttpInfo
     *
     * To Update a document with simpleDocument as the parameter
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceEditAsyncWithHttpInfo($id, $culture, $simple_document)
    {
        $returnType = '\SplFileObject';
        $request = $this->cashInvoiceEditRequest($id, $culture, $simple_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashInvoiceEdit'
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\SimpleDocument $simple_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cashInvoiceEditRequest($id, $culture, $simple_document)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cashInvoiceEdit'
            );
        }
        // verify the required parameter 'culture' is set
        if ($culture === null || (is_array($culture) && count($culture) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $culture when calling cashInvoiceEdit'
            );
        }
        // verify the required parameter 'simple_document' is set
        if ($simple_document === null || (is_array($simple_document) && count($simple_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $simple_document when calling cashInvoiceEdit'
            );
        }

        $resourcePath = '/{culture}/cash-invoices/simple-document/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($culture !== null) {
            $resourcePath = str_replace(
                '{' . 'culture' . '}',
                ObjectSerializer::toPathValue($culture),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($simple_document)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($simple_document));
            } else {
                $httpBody = $simple_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer (Reference) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashInvoiceEdit2
     *
     * To Update a document with inlineDocument as the parameter
     *
     * @param  int $id id (required)
     * @param  string $culture culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document inline_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cashInvoiceEdit2($id, $culture, $inline_document)
    {
        list($response) = $this->cashInvoiceEdit2WithHttpInfo($id, $culture, $inline_document);
        return $response;
    }

    /**
     * Operation cashInvoiceEdit2WithHttpInfo
     *
     * To Update a document with inlineDocument as the parameter
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashInvoiceEdit2WithHttpInfo($id, $culture, $inline_document)
    {
        $request = $this->cashInvoiceEdit2Request($id, $culture, $inline_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashInvoiceEdit2Async
     *
     * To Update a document with inlineDocument as the parameter
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceEdit2Async($id, $culture, $inline_document)
    {
        return $this->cashInvoiceEdit2AsyncWithHttpInfo($id, $culture, $inline_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashInvoiceEdit2AsyncWithHttpInfo
     *
     * To Update a document with inlineDocument as the parameter
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceEdit2AsyncWithHttpInfo($id, $culture, $inline_document)
    {
        $returnType = '\SplFileObject';
        $request = $this->cashInvoiceEdit2Request($id, $culture, $inline_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashInvoiceEdit2'
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\InlineDocument $inline_document (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cashInvoiceEdit2Request($id, $culture, $inline_document)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cashInvoiceEdit2'
            );
        }
        // verify the required parameter 'culture' is set
        if ($culture === null || (is_array($culture) && count($culture) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $culture when calling cashInvoiceEdit2'
            );
        }
        // verify the required parameter 'inline_document' is set
        if ($inline_document === null || (is_array($inline_document) && count($inline_document) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inline_document when calling cashInvoiceEdit2'
            );
        }

        $resourcePath = '/{culture}/cash-invoices/inline-document/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($culture !== null) {
            $resourcePath = str_replace(
                '{' . 'culture' . '}',
                ObjectSerializer::toPathValue($culture),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inline_document)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inline_document));
            } else {
                $httpBody = $inline_document;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer (Reference) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashInvoiceIndex
     *
     * To query for documents.
     *
     * @param  string $culture culture (required)
     * @param  string $sort_by sort_by (optional)
     * @param  string $current_page current_page (optional)
     * @param  string $page_size page_size (optional)
     * @param  string $filter filter (optional)
     * @param  string $search_string search_string (optional)
     * @param  string $custom_document_models custom_document_models (optional)
     * @param  string $range range (optional)
     * @param  string $month month (optional)
     * @param  string $year year (optional)
     * @param  string $start_date start_date (optional)
     * @param  string $end_date end_date (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cashInvoiceIndex($culture, $sort_by = null, $current_page = null, $page_size = null, $filter = null, $search_string = null, $custom_document_models = null, $range = null, $month = null, $year = null, $start_date = null, $end_date = null)
    {
        list($response) = $this->cashInvoiceIndexWithHttpInfo($culture, $sort_by, $current_page, $page_size, $filter, $search_string, $custom_document_models, $range, $month, $year, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation cashInvoiceIndexWithHttpInfo
     *
     * To query for documents.
     *
     * @param  string $culture (required)
     * @param  string $sort_by (optional)
     * @param  string $current_page (optional)
     * @param  string $page_size (optional)
     * @param  string $filter (optional)
     * @param  string $search_string (optional)
     * @param  string $custom_document_models (optional)
     * @param  string $range (optional)
     * @param  string $month (optional)
     * @param  string $year (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashInvoiceIndexWithHttpInfo($culture, $sort_by = null, $current_page = null, $page_size = null, $filter = null, $search_string = null, $custom_document_models = null, $range = null, $month = null, $year = null, $start_date = null, $end_date = null)
    {
        $request = $this->cashInvoiceIndexRequest($culture, $sort_by, $current_page, $page_size, $filter, $search_string, $custom_document_models, $range, $month, $year, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashInvoiceIndexAsync
     *
     * To query for documents.
     *
     * @param  string $culture (required)
     * @param  string $sort_by (optional)
     * @param  string $current_page (optional)
     * @param  string $page_size (optional)
     * @param  string $filter (optional)
     * @param  string $search_string (optional)
     * @param  string $custom_document_models (optional)
     * @param  string $range (optional)
     * @param  string $month (optional)
     * @param  string $year (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceIndexAsync($culture, $sort_by = null, $current_page = null, $page_size = null, $filter = null, $search_string = null, $custom_document_models = null, $range = null, $month = null, $year = null, $start_date = null, $end_date = null)
    {
        return $this->cashInvoiceIndexAsyncWithHttpInfo($culture, $sort_by, $current_page, $page_size, $filter, $search_string, $custom_document_models, $range, $month, $year, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashInvoiceIndexAsyncWithHttpInfo
     *
     * To query for documents.
     *
     * @param  string $culture (required)
     * @param  string $sort_by (optional)
     * @param  string $current_page (optional)
     * @param  string $page_size (optional)
     * @param  string $filter (optional)
     * @param  string $search_string (optional)
     * @param  string $custom_document_models (optional)
     * @param  string $range (optional)
     * @param  string $month (optional)
     * @param  string $year (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceIndexAsyncWithHttpInfo($culture, $sort_by = null, $current_page = null, $page_size = null, $filter = null, $search_string = null, $custom_document_models = null, $range = null, $month = null, $year = null, $start_date = null, $end_date = null)
    {
        $returnType = '\SplFileObject';
        $request = $this->cashInvoiceIndexRequest($culture, $sort_by, $current_page, $page_size, $filter, $search_string, $custom_document_models, $range, $month, $year, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashInvoiceIndex'
     *
     * @param  string $culture (required)
     * @param  string $sort_by (optional)
     * @param  string $current_page (optional)
     * @param  string $page_size (optional)
     * @param  string $filter (optional)
     * @param  string $search_string (optional)
     * @param  string $custom_document_models (optional)
     * @param  string $range (optional)
     * @param  string $month (optional)
     * @param  string $year (optional)
     * @param  string $start_date (optional)
     * @param  string $end_date (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cashInvoiceIndexRequest($culture, $sort_by = null, $current_page = null, $page_size = null, $filter = null, $search_string = null, $custom_document_models = null, $range = null, $month = null, $year = null, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'culture' is set
        if ($culture === null || (is_array($culture) && count($culture) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $culture when calling cashInvoiceIndex'
            );
        }

        $resourcePath = '/{culture}/cash-invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sort_by !== null) {
            if('form' === 'form' && is_array($sort_by)) {
                foreach($sort_by as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['SortBy'] = $sort_by;
            }
        }
        // query params
        if ($current_page !== null) {
            if('form' === 'form' && is_array($current_page)) {
                foreach($current_page as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['CurrentPage'] = $current_page;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['PageSize'] = $page_size;
            }
        }
        // query params
        if ($filter !== null) {
            if('form' === 'form' && is_array($filter)) {
                foreach($filter as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['Filter'] = $filter;
            }
        }
        // query params
        if ($search_string !== null) {
            if('form' === 'form' && is_array($search_string)) {
                foreach($search_string as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['SearchString'] = $search_string;
            }
        }
        // query params
        if ($custom_document_models !== null) {
            if('form' === 'form' && is_array($custom_document_models)) {
                foreach($custom_document_models as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['CustomDocumentModels'] = $custom_document_models;
            }
        }
        // query params
        if ($range !== null) {
            if('form' === 'form' && is_array($range)) {
                foreach($range as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['Range'] = $range;
            }
        }
        // query params
        if ($month !== null) {
            if('form' === 'form' && is_array($month)) {
                foreach($month as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['Month'] = $month;
            }
        }
        // query params
        if ($year !== null) {
            if('form' === 'form' && is_array($year)) {
                foreach($year as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['Year'] = $year;
            }
        }
        // query params
        if ($start_date !== null) {
            if('form' === 'form' && is_array($start_date)) {
                foreach($start_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['StartDate'] = $start_date;
            }
        }
        // query params
        if ($end_date !== null) {
            if('form' === 'form' && is_array($end_date)) {
                foreach($end_date as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['EndDate'] = $end_date;
            }
        }


        // path params
        if ($culture !== null) {
            $resourcePath = str_replace(
                '{' . 'culture' . '}',
                ObjectSerializer::toPathValue($culture),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer (Reference) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cashInvoiceReceivePayment
     *
     * To Accept payment with the paymentModel
     *
     * @param  int $id id (required)
     * @param  string $culture culture (required)
     * @param  \OpenAPI\Client\Model\PaymentModel $payment_model payment_model (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function cashInvoiceReceivePayment($id, $culture, $payment_model)
    {
        list($response) = $this->cashInvoiceReceivePaymentWithHttpInfo($id, $culture, $payment_model);
        return $response;
    }

    /**
     * Operation cashInvoiceReceivePaymentWithHttpInfo
     *
     * To Accept payment with the paymentModel
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\PaymentModel $payment_model (required)
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function cashInvoiceReceivePaymentWithHttpInfo($id, $culture, $payment_model)
    {
        $request = $this->cashInvoiceReceivePaymentRequest($id, $culture, $payment_model);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cashInvoiceReceivePaymentAsync
     *
     * To Accept payment with the paymentModel
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\PaymentModel $payment_model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceReceivePaymentAsync($id, $culture, $payment_model)
    {
        return $this->cashInvoiceReceivePaymentAsyncWithHttpInfo($id, $culture, $payment_model)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cashInvoiceReceivePaymentAsyncWithHttpInfo
     *
     * To Accept payment with the paymentModel
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\PaymentModel $payment_model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cashInvoiceReceivePaymentAsyncWithHttpInfo($id, $culture, $payment_model)
    {
        $returnType = '\SplFileObject';
        $request = $this->cashInvoiceReceivePaymentRequest($id, $culture, $payment_model);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cashInvoiceReceivePayment'
     *
     * @param  int $id (required)
     * @param  string $culture (required)
     * @param  \OpenAPI\Client\Model\PaymentModel $payment_model (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cashInvoiceReceivePaymentRequest($id, $culture, $payment_model)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling cashInvoiceReceivePayment'
            );
        }
        // verify the required parameter 'culture' is set
        if ($culture === null || (is_array($culture) && count($culture) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $culture when calling cashInvoiceReceivePayment'
            );
        }
        // verify the required parameter 'payment_model' is set
        if ($payment_model === null || (is_array($payment_model) && count($payment_model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_model when calling cashInvoiceReceivePayment'
            );
        }

        $resourcePath = '/{culture}/cash-invoices/{id}/payments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($culture !== null) {
            $resourcePath = str_replace(
                '{' . 'culture' . '}',
                ObjectSerializer::toPathValue($culture),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($payment_model)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($payment_model));
            } else {
                $httpBody = $payment_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires Bearer (Reference) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
