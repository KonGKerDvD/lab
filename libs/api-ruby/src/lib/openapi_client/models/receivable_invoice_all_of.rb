=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ReceivableInvoiceAllOf
    attr_accessor :id

    attr_accessor :contact_id

    attr_accessor :company_id

    attr_accessor :status

    attr_accessor :created_on

    attr_accessor :modified_on

    attr_accessor :published_on

    attr_accessor :document_date

    attr_accessor :published

    attr_accessor :approved

    attr_accessor :approved_by

    attr_accessor :approved_by_client_id

    attr_accessor :approved_image_url

    attr_accessor :document_serial

    attr_accessor :remarks

    attr_accessor :name

    attr_accessor :value

    attr_accessor :due_date

    attr_accessor :expected_date

    attr_accessor :created_by

    attr_accessor :document_id

    attr_accessor :is_delete

    attr_accessor :vat_rate

    attr_accessor :internal_notes

    attr_accessor :gallery_id

    attr_accessor :is_vat_inclusive

    attr_accessor :sales_id

    attr_accessor :sales_name

    attr_accessor :rounding_adjustment

    attr_accessor :is_inline_discount

    attr_accessor :is_inline_vat

    attr_accessor :tax

    attr_accessor :document_serial_no_prefix

    attr_accessor :vat_value

    attr_accessor :reset_transaction_id

    attr_accessor :contact

    attr_accessor :approved_by_client

    attr_accessor :company

    attr_accessor :created_by_user

    attr_accessor :approved_by_user

    attr_accessor :sales

    attr_accessor :gallery

    attr_accessor :inline_vat_value

    attr_accessor :inline_discount_value

    attr_accessor :rule_compile_status

    attr_accessor :running_number_type

    attr_accessor :running_modified_on

    attr_accessor :exempt_amount

    attr_accessor :vatable_amount

    attr_accessor :total_after_discount

    attr_accessor :sub_total

    attr_accessor :document_references

    attr_accessor :referenced_to_me

    attr_accessor :referenced_by_me

    attr_accessor :status_int

    attr_accessor :is_re_calculate

    attr_accessor :partial_payment_method

    attr_accessor :vat_amount

    attr_accessor :is_migrate

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'contact_id' => :'contactId',
        :'company_id' => :'companyId',
        :'status' => :'status',
        :'created_on' => :'createdOn',
        :'modified_on' => :'modifiedOn',
        :'published_on' => :'publishedOn',
        :'document_date' => :'documentDate',
        :'published' => :'published',
        :'approved' => :'approved',
        :'approved_by' => :'approvedBy',
        :'approved_by_client_id' => :'approvedByClientId',
        :'approved_image_url' => :'approvedImageUrl',
        :'document_serial' => :'documentSerial',
        :'remarks' => :'remarks',
        :'name' => :'name',
        :'value' => :'value',
        :'due_date' => :'dueDate',
        :'expected_date' => :'expectedDate',
        :'created_by' => :'createdBy',
        :'document_id' => :'documentId',
        :'is_delete' => :'isDelete',
        :'vat_rate' => :'vatRate',
        :'internal_notes' => :'internalNotes',
        :'gallery_id' => :'galleryId',
        :'is_vat_inclusive' => :'isVatInclusive',
        :'sales_id' => :'salesId',
        :'sales_name' => :'salesName',
        :'rounding_adjustment' => :'roundingAdjustment',
        :'is_inline_discount' => :'isInlineDiscount',
        :'is_inline_vat' => :'isInlineVat',
        :'tax' => :'tax',
        :'document_serial_no_prefix' => :'documentSerialNoPrefix',
        :'vat_value' => :'vatValue',
        :'reset_transaction_id' => :'resetTransactionId',
        :'contact' => :'contact',
        :'approved_by_client' => :'approvedByClient',
        :'company' => :'company',
        :'created_by_user' => :'createdByUser',
        :'approved_by_user' => :'approvedByUser',
        :'sales' => :'sales',
        :'gallery' => :'gallery',
        :'inline_vat_value' => :'inlineVatValue',
        :'inline_discount_value' => :'inlineDiscountValue',
        :'rule_compile_status' => :'ruleCompileStatus',
        :'running_number_type' => :'runningNumberType',
        :'running_modified_on' => :'runningModifiedOn',
        :'exempt_amount' => :'exemptAmount',
        :'vatable_amount' => :'vatableAmount',
        :'total_after_discount' => :'totalAfterDiscount',
        :'sub_total' => :'subTotal',
        :'document_references' => :'documentReferences',
        :'referenced_to_me' => :'referencedToMe',
        :'referenced_by_me' => :'referencedByMe',
        :'status_int' => :'statusInt',
        :'is_re_calculate' => :'isReCalculate',
        :'partial_payment_method' => :'partialPaymentMethod',
        :'vat_amount' => :'vatAmount',
        :'is_migrate' => :'isMigrate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'contact_id' => :'Integer',
        :'company_id' => :'Integer',
        :'status' => :'ReceivableInvoiceStatus',
        :'created_on' => :'Time',
        :'modified_on' => :'Time',
        :'published_on' => :'Time',
        :'document_date' => :'Time',
        :'published' => :'Boolean',
        :'approved' => :'Boolean',
        :'approved_by' => :'Integer',
        :'approved_by_client_id' => :'Integer',
        :'approved_image_url' => :'String',
        :'document_serial' => :'String',
        :'remarks' => :'String',
        :'name' => :'String',
        :'value' => :'Float',
        :'due_date' => :'Time',
        :'expected_date' => :'Time',
        :'created_by' => :'Integer',
        :'document_id' => :'String',
        :'is_delete' => :'Boolean',
        :'vat_rate' => :'Integer',
        :'internal_notes' => :'String',
        :'gallery_id' => :'Integer',
        :'is_vat_inclusive' => :'Boolean',
        :'sales_id' => :'Integer',
        :'sales_name' => :'String',
        :'rounding_adjustment' => :'Float',
        :'is_inline_discount' => :'Boolean',
        :'is_inline_vat' => :'Boolean',
        :'tax' => :'Float',
        :'document_serial_no_prefix' => :'Integer',
        :'vat_value' => :'Float',
        :'reset_transaction_id' => :'Integer',
        :'contact' => :'OneOfContact',
        :'approved_by_client' => :'OneOfUser',
        :'company' => :'OneOfCompany',
        :'created_by_user' => :'OneOfUser',
        :'approved_by_user' => :'OneOfUser',
        :'sales' => :'OneOfUser',
        :'gallery' => :'OneOfGallery',
        :'inline_vat_value' => :'Float',
        :'inline_discount_value' => :'Float',
        :'rule_compile_status' => :'RuleCompileStatus',
        :'running_number_type' => :'Integer',
        :'running_modified_on' => :'Time',
        :'exempt_amount' => :'Float',
        :'vatable_amount' => :'Float',
        :'total_after_discount' => :'Float',
        :'sub_total' => :'Float',
        :'document_references' => :'Array<IDocumentReference>',
        :'referenced_to_me' => :'Array<IDocumentReference>',
        :'referenced_by_me' => :'Array<IDocumentReference>',
        :'status_int' => :'Integer',
        :'is_re_calculate' => :'Boolean',
        :'partial_payment_method' => :'OneOfPartialPaymentMethod',
        :'vat_amount' => :'Float',
        :'is_migrate' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'approved_by',
        :'approved_by_client_id',
        :'approved_image_url',
        :'document_serial',
        :'remarks',
        :'name',
        :'due_date',
        :'expected_date',
        :'document_id',
        :'internal_notes',
        :'gallery_id',
        :'sales_id',
        :'sales_name',
        :'tax',
        :'document_serial_no_prefix',
        :'vat_value',
        :'reset_transaction_id',
        :'contact',
        :'approved_by_client',
        :'company',
        :'created_by_user',
        :'approved_by_user',
        :'sales',
        :'gallery',
        :'running_modified_on',
        :'document_references',
        :'referenced_to_me',
        :'referenced_by_me',
        :'partial_payment_method',
        :'vat_amount',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ReceivableInvoiceAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ReceivableInvoiceAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'contact_id')
        self.contact_id = attributes[:'contact_id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'published_on')
        self.published_on = attributes[:'published_on']
      end

      if attributes.key?(:'document_date')
        self.document_date = attributes[:'document_date']
      end

      if attributes.key?(:'published')
        self.published = attributes[:'published']
      end

      if attributes.key?(:'approved')
        self.approved = attributes[:'approved']
      end

      if attributes.key?(:'approved_by')
        self.approved_by = attributes[:'approved_by']
      end

      if attributes.key?(:'approved_by_client_id')
        self.approved_by_client_id = attributes[:'approved_by_client_id']
      end

      if attributes.key?(:'approved_image_url')
        self.approved_image_url = attributes[:'approved_image_url']
      end

      if attributes.key?(:'document_serial')
        self.document_serial = attributes[:'document_serial']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'expected_date')
        self.expected_date = attributes[:'expected_date']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'document_id')
        self.document_id = attributes[:'document_id']
      end

      if attributes.key?(:'is_delete')
        self.is_delete = attributes[:'is_delete']
      end

      if attributes.key?(:'vat_rate')
        self.vat_rate = attributes[:'vat_rate']
      end

      if attributes.key?(:'internal_notes')
        self.internal_notes = attributes[:'internal_notes']
      end

      if attributes.key?(:'gallery_id')
        self.gallery_id = attributes[:'gallery_id']
      end

      if attributes.key?(:'is_vat_inclusive')
        self.is_vat_inclusive = attributes[:'is_vat_inclusive']
      end

      if attributes.key?(:'sales_id')
        self.sales_id = attributes[:'sales_id']
      end

      if attributes.key?(:'sales_name')
        self.sales_name = attributes[:'sales_name']
      end

      if attributes.key?(:'rounding_adjustment')
        self.rounding_adjustment = attributes[:'rounding_adjustment']
      end

      if attributes.key?(:'is_inline_discount')
        self.is_inline_discount = attributes[:'is_inline_discount']
      else
        self.is_inline_discount = false
      end

      if attributes.key?(:'is_inline_vat')
        self.is_inline_vat = attributes[:'is_inline_vat']
      else
        self.is_inline_vat = false
      end

      if attributes.key?(:'tax')
        self.tax = attributes[:'tax']
      end

      if attributes.key?(:'document_serial_no_prefix')
        self.document_serial_no_prefix = attributes[:'document_serial_no_prefix']
      end

      if attributes.key?(:'vat_value')
        self.vat_value = attributes[:'vat_value']
      end

      if attributes.key?(:'reset_transaction_id')
        self.reset_transaction_id = attributes[:'reset_transaction_id']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'approved_by_client')
        self.approved_by_client = attributes[:'approved_by_client']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'created_by_user')
        self.created_by_user = attributes[:'created_by_user']
      end

      if attributes.key?(:'approved_by_user')
        self.approved_by_user = attributes[:'approved_by_user']
      end

      if attributes.key?(:'sales')
        self.sales = attributes[:'sales']
      end

      if attributes.key?(:'gallery')
        self.gallery = attributes[:'gallery']
      end

      if attributes.key?(:'inline_vat_value')
        self.inline_vat_value = attributes[:'inline_vat_value']
      end

      if attributes.key?(:'inline_discount_value')
        self.inline_discount_value = attributes[:'inline_discount_value']
      end

      if attributes.key?(:'rule_compile_status')
        self.rule_compile_status = attributes[:'rule_compile_status']
      end

      if attributes.key?(:'running_number_type')
        self.running_number_type = attributes[:'running_number_type']
      end

      if attributes.key?(:'running_modified_on')
        self.running_modified_on = attributes[:'running_modified_on']
      end

      if attributes.key?(:'exempt_amount')
        self.exempt_amount = attributes[:'exempt_amount']
      end

      if attributes.key?(:'vatable_amount')
        self.vatable_amount = attributes[:'vatable_amount']
      end

      if attributes.key?(:'total_after_discount')
        self.total_after_discount = attributes[:'total_after_discount']
      end

      if attributes.key?(:'sub_total')
        self.sub_total = attributes[:'sub_total']
      end

      if attributes.key?(:'document_references')
        if (value = attributes[:'document_references']).is_a?(Array)
          self.document_references = value
        end
      end

      if attributes.key?(:'referenced_to_me')
        if (value = attributes[:'referenced_to_me']).is_a?(Array)
          self.referenced_to_me = value
        end
      end

      if attributes.key?(:'referenced_by_me')
        if (value = attributes[:'referenced_by_me']).is_a?(Array)
          self.referenced_by_me = value
        end
      end

      if attributes.key?(:'status_int')
        self.status_int = attributes[:'status_int']
      end

      if attributes.key?(:'is_re_calculate')
        self.is_re_calculate = attributes[:'is_re_calculate']
      end

      if attributes.key?(:'partial_payment_method')
        self.partial_payment_method = attributes[:'partial_payment_method']
      end

      if attributes.key?(:'vat_amount')
        self.vat_amount = attributes[:'vat_amount']
      end

      if attributes.key?(:'is_migrate')
        self.is_migrate = attributes[:'is_migrate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @company_id.nil?
        invalid_properties.push('invalid value for "company_id", company_id cannot be nil.')
      end

      if @created_on.nil?
        invalid_properties.push('invalid value for "created_on", created_on cannot be nil.')
      end

      if @created_on.to_s.length < 1
        invalid_properties.push('invalid value for "created_on", the character length must be great than or equal to 1.')
      end

      if @modified_on.nil?
        invalid_properties.push('invalid value for "modified_on", modified_on cannot be nil.')
      end

      if @modified_on.to_s.length < 1
        invalid_properties.push('invalid value for "modified_on", the character length must be great than or equal to 1.')
      end

      if @published_on.nil?
        invalid_properties.push('invalid value for "published_on", published_on cannot be nil.')
      end

      if @published_on.to_s.length < 1
        invalid_properties.push('invalid value for "published_on", the character length must be great than or equal to 1.')
      end

      if @document_date.nil?
        invalid_properties.push('invalid value for "document_date", document_date cannot be nil.')
      end

      if @document_date.to_s.length < 1
        invalid_properties.push('invalid value for "document_date", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @company_id.nil?
      return false if @created_on.nil?
      return false if @created_on.to_s.length < 1
      return false if @modified_on.nil?
      return false if @modified_on.to_s.length < 1
      return false if @published_on.nil?
      return false if @published_on.to_s.length < 1
      return false if @document_date.nil?
      return false if @document_date.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] created_on Value to be assigned
    def created_on=(created_on)
      if created_on.nil?
        fail ArgumentError, 'created_on cannot be nil'
      end

      if created_on.to_s.length < 1
        fail ArgumentError, 'invalid value for "created_on", the character length must be great than or equal to 1.'
      end

      @created_on = created_on
    end

    # Custom attribute writer method with validation
    # @param [Object] modified_on Value to be assigned
    def modified_on=(modified_on)
      if modified_on.nil?
        fail ArgumentError, 'modified_on cannot be nil'
      end

      if modified_on.to_s.length < 1
        fail ArgumentError, 'invalid value for "modified_on", the character length must be great than or equal to 1.'
      end

      @modified_on = modified_on
    end

    # Custom attribute writer method with validation
    # @param [Object] published_on Value to be assigned
    def published_on=(published_on)
      if published_on.nil?
        fail ArgumentError, 'published_on cannot be nil'
      end

      if published_on.to_s.length < 1
        fail ArgumentError, 'invalid value for "published_on", the character length must be great than or equal to 1.'
      end

      @published_on = published_on
    end

    # Custom attribute writer method with validation
    # @param [Object] document_date Value to be assigned
    def document_date=(document_date)
      if document_date.nil?
        fail ArgumentError, 'document_date cannot be nil'
      end

      if document_date.to_s.length < 1
        fail ArgumentError, 'invalid value for "document_date", the character length must be great than or equal to 1.'
      end

      @document_date = document_date
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          contact_id == o.contact_id &&
          company_id == o.company_id &&
          status == o.status &&
          created_on == o.created_on &&
          modified_on == o.modified_on &&
          published_on == o.published_on &&
          document_date == o.document_date &&
          published == o.published &&
          approved == o.approved &&
          approved_by == o.approved_by &&
          approved_by_client_id == o.approved_by_client_id &&
          approved_image_url == o.approved_image_url &&
          document_serial == o.document_serial &&
          remarks == o.remarks &&
          name == o.name &&
          value == o.value &&
          due_date == o.due_date &&
          expected_date == o.expected_date &&
          created_by == o.created_by &&
          document_id == o.document_id &&
          is_delete == o.is_delete &&
          vat_rate == o.vat_rate &&
          internal_notes == o.internal_notes &&
          gallery_id == o.gallery_id &&
          is_vat_inclusive == o.is_vat_inclusive &&
          sales_id == o.sales_id &&
          sales_name == o.sales_name &&
          rounding_adjustment == o.rounding_adjustment &&
          is_inline_discount == o.is_inline_discount &&
          is_inline_vat == o.is_inline_vat &&
          tax == o.tax &&
          document_serial_no_prefix == o.document_serial_no_prefix &&
          vat_value == o.vat_value &&
          reset_transaction_id == o.reset_transaction_id &&
          contact == o.contact &&
          approved_by_client == o.approved_by_client &&
          company == o.company &&
          created_by_user == o.created_by_user &&
          approved_by_user == o.approved_by_user &&
          sales == o.sales &&
          gallery == o.gallery &&
          inline_vat_value == o.inline_vat_value &&
          inline_discount_value == o.inline_discount_value &&
          rule_compile_status == o.rule_compile_status &&
          running_number_type == o.running_number_type &&
          running_modified_on == o.running_modified_on &&
          exempt_amount == o.exempt_amount &&
          vatable_amount == o.vatable_amount &&
          total_after_discount == o.total_after_discount &&
          sub_total == o.sub_total &&
          document_references == o.document_references &&
          referenced_to_me == o.referenced_to_me &&
          referenced_by_me == o.referenced_by_me &&
          status_int == o.status_int &&
          is_re_calculate == o.is_re_calculate &&
          partial_payment_method == o.partial_payment_method &&
          vat_amount == o.vat_amount &&
          is_migrate == o.is_migrate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, contact_id, company_id, status, created_on, modified_on, published_on, document_date, published, approved, approved_by, approved_by_client_id, approved_image_url, document_serial, remarks, name, value, due_date, expected_date, created_by, document_id, is_delete, vat_rate, internal_notes, gallery_id, is_vat_inclusive, sales_id, sales_name, rounding_adjustment, is_inline_discount, is_inline_vat, tax, document_serial_no_prefix, vat_value, reset_transaction_id, contact, approved_by_client, company, created_by_user, approved_by_user, sales, gallery, inline_vat_value, inline_discount_value, rule_compile_status, running_number_type, running_modified_on, exempt_amount, vatable_amount, total_after_discount, sub_total, document_references, referenced_to_me, referenced_by_me, status_int, is_re_calculate, partial_payment_method, vat_amount, is_migrate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
