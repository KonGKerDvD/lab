=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class CompanySubscription
    attr_accessor :id

    attr_accessor :company_id

    attr_accessor :package_id

    attr_accessor :package_status

    attr_accessor :transaction_date

    attr_accessor :transaction_id

    attr_accessor :expiration_date

    attr_accessor :coupon_id

    attr_accessor :paid_by

    attr_accessor :created_on

    attr_accessor :modified_on

    attr_accessor :days

    attr_accessor :package_days

    attr_accessor :quantity

    attr_accessor :type

    attr_accessor :payment_channel

    attr_accessor :value

    attr_accessor :is_withheld

    attr_accessor :withheld

    attr_accessor :internal_file

    attr_accessor :invoice_id

    attr_accessor :remarks

    attr_accessor :is_request_invoice

    attr_accessor :add_on

    attr_accessor :package_list

    attr_accessor :pay_slip_image_date

    attr_accessor :pay_slip_image_time

    attr_accessor :pay_slip_image_amount

    attr_accessor :pay_slip_image_contact

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'company_id' => :'companyId',
        :'package_id' => :'packageId',
        :'package_status' => :'packageStatus',
        :'transaction_date' => :'transactionDate',
        :'transaction_id' => :'transactionId',
        :'expiration_date' => :'expirationDate',
        :'coupon_id' => :'couponId',
        :'paid_by' => :'paidBy',
        :'created_on' => :'createdOn',
        :'modified_on' => :'modifiedOn',
        :'days' => :'days',
        :'package_days' => :'packageDays',
        :'quantity' => :'quantity',
        :'type' => :'type',
        :'payment_channel' => :'paymentChannel',
        :'value' => :'value',
        :'is_withheld' => :'isWithheld',
        :'withheld' => :'withheld',
        :'internal_file' => :'internalFile',
        :'invoice_id' => :'invoiceId',
        :'remarks' => :'remarks',
        :'is_request_invoice' => :'isRequestInvoice',
        :'add_on' => :'addOn',
        :'package_list' => :'packageList',
        :'pay_slip_image_date' => :'paySlipImageDate',
        :'pay_slip_image_time' => :'paySlipImageTime',
        :'pay_slip_image_amount' => :'paySlipImageAmount',
        :'pay_slip_image_contact' => :'paySlipImageContact'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'company_id' => :'Integer',
        :'package_id' => :'Integer',
        :'package_status' => :'PackageStatus',
        :'transaction_date' => :'Time',
        :'transaction_id' => :'String',
        :'expiration_date' => :'Time',
        :'coupon_id' => :'Integer',
        :'paid_by' => :'Integer',
        :'created_on' => :'Time',
        :'modified_on' => :'Time',
        :'days' => :'Integer',
        :'package_days' => :'Integer',
        :'quantity' => :'Integer',
        :'type' => :'UpgradeType',
        :'payment_channel' => :'OneOfPaymentChannel',
        :'value' => :'Float',
        :'is_withheld' => :'Boolean',
        :'withheld' => :'Float',
        :'internal_file' => :'String',
        :'invoice_id' => :'Integer',
        :'remarks' => :'String',
        :'is_request_invoice' => :'Boolean',
        :'add_on' => :'String',
        :'package_list' => :'OneOfPackageList',
        :'pay_slip_image_date' => :'Time',
        :'pay_slip_image_time' => :'String',
        :'pay_slip_image_amount' => :'Float',
        :'pay_slip_image_contact' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'transaction_id',
        :'coupon_id',
        :'quantity',
        :'payment_channel',
        :'value',
        :'withheld',
        :'internal_file',
        :'invoice_id',
        :'remarks',
        :'is_request_invoice',
        :'add_on',
        :'package_list',
        :'pay_slip_image_date',
        :'pay_slip_image_time',
        :'pay_slip_image_amount',
        :'pay_slip_image_contact'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::CompanySubscription` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::CompanySubscription`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'package_id')
        self.package_id = attributes[:'package_id']
      end

      if attributes.key?(:'package_status')
        self.package_status = attributes[:'package_status']
      end

      if attributes.key?(:'transaction_date')
        self.transaction_date = attributes[:'transaction_date']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'expiration_date')
        self.expiration_date = attributes[:'expiration_date']
      end

      if attributes.key?(:'coupon_id')
        self.coupon_id = attributes[:'coupon_id']
      end

      if attributes.key?(:'paid_by')
        self.paid_by = attributes[:'paid_by']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'days')
        self.days = attributes[:'days']
      end

      if attributes.key?(:'package_days')
        self.package_days = attributes[:'package_days']
      end

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'payment_channel')
        self.payment_channel = attributes[:'payment_channel']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'is_withheld')
        self.is_withheld = attributes[:'is_withheld']
      end

      if attributes.key?(:'withheld')
        self.withheld = attributes[:'withheld']
      end

      if attributes.key?(:'internal_file')
        self.internal_file = attributes[:'internal_file']
      end

      if attributes.key?(:'invoice_id')
        self.invoice_id = attributes[:'invoice_id']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'is_request_invoice')
        self.is_request_invoice = attributes[:'is_request_invoice']
      end

      if attributes.key?(:'add_on')
        self.add_on = attributes[:'add_on']
      end

      if attributes.key?(:'package_list')
        self.package_list = attributes[:'package_list']
      end

      if attributes.key?(:'pay_slip_image_date')
        self.pay_slip_image_date = attributes[:'pay_slip_image_date']
      end

      if attributes.key?(:'pay_slip_image_time')
        self.pay_slip_image_time = attributes[:'pay_slip_image_time']
      end

      if attributes.key?(:'pay_slip_image_amount')
        self.pay_slip_image_amount = attributes[:'pay_slip_image_amount']
      end

      if attributes.key?(:'pay_slip_image_contact')
        self.pay_slip_image_contact = attributes[:'pay_slip_image_contact']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          company_id == o.company_id &&
          package_id == o.package_id &&
          package_status == o.package_status &&
          transaction_date == o.transaction_date &&
          transaction_id == o.transaction_id &&
          expiration_date == o.expiration_date &&
          coupon_id == o.coupon_id &&
          paid_by == o.paid_by &&
          created_on == o.created_on &&
          modified_on == o.modified_on &&
          days == o.days &&
          package_days == o.package_days &&
          quantity == o.quantity &&
          type == o.type &&
          payment_channel == o.payment_channel &&
          value == o.value &&
          is_withheld == o.is_withheld &&
          withheld == o.withheld &&
          internal_file == o.internal_file &&
          invoice_id == o.invoice_id &&
          remarks == o.remarks &&
          is_request_invoice == o.is_request_invoice &&
          add_on == o.add_on &&
          package_list == o.package_list &&
          pay_slip_image_date == o.pay_slip_image_date &&
          pay_slip_image_time == o.pay_slip_image_time &&
          pay_slip_image_amount == o.pay_slip_image_amount &&
          pay_slip_image_contact == o.pay_slip_image_contact
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, company_id, package_id, package_status, transaction_date, transaction_id, expiration_date, coupon_id, paid_by, created_on, modified_on, days, package_days, quantity, type, payment_channel, value, is_withheld, withheld, internal_file, invoice_id, remarks, is_request_invoice, add_on, package_list, pay_slip_image_date, pay_slip_image_time, pay_slip_image_amount, pay_slip_image_contact].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
