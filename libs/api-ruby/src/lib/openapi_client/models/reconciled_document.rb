=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ReconciledDocument
    attr_accessor :document_id

    attr_accessor :document_type

    attr_accessor :transaction_id

    attr_accessor :amount

    attr_accessor :from_account

    attr_accessor :channel

    attr_accessor :description

    attr_accessor :account_number

    attr_accessor :bank_id

    attr_accessor :company_id

    attr_accessor :bank

    attr_accessor :company

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'document_id' => :'documentId',
        :'document_type' => :'documentType',
        :'transaction_id' => :'transactionId',
        :'amount' => :'amount',
        :'from_account' => :'fromAccount',
        :'channel' => :'channel',
        :'description' => :'description',
        :'account_number' => :'accountNumber',
        :'bank_id' => :'bankId',
        :'company_id' => :'companyId',
        :'bank' => :'bank',
        :'company' => :'company'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'document_id' => :'Integer',
        :'document_type' => :'DocumentTypes',
        :'transaction_id' => :'String',
        :'amount' => :'Float',
        :'from_account' => :'String',
        :'channel' => :'String',
        :'description' => :'String',
        :'account_number' => :'String',
        :'bank_id' => :'Integer',
        :'company_id' => :'Integer',
        :'bank' => :'OneOfBank',
        :'company' => :'OneOfCompany'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'transaction_id',
        :'from_account',
        :'channel',
        :'description',
        :'bank',
        :'company'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ReconciledDocument` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ReconciledDocument`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'document_id')
        self.document_id = attributes[:'document_id']
      end

      if attributes.key?(:'document_type')
        self.document_type = attributes[:'document_type']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'from_account')
        self.from_account = attributes[:'from_account']
      end

      if attributes.key?(:'channel')
        self.channel = attributes[:'channel']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'bank_id')
        self.bank_id = attributes[:'bank_id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'bank')
        self.bank = attributes[:'bank']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@transaction_id.nil? && @transaction_id.to_s.length > 255
        invalid_properties.push('invalid value for "transaction_id", the character length must be smaller than or equal to 255.')
      end

      if !@transaction_id.nil? && @transaction_id.to_s.length < 0
        invalid_properties.push('invalid value for "transaction_id", the character length must be great than or equal to 0.')
      end

      if @account_number.nil?
        invalid_properties.push('invalid value for "account_number", account_number cannot be nil.')
      end

      if @account_number.to_s.length > 255
        invalid_properties.push('invalid value for "account_number", the character length must be smaller than or equal to 255.')
      end

      if @account_number.to_s.length < 0
        invalid_properties.push('invalid value for "account_number", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@transaction_id.nil? && @transaction_id.to_s.length > 255
      return false if !@transaction_id.nil? && @transaction_id.to_s.length < 0
      return false if @account_number.nil?
      return false if @account_number.to_s.length > 255
      return false if @account_number.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_id Value to be assigned
    def transaction_id=(transaction_id)
      if !transaction_id.nil? && transaction_id.to_s.length > 255
        fail ArgumentError, 'invalid value for "transaction_id", the character length must be smaller than or equal to 255.'
      end

      if !transaction_id.nil? && transaction_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "transaction_id", the character length must be great than or equal to 0.'
      end

      @transaction_id = transaction_id
    end

    # Custom attribute writer method with validation
    # @param [Object] account_number Value to be assigned
    def account_number=(account_number)
      if account_number.nil?
        fail ArgumentError, 'account_number cannot be nil'
      end

      if account_number.to_s.length > 255
        fail ArgumentError, 'invalid value for "account_number", the character length must be smaller than or equal to 255.'
      end

      if account_number.to_s.length < 0
        fail ArgumentError, 'invalid value for "account_number", the character length must be great than or equal to 0.'
      end

      @account_number = account_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          document_id == o.document_id &&
          document_type == o.document_type &&
          transaction_id == o.transaction_id &&
          amount == o.amount &&
          from_account == o.from_account &&
          channel == o.channel &&
          description == o.description &&
          account_number == o.account_number &&
          bank_id == o.bank_id &&
          company_id == o.company_id &&
          bank == o.bank &&
          company == o.company
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [document_id, document_type, transaction_id, amount, from_account, channel, description, account_number, bank_id, company_id, bank, company].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
