=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class SupplierInvoice
    attr_accessor :id

    attr_accessor :company_id

    attr_accessor :document_date

    attr_accessor :document_serial

    attr_accessor :contact_name

    attr_accessor :contact_tax_id

    attr_accessor :contact_branch

    attr_accessor :is_delete

    attr_accessor :gallery_id

    attr_accessor :reference_document_id

    attr_accessor :reference_document_type

    attr_accessor :created_by

    attr_accessor :modified_by

    attr_accessor :created_on

    attr_accessor :modified_on

    attr_accessor :company

    attr_accessor :created_by_user

    attr_accessor :modified_by_user

    attr_accessor :gallery

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'company_id' => :'companyId',
        :'document_date' => :'documentDate',
        :'document_serial' => :'documentSerial',
        :'contact_name' => :'contactName',
        :'contact_tax_id' => :'contactTaxId',
        :'contact_branch' => :'contactBranch',
        :'is_delete' => :'isDelete',
        :'gallery_id' => :'galleryId',
        :'reference_document_id' => :'referenceDocumentId',
        :'reference_document_type' => :'referenceDocumentType',
        :'created_by' => :'createdBy',
        :'modified_by' => :'modifiedBy',
        :'created_on' => :'createdOn',
        :'modified_on' => :'modifiedOn',
        :'company' => :'company',
        :'created_by_user' => :'createdByUser',
        :'modified_by_user' => :'modifiedByUser',
        :'gallery' => :'gallery'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'company_id' => :'Integer',
        :'document_date' => :'Time',
        :'document_serial' => :'String',
        :'contact_name' => :'String',
        :'contact_tax_id' => :'String',
        :'contact_branch' => :'String',
        :'is_delete' => :'Boolean',
        :'gallery_id' => :'Integer',
        :'reference_document_id' => :'Integer',
        :'reference_document_type' => :'DocumentTypes',
        :'created_by' => :'Integer',
        :'modified_by' => :'Integer',
        :'created_on' => :'Time',
        :'modified_on' => :'Time',
        :'company' => :'OneOfCompany',
        :'created_by_user' => :'OneOfUser',
        :'modified_by_user' => :'OneOfUser',
        :'gallery' => :'OneOfGallery'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'document_serial',
        :'contact_name',
        :'contact_tax_id',
        :'contact_branch',
        :'gallery_id',
        :'company',
        :'created_by_user',
        :'modified_by_user',
        :'gallery'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SupplierInvoice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SupplierInvoice`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'document_date')
        self.document_date = attributes[:'document_date']
      end

      if attributes.key?(:'document_serial')
        self.document_serial = attributes[:'document_serial']
      end

      if attributes.key?(:'contact_name')
        self.contact_name = attributes[:'contact_name']
      end

      if attributes.key?(:'contact_tax_id')
        self.contact_tax_id = attributes[:'contact_tax_id']
      end

      if attributes.key?(:'contact_branch')
        self.contact_branch = attributes[:'contact_branch']
      end

      if attributes.key?(:'is_delete')
        self.is_delete = attributes[:'is_delete']
      end

      if attributes.key?(:'gallery_id')
        self.gallery_id = attributes[:'gallery_id']
      end

      if attributes.key?(:'reference_document_id')
        self.reference_document_id = attributes[:'reference_document_id']
      end

      if attributes.key?(:'reference_document_type')
        self.reference_document_type = attributes[:'reference_document_type']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'modified_by')
        self.modified_by = attributes[:'modified_by']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'created_by_user')
        self.created_by_user = attributes[:'created_by_user']
      end

      if attributes.key?(:'modified_by_user')
        self.modified_by_user = attributes[:'modified_by_user']
      end

      if attributes.key?(:'gallery')
        self.gallery = attributes[:'gallery']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @company_id.nil?
        invalid_properties.push('invalid value for "company_id", company_id cannot be nil.')
      end

      if @document_date.nil?
        invalid_properties.push('invalid value for "document_date", document_date cannot be nil.')
      end

      if @document_date.to_s.length < 1
        invalid_properties.push('invalid value for "document_date", the character length must be great than or equal to 1.')
      end

      if @created_on.nil?
        invalid_properties.push('invalid value for "created_on", created_on cannot be nil.')
      end

      if @created_on.to_s.length < 1
        invalid_properties.push('invalid value for "created_on", the character length must be great than or equal to 1.')
      end

      if @modified_on.nil?
        invalid_properties.push('invalid value for "modified_on", modified_on cannot be nil.')
      end

      if @modified_on.to_s.length < 1
        invalid_properties.push('invalid value for "modified_on", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @company_id.nil?
      return false if @document_date.nil?
      return false if @document_date.to_s.length < 1
      return false if @created_on.nil?
      return false if @created_on.to_s.length < 1
      return false if @modified_on.nil?
      return false if @modified_on.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] document_date Value to be assigned
    def document_date=(document_date)
      if document_date.nil?
        fail ArgumentError, 'document_date cannot be nil'
      end

      if document_date.to_s.length < 1
        fail ArgumentError, 'invalid value for "document_date", the character length must be great than or equal to 1.'
      end

      @document_date = document_date
    end

    # Custom attribute writer method with validation
    # @param [Object] created_on Value to be assigned
    def created_on=(created_on)
      if created_on.nil?
        fail ArgumentError, 'created_on cannot be nil'
      end

      if created_on.to_s.length < 1
        fail ArgumentError, 'invalid value for "created_on", the character length must be great than or equal to 1.'
      end

      @created_on = created_on
    end

    # Custom attribute writer method with validation
    # @param [Object] modified_on Value to be assigned
    def modified_on=(modified_on)
      if modified_on.nil?
        fail ArgumentError, 'modified_on cannot be nil'
      end

      if modified_on.to_s.length < 1
        fail ArgumentError, 'invalid value for "modified_on", the character length must be great than or equal to 1.'
      end

      @modified_on = modified_on
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          company_id == o.company_id &&
          document_date == o.document_date &&
          document_serial == o.document_serial &&
          contact_name == o.contact_name &&
          contact_tax_id == o.contact_tax_id &&
          contact_branch == o.contact_branch &&
          is_delete == o.is_delete &&
          gallery_id == o.gallery_id &&
          reference_document_id == o.reference_document_id &&
          reference_document_type == o.reference_document_type &&
          created_by == o.created_by &&
          modified_by == o.modified_by &&
          created_on == o.created_on &&
          modified_on == o.modified_on &&
          company == o.company &&
          created_by_user == o.created_by_user &&
          modified_by_user == o.modified_by_user &&
          gallery == o.gallery
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, company_id, document_date, document_serial, contact_name, contact_tax_id, contact_branch, is_delete, gallery_id, reference_document_id, reference_document_type, created_by, modified_by, created_on, modified_on, company, created_by_user, modified_by_user, gallery].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
