=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Bank
    attr_accessor :name

    attr_accessor :country_code

    attr_accessor :id

    attr_accessor :bank_code

    attr_accessor :is_delete

    attr_accessor :order_number

    attr_accessor :url

    attr_accessor :is_custom_bank

    attr_accessor :bank_account

    attr_accessor :reconciled_document

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'name' => :'name',
        :'country_code' => :'countryCode',
        :'id' => :'id',
        :'bank_code' => :'bankCode',
        :'is_delete' => :'isDelete',
        :'order_number' => :'orderNumber',
        :'url' => :'url',
        :'is_custom_bank' => :'isCustomBank',
        :'bank_account' => :'bankAccount',
        :'reconciled_document' => :'reconciledDocument'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'name' => :'String',
        :'country_code' => :'String',
        :'id' => :'Integer',
        :'bank_code' => :'String',
        :'is_delete' => :'Boolean',
        :'order_number' => :'Integer',
        :'url' => :'String',
        :'is_custom_bank' => :'Boolean',
        :'bank_account' => :'Array<BankAccount>',
        :'reconciled_document' => :'Array<ReconciledDocument>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'country_code',
        :'url',
        :'bank_account',
        :'reconciled_document'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Bank` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Bank`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'country_code')
        self.country_code = attributes[:'country_code']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'bank_code')
        self.bank_code = attributes[:'bank_code']
      end

      if attributes.key?(:'is_delete')
        self.is_delete = attributes[:'is_delete']
      end

      if attributes.key?(:'order_number')
        self.order_number = attributes[:'order_number']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'is_custom_bank')
        self.is_custom_bank = attributes[:'is_custom_bank']
      end

      if attributes.key?(:'bank_account')
        if (value = attributes[:'bank_account']).is_a?(Array)
          self.bank_account = value
        end
      end

      if attributes.key?(:'reconciled_document')
        if (value = attributes[:'reconciled_document']).is_a?(Array)
          self.reconciled_document = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length < 1
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 1.')
      end

      if !@country_code.nil? && @country_code.to_s.length > 50
        invalid_properties.push('invalid value for "country_code", the character length must be smaller than or equal to 50.')
      end

      if !@country_code.nil? && @country_code.to_s.length < 0
        invalid_properties.push('invalid value for "country_code", the character length must be great than or equal to 0.')
      end

      if @bank_code.nil?
        invalid_properties.push('invalid value for "bank_code", bank_code cannot be nil.')
      end

      if @bank_code.to_s.length > 20
        invalid_properties.push('invalid value for "bank_code", the character length must be smaller than or equal to 20.')
      end

      if @bank_code.to_s.length < 0
        invalid_properties.push('invalid value for "bank_code", the character length must be great than or equal to 0.')
      end

      if !@url.nil? && @url.to_s.length > 255
        invalid_properties.push('invalid value for "url", the character length must be smaller than or equal to 255.')
      end

      if !@url.nil? && @url.to_s.length < 0
        invalid_properties.push('invalid value for "url", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name.nil?
      return false if @name.to_s.length < 1
      return false if !@country_code.nil? && @country_code.to_s.length > 50
      return false if !@country_code.nil? && @country_code.to_s.length < 0
      return false if @bank_code.nil?
      return false if @bank_code.to_s.length > 20
      return false if @bank_code.to_s.length < 0
      return false if !@url.nil? && @url.to_s.length > 255
      return false if !@url.nil? && @url.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length < 1
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 1.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] country_code Value to be assigned
    def country_code=(country_code)
      if !country_code.nil? && country_code.to_s.length > 50
        fail ArgumentError, 'invalid value for "country_code", the character length must be smaller than or equal to 50.'
      end

      if !country_code.nil? && country_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "country_code", the character length must be great than or equal to 0.'
      end

      @country_code = country_code
    end

    # Custom attribute writer method with validation
    # @param [Object] bank_code Value to be assigned
    def bank_code=(bank_code)
      if bank_code.nil?
        fail ArgumentError, 'bank_code cannot be nil'
      end

      if bank_code.to_s.length > 20
        fail ArgumentError, 'invalid value for "bank_code", the character length must be smaller than or equal to 20.'
      end

      if bank_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "bank_code", the character length must be great than or equal to 0.'
      end

      @bank_code = bank_code
    end

    # Custom attribute writer method with validation
    # @param [Object] url Value to be assigned
    def url=(url)
      if !url.nil? && url.to_s.length > 255
        fail ArgumentError, 'invalid value for "url", the character length must be smaller than or equal to 255.'
      end

      if !url.nil? && url.to_s.length < 0
        fail ArgumentError, 'invalid value for "url", the character length must be great than or equal to 0.'
      end

      @url = url
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          name == o.name &&
          country_code == o.country_code &&
          id == o.id &&
          bank_code == o.bank_code &&
          is_delete == o.is_delete &&
          order_number == o.order_number &&
          url == o.url &&
          is_custom_bank == o.is_custom_bank &&
          bank_account == o.bank_account &&
          reconciled_document == o.reconciled_document
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [name, country_code, id, bank_code, is_delete, order_number, url, is_custom_bank, bank_account, reconciled_document].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
