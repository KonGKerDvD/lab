=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Company
    attr_accessor :id

    attr_accessor :name_local

    attr_accessor :name_foreign

    attr_accessor :address_local

    attr_accessor :address_foreign

    attr_accessor :company_tax_id

    attr_accessor :logo_image

    attr_accessor :fax

    attr_accessor :phone1

    attr_accessor :phone2

    attr_accessor :phone3

    attr_accessor :websites

    attr_accessor :company_type

    attr_accessor :created_on

    attr_accessor :modified_on

    attr_accessor :is_default

    attr_accessor :address_local_line2

    attr_accessor :address_foreign_line2

    attr_accessor :vat_rate

    attr_accessor :is_vat

    attr_accessor :email

    attr_accessor :branch

    attr_accessor :address_local_line3

    attr_accessor :address_foreign_line3

    attr_accessor :contact_person

    attr_accessor :is_active

    attr_accessor :remarks

    attr_accessor :gallery_id

    attr_accessor :branch_foreign

    attr_accessor :branch_code

    attr_accessor :contact_type

    attr_accessor :default_credit_days

    attr_accessor :logo_type

    attr_accessor :is_registered

    attr_accessor :is_advance

    attr_accessor :address

    attr_accessor :province_id

    attr_accessor :amphur_id

    attr_accessor :district_id

    attr_accessor :zip_code

    attr_accessor :support_code

    attr_accessor :sales_type

    attr_accessor :company_preferences

    attr_accessor :payroll_preferences

    attr_accessor :company_subscription

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name_local' => :'nameLocal',
        :'name_foreign' => :'nameForeign',
        :'address_local' => :'addressLocal',
        :'address_foreign' => :'addressForeign',
        :'company_tax_id' => :'companyTaxId',
        :'logo_image' => :'logoImage',
        :'fax' => :'fax',
        :'phone1' => :'phone1',
        :'phone2' => :'phone2',
        :'phone3' => :'phone3',
        :'websites' => :'websites',
        :'company_type' => :'companyType',
        :'created_on' => :'createdOn',
        :'modified_on' => :'modifiedOn',
        :'is_default' => :'isDefault',
        :'address_local_line2' => :'addressLocalLine2',
        :'address_foreign_line2' => :'addressForeignLine2',
        :'vat_rate' => :'vatRate',
        :'is_vat' => :'isVat',
        :'email' => :'email',
        :'branch' => :'branch',
        :'address_local_line3' => :'addressLocalLine3',
        :'address_foreign_line3' => :'addressForeignLine3',
        :'contact_person' => :'contactPerson',
        :'is_active' => :'isActive',
        :'remarks' => :'remarks',
        :'gallery_id' => :'galleryId',
        :'branch_foreign' => :'branchForeign',
        :'branch_code' => :'branchCode',
        :'contact_type' => :'contactType',
        :'default_credit_days' => :'defaultCreditDays',
        :'logo_type' => :'logoType',
        :'is_registered' => :'isRegistered',
        :'is_advance' => :'isAdvance',
        :'address' => :'address',
        :'province_id' => :'provinceId',
        :'amphur_id' => :'amphurId',
        :'district_id' => :'districtId',
        :'zip_code' => :'zipCode',
        :'support_code' => :'supportCode',
        :'sales_type' => :'salesType',
        :'company_preferences' => :'companyPreferences',
        :'payroll_preferences' => :'payrollPreferences',
        :'company_subscription' => :'companySubscription'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name_local' => :'String',
        :'name_foreign' => :'String',
        :'address_local' => :'String',
        :'address_foreign' => :'String',
        :'company_tax_id' => :'String',
        :'logo_image' => :'String',
        :'fax' => :'String',
        :'phone1' => :'String',
        :'phone2' => :'String',
        :'phone3' => :'String',
        :'websites' => :'String',
        :'company_type' => :'CompanyTypeEnum',
        :'created_on' => :'Time',
        :'modified_on' => :'Time',
        :'is_default' => :'Boolean',
        :'address_local_line2' => :'String',
        :'address_foreign_line2' => :'String',
        :'vat_rate' => :'Integer',
        :'is_vat' => :'Boolean',
        :'email' => :'String',
        :'branch' => :'String',
        :'address_local_line3' => :'String',
        :'address_foreign_line3' => :'String',
        :'contact_person' => :'String',
        :'is_active' => :'Boolean',
        :'remarks' => :'String',
        :'gallery_id' => :'Integer',
        :'branch_foreign' => :'String',
        :'branch_code' => :'String',
        :'contact_type' => :'Integer',
        :'default_credit_days' => :'Integer',
        :'logo_type' => :'Integer',
        :'is_registered' => :'Boolean',
        :'is_advance' => :'Boolean',
        :'address' => :'String',
        :'province_id' => :'Integer',
        :'amphur_id' => :'Integer',
        :'district_id' => :'Integer',
        :'zip_code' => :'String',
        :'support_code' => :'String',
        :'sales_type' => :'OneOfSalesType',
        :'company_preferences' => :'OneOfCompanyPreferences',
        :'payroll_preferences' => :'OneOfPayrollPreferences',
        :'company_subscription' => :'Array<CompanySubscription>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'name_foreign',
        :'address_local',
        :'address_foreign',
        :'company_tax_id',
        :'logo_image',
        :'fax',
        :'phone1',
        :'phone2',
        :'phone3',
        :'websites',
        :'address_local_line2',
        :'address_foreign_line2',
        :'email',
        :'branch',
        :'address_local_line3',
        :'address_foreign_line3',
        :'contact_person',
        :'remarks',
        :'gallery_id',
        :'branch_foreign',
        :'branch_code',
        :'default_credit_days',
        :'address',
        :'province_id',
        :'amphur_id',
        :'district_id',
        :'zip_code',
        :'support_code',
        :'sales_type',
        :'company_preferences',
        :'payroll_preferences',
        :'company_subscription'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Company` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Company`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name_local')
        self.name_local = attributes[:'name_local']
      end

      if attributes.key?(:'name_foreign')
        self.name_foreign = attributes[:'name_foreign']
      end

      if attributes.key?(:'address_local')
        self.address_local = attributes[:'address_local']
      end

      if attributes.key?(:'address_foreign')
        self.address_foreign = attributes[:'address_foreign']
      end

      if attributes.key?(:'company_tax_id')
        self.company_tax_id = attributes[:'company_tax_id']
      end

      if attributes.key?(:'logo_image')
        self.logo_image = attributes[:'logo_image']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'phone1')
        self.phone1 = attributes[:'phone1']
      end

      if attributes.key?(:'phone2')
        self.phone2 = attributes[:'phone2']
      end

      if attributes.key?(:'phone3')
        self.phone3 = attributes[:'phone3']
      end

      if attributes.key?(:'websites')
        self.websites = attributes[:'websites']
      end

      if attributes.key?(:'company_type')
        self.company_type = attributes[:'company_type']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      end

      if attributes.key?(:'address_local_line2')
        self.address_local_line2 = attributes[:'address_local_line2']
      end

      if attributes.key?(:'address_foreign_line2')
        self.address_foreign_line2 = attributes[:'address_foreign_line2']
      end

      if attributes.key?(:'vat_rate')
        self.vat_rate = attributes[:'vat_rate']
      end

      if attributes.key?(:'is_vat')
        self.is_vat = attributes[:'is_vat']
      else
        self.is_vat = false
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'branch')
        self.branch = attributes[:'branch']
      end

      if attributes.key?(:'address_local_line3')
        self.address_local_line3 = attributes[:'address_local_line3']
      end

      if attributes.key?(:'address_foreign_line3')
        self.address_foreign_line3 = attributes[:'address_foreign_line3']
      end

      if attributes.key?(:'contact_person')
        self.contact_person = attributes[:'contact_person']
      end

      if attributes.key?(:'is_active')
        self.is_active = attributes[:'is_active']
      else
        self.is_active = false
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'gallery_id')
        self.gallery_id = attributes[:'gallery_id']
      end

      if attributes.key?(:'branch_foreign')
        self.branch_foreign = attributes[:'branch_foreign']
      end

      if attributes.key?(:'branch_code')
        self.branch_code = attributes[:'branch_code']
      end

      if attributes.key?(:'contact_type')
        self.contact_type = attributes[:'contact_type']
      end

      if attributes.key?(:'default_credit_days')
        self.default_credit_days = attributes[:'default_credit_days']
      end

      if attributes.key?(:'logo_type')
        self.logo_type = attributes[:'logo_type']
      end

      if attributes.key?(:'is_registered')
        self.is_registered = attributes[:'is_registered']
      else
        self.is_registered = false
      end

      if attributes.key?(:'is_advance')
        self.is_advance = attributes[:'is_advance']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'province_id')
        self.province_id = attributes[:'province_id']
      end

      if attributes.key?(:'amphur_id')
        self.amphur_id = attributes[:'amphur_id']
      end

      if attributes.key?(:'district_id')
        self.district_id = attributes[:'district_id']
      end

      if attributes.key?(:'zip_code')
        self.zip_code = attributes[:'zip_code']
      end

      if attributes.key?(:'support_code')
        self.support_code = attributes[:'support_code']
      end

      if attributes.key?(:'sales_type')
        self.sales_type = attributes[:'sales_type']
      end

      if attributes.key?(:'company_preferences')
        self.company_preferences = attributes[:'company_preferences']
      end

      if attributes.key?(:'payroll_preferences')
        self.payroll_preferences = attributes[:'payroll_preferences']
      end

      if attributes.key?(:'company_subscription')
        if (value = attributes[:'company_subscription']).is_a?(Array)
          self.company_subscription = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @name_local.nil?
        invalid_properties.push('invalid value for "name_local", name_local cannot be nil.')
      end

      if @name_local.to_s.length < 1
        invalid_properties.push('invalid value for "name_local", the character length must be great than or equal to 1.')
      end

      if !@fax.nil? && @fax.to_s.length > 50
        invalid_properties.push('invalid value for "fax", the character length must be smaller than or equal to 50.')
      end

      if !@fax.nil? && @fax.to_s.length < 0
        invalid_properties.push('invalid value for "fax", the character length must be great than or equal to 0.')
      end

      if !@phone1.nil? && @phone1.to_s.length > 50
        invalid_properties.push('invalid value for "phone1", the character length must be smaller than or equal to 50.')
      end

      if !@phone1.nil? && @phone1.to_s.length < 0
        invalid_properties.push('invalid value for "phone1", the character length must be great than or equal to 0.')
      end

      if !@phone2.nil? && @phone2.to_s.length > 50
        invalid_properties.push('invalid value for "phone2", the character length must be smaller than or equal to 50.')
      end

      if !@phone2.nil? && @phone2.to_s.length < 0
        invalid_properties.push('invalid value for "phone2", the character length must be great than or equal to 0.')
      end

      if !@phone3.nil? && @phone3.to_s.length > 50
        invalid_properties.push('invalid value for "phone3", the character length must be smaller than or equal to 50.')
      end

      if !@phone3.nil? && @phone3.to_s.length < 0
        invalid_properties.push('invalid value for "phone3", the character length must be great than or equal to 0.')
      end

      if !@websites.nil? && @websites.to_s.length > 2147483647
        invalid_properties.push('invalid value for "websites", the character length must be smaller than or equal to 2147483647.')
      end

      if !@websites.nil? && @websites.to_s.length < 0
        invalid_properties.push('invalid value for "websites", the character length must be great than or equal to 0.')
      end

      if @created_on.nil?
        invalid_properties.push('invalid value for "created_on", created_on cannot be nil.')
      end

      if @created_on.to_s.length < 1
        invalid_properties.push('invalid value for "created_on", the character length must be great than or equal to 1.')
      end

      if @modified_on.nil?
        invalid_properties.push('invalid value for "modified_on", modified_on cannot be nil.')
      end

      if @modified_on.to_s.length < 1
        invalid_properties.push('invalid value for "modified_on", the character length must be great than or equal to 1.')
      end

      if !@branch_foreign.nil? && @branch_foreign.to_s.length > 2147483647
        invalid_properties.push('invalid value for "branch_foreign", the character length must be smaller than or equal to 2147483647.')
      end

      if !@branch_foreign.nil? && @branch_foreign.to_s.length < 0
        invalid_properties.push('invalid value for "branch_foreign", the character length must be great than or equal to 0.')
      end

      if !@branch_code.nil? && @branch_code.to_s.length > 50
        invalid_properties.push('invalid value for "branch_code", the character length must be smaller than or equal to 50.')
      end

      if !@branch_code.nil? && @branch_code.to_s.length < 0
        invalid_properties.push('invalid value for "branch_code", the character length must be great than or equal to 0.')
      end

      if @contact_type.nil?
        invalid_properties.push('invalid value for "contact_type", contact_type cannot be nil.')
      end

      if @logo_type.nil?
        invalid_properties.push('invalid value for "logo_type", logo_type cannot be nil.')
      end

      if @is_advance.nil?
        invalid_properties.push('invalid value for "is_advance", is_advance cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @name_local.nil?
      return false if @name_local.to_s.length < 1
      return false if !@fax.nil? && @fax.to_s.length > 50
      return false if !@fax.nil? && @fax.to_s.length < 0
      return false if !@phone1.nil? && @phone1.to_s.length > 50
      return false if !@phone1.nil? && @phone1.to_s.length < 0
      return false if !@phone2.nil? && @phone2.to_s.length > 50
      return false if !@phone2.nil? && @phone2.to_s.length < 0
      return false if !@phone3.nil? && @phone3.to_s.length > 50
      return false if !@phone3.nil? && @phone3.to_s.length < 0
      return false if !@websites.nil? && @websites.to_s.length > 2147483647
      return false if !@websites.nil? && @websites.to_s.length < 0
      return false if @created_on.nil?
      return false if @created_on.to_s.length < 1
      return false if @modified_on.nil?
      return false if @modified_on.to_s.length < 1
      return false if !@branch_foreign.nil? && @branch_foreign.to_s.length > 2147483647
      return false if !@branch_foreign.nil? && @branch_foreign.to_s.length < 0
      return false if !@branch_code.nil? && @branch_code.to_s.length > 50
      return false if !@branch_code.nil? && @branch_code.to_s.length < 0
      return false if @contact_type.nil?
      return false if @logo_type.nil?
      return false if @is_advance.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name_local Value to be assigned
    def name_local=(name_local)
      if name_local.nil?
        fail ArgumentError, 'name_local cannot be nil'
      end

      if name_local.to_s.length < 1
        fail ArgumentError, 'invalid value for "name_local", the character length must be great than or equal to 1.'
      end

      @name_local = name_local
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length > 50
        fail ArgumentError, 'invalid value for "fax", the character length must be smaller than or equal to 50.'
      end

      if !fax.nil? && fax.to_s.length < 0
        fail ArgumentError, 'invalid value for "fax", the character length must be great than or equal to 0.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] phone1 Value to be assigned
    def phone1=(phone1)
      if !phone1.nil? && phone1.to_s.length > 50
        fail ArgumentError, 'invalid value for "phone1", the character length must be smaller than or equal to 50.'
      end

      if !phone1.nil? && phone1.to_s.length < 0
        fail ArgumentError, 'invalid value for "phone1", the character length must be great than or equal to 0.'
      end

      @phone1 = phone1
    end

    # Custom attribute writer method with validation
    # @param [Object] phone2 Value to be assigned
    def phone2=(phone2)
      if !phone2.nil? && phone2.to_s.length > 50
        fail ArgumentError, 'invalid value for "phone2", the character length must be smaller than or equal to 50.'
      end

      if !phone2.nil? && phone2.to_s.length < 0
        fail ArgumentError, 'invalid value for "phone2", the character length must be great than or equal to 0.'
      end

      @phone2 = phone2
    end

    # Custom attribute writer method with validation
    # @param [Object] phone3 Value to be assigned
    def phone3=(phone3)
      if !phone3.nil? && phone3.to_s.length > 50
        fail ArgumentError, 'invalid value for "phone3", the character length must be smaller than or equal to 50.'
      end

      if !phone3.nil? && phone3.to_s.length < 0
        fail ArgumentError, 'invalid value for "phone3", the character length must be great than or equal to 0.'
      end

      @phone3 = phone3
    end

    # Custom attribute writer method with validation
    # @param [Object] websites Value to be assigned
    def websites=(websites)
      if !websites.nil? && websites.to_s.length > 2147483647
        fail ArgumentError, 'invalid value for "websites", the character length must be smaller than or equal to 2147483647.'
      end

      if !websites.nil? && websites.to_s.length < 0
        fail ArgumentError, 'invalid value for "websites", the character length must be great than or equal to 0.'
      end

      @websites = websites
    end

    # Custom attribute writer method with validation
    # @param [Object] created_on Value to be assigned
    def created_on=(created_on)
      if created_on.nil?
        fail ArgumentError, 'created_on cannot be nil'
      end

      if created_on.to_s.length < 1
        fail ArgumentError, 'invalid value for "created_on", the character length must be great than or equal to 1.'
      end

      @created_on = created_on
    end

    # Custom attribute writer method with validation
    # @param [Object] modified_on Value to be assigned
    def modified_on=(modified_on)
      if modified_on.nil?
        fail ArgumentError, 'modified_on cannot be nil'
      end

      if modified_on.to_s.length < 1
        fail ArgumentError, 'invalid value for "modified_on", the character length must be great than or equal to 1.'
      end

      @modified_on = modified_on
    end

    # Custom attribute writer method with validation
    # @param [Object] branch_foreign Value to be assigned
    def branch_foreign=(branch_foreign)
      if !branch_foreign.nil? && branch_foreign.to_s.length > 2147483647
        fail ArgumentError, 'invalid value for "branch_foreign", the character length must be smaller than or equal to 2147483647.'
      end

      if !branch_foreign.nil? && branch_foreign.to_s.length < 0
        fail ArgumentError, 'invalid value for "branch_foreign", the character length must be great than or equal to 0.'
      end

      @branch_foreign = branch_foreign
    end

    # Custom attribute writer method with validation
    # @param [Object] branch_code Value to be assigned
    def branch_code=(branch_code)
      if !branch_code.nil? && branch_code.to_s.length > 50
        fail ArgumentError, 'invalid value for "branch_code", the character length must be smaller than or equal to 50.'
      end

      if !branch_code.nil? && branch_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "branch_code", the character length must be great than or equal to 0.'
      end

      @branch_code = branch_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name_local == o.name_local &&
          name_foreign == o.name_foreign &&
          address_local == o.address_local &&
          address_foreign == o.address_foreign &&
          company_tax_id == o.company_tax_id &&
          logo_image == o.logo_image &&
          fax == o.fax &&
          phone1 == o.phone1 &&
          phone2 == o.phone2 &&
          phone3 == o.phone3 &&
          websites == o.websites &&
          company_type == o.company_type &&
          created_on == o.created_on &&
          modified_on == o.modified_on &&
          is_default == o.is_default &&
          address_local_line2 == o.address_local_line2 &&
          address_foreign_line2 == o.address_foreign_line2 &&
          vat_rate == o.vat_rate &&
          is_vat == o.is_vat &&
          email == o.email &&
          branch == o.branch &&
          address_local_line3 == o.address_local_line3 &&
          address_foreign_line3 == o.address_foreign_line3 &&
          contact_person == o.contact_person &&
          is_active == o.is_active &&
          remarks == o.remarks &&
          gallery_id == o.gallery_id &&
          branch_foreign == o.branch_foreign &&
          branch_code == o.branch_code &&
          contact_type == o.contact_type &&
          default_credit_days == o.default_credit_days &&
          logo_type == o.logo_type &&
          is_registered == o.is_registered &&
          is_advance == o.is_advance &&
          address == o.address &&
          province_id == o.province_id &&
          amphur_id == o.amphur_id &&
          district_id == o.district_id &&
          zip_code == o.zip_code &&
          support_code == o.support_code &&
          sales_type == o.sales_type &&
          company_preferences == o.company_preferences &&
          payroll_preferences == o.payroll_preferences &&
          company_subscription == o.company_subscription
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name_local, name_foreign, address_local, address_foreign, company_tax_id, logo_image, fax, phone1, phone2, phone3, websites, company_type, created_on, modified_on, is_default, address_local_line2, address_foreign_line2, vat_rate, is_vat, email, branch, address_local_line3, address_foreign_line3, contact_person, is_active, remarks, gallery_id, branch_foreign, branch_code, contact_type, default_credit_days, logo_type, is_registered, is_advance, address, province_id, amphur_id, district_id, zip_code, support_code, sales_type, company_preferences, payroll_preferences, company_subscription].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
