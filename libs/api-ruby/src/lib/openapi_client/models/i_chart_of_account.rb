=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class IChartOfAccount
    attr_accessor :id

    attr_accessor :code

    attr_accessor :name_local

    attr_accessor :name_foreign

    attr_accessor :description_local

    attr_accessor :description_foreign

    attr_accessor :category

    attr_accessor :parent_id

    attr_accessor :is_folder

    attr_accessor :is_bank

    attr_accessor :is_receivable

    attr_accessor :is_delete

    attr_accessor :is_lock

    attr_accessor :createdon

    attr_accessor :modifiedon

    attr_accessor :modifiedby

    attr_accessor :value

    attr_accessor :left

    attr_accessor :right

    attr_accessor :is_default

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'code' => :'code',
        :'name_local' => :'nameLocal',
        :'name_foreign' => :'nameForeign',
        :'description_local' => :'descriptionLocal',
        :'description_foreign' => :'descriptionForeign',
        :'category' => :'category',
        :'parent_id' => :'parentId',
        :'is_folder' => :'isFolder',
        :'is_bank' => :'isBank',
        :'is_receivable' => :'isReceivable',
        :'is_delete' => :'isDelete',
        :'is_lock' => :'isLock',
        :'createdon' => :'createdon',
        :'modifiedon' => :'modifiedon',
        :'modifiedby' => :'modifiedby',
        :'value' => :'value',
        :'left' => :'left',
        :'right' => :'right',
        :'is_default' => :'isDefault'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'code' => :'String',
        :'name_local' => :'String',
        :'name_foreign' => :'String',
        :'description_local' => :'String',
        :'description_foreign' => :'String',
        :'category' => :'ChartOfAccountCategory',
        :'parent_id' => :'Integer',
        :'is_folder' => :'Boolean',
        :'is_bank' => :'Boolean',
        :'is_receivable' => :'Boolean',
        :'is_delete' => :'Boolean',
        :'is_lock' => :'Boolean',
        :'createdon' => :'Time',
        :'modifiedon' => :'Time',
        :'modifiedby' => :'Integer',
        :'value' => :'Float',
        :'left' => :'Integer',
        :'right' => :'Integer',
        :'is_default' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'code',
        :'name_local',
        :'name_foreign',
        :'description_local',
        :'description_foreign',
        :'parent_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::IChartOfAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::IChartOfAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'name_local')
        self.name_local = attributes[:'name_local']
      end

      if attributes.key?(:'name_foreign')
        self.name_foreign = attributes[:'name_foreign']
      end

      if attributes.key?(:'description_local')
        self.description_local = attributes[:'description_local']
      end

      if attributes.key?(:'description_foreign')
        self.description_foreign = attributes[:'description_foreign']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'is_folder')
        self.is_folder = attributes[:'is_folder']
      end

      if attributes.key?(:'is_bank')
        self.is_bank = attributes[:'is_bank']
      end

      if attributes.key?(:'is_receivable')
        self.is_receivable = attributes[:'is_receivable']
      end

      if attributes.key?(:'is_delete')
        self.is_delete = attributes[:'is_delete']
      end

      if attributes.key?(:'is_lock')
        self.is_lock = attributes[:'is_lock']
      end

      if attributes.key?(:'createdon')
        self.createdon = attributes[:'createdon']
      end

      if attributes.key?(:'modifiedon')
        self.modifiedon = attributes[:'modifiedon']
      end

      if attributes.key?(:'modifiedby')
        self.modifiedby = attributes[:'modifiedby']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'left')
        self.left = attributes[:'left']
      end

      if attributes.key?(:'right')
        self.right = attributes[:'right']
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          code == o.code &&
          name_local == o.name_local &&
          name_foreign == o.name_foreign &&
          description_local == o.description_local &&
          description_foreign == o.description_foreign &&
          category == o.category &&
          parent_id == o.parent_id &&
          is_folder == o.is_folder &&
          is_bank == o.is_bank &&
          is_receivable == o.is_receivable &&
          is_delete == o.is_delete &&
          is_lock == o.is_lock &&
          createdon == o.createdon &&
          modifiedon == o.modifiedon &&
          modifiedby == o.modifiedby &&
          value == o.value &&
          left == o.left &&
          right == o.right &&
          is_default == o.is_default
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, code, name_local, name_foreign, description_local, description_foreign, category, parent_id, is_folder, is_bank, is_receivable, is_delete, is_lock, createdon, modifiedon, modifiedby, value, left, right, is_default].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
