=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class IBookOfAccount
    attr_accessor :journal_entry_id

    attr_accessor :company_id

    attr_accessor :debit_credit

    attr_accessor :book_of_account_status

    attr_accessor :chart_of_account_id

    attr_accessor :posted_date

    attr_accessor :created_on

    attr_accessor :modified_on

    attr_accessor :approved_on

    attr_accessor :value

    attr_accessor :balance

    attr_accessor :exclude_void_balance

    attr_accessor :row_number

    attr_accessor :description

    attr_accessor :description_foreign

    attr_accessor :chart_of_account_name

    attr_accessor :journal_entry

    attr_accessor :chart_of_account

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'journal_entry_id' => :'journalEntryId',
        :'company_id' => :'companyId',
        :'debit_credit' => :'debitCredit',
        :'book_of_account_status' => :'bookOfAccountStatus',
        :'chart_of_account_id' => :'chartOfAccountId',
        :'posted_date' => :'postedDate',
        :'created_on' => :'createdOn',
        :'modified_on' => :'modifiedOn',
        :'approved_on' => :'approvedOn',
        :'value' => :'value',
        :'balance' => :'balance',
        :'exclude_void_balance' => :'excludeVoidBalance',
        :'row_number' => :'rowNumber',
        :'description' => :'description',
        :'description_foreign' => :'descriptionForeign',
        :'chart_of_account_name' => :'chartOfAccountName',
        :'journal_entry' => :'journalEntry',
        :'chart_of_account' => :'chartOfAccount'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'journal_entry_id' => :'Integer',
        :'company_id' => :'Integer',
        :'debit_credit' => :'FinancialTransactionType',
        :'book_of_account_status' => :'BookOfAccountStatus',
        :'chart_of_account_id' => :'Integer',
        :'posted_date' => :'Time',
        :'created_on' => :'Time',
        :'modified_on' => :'Time',
        :'approved_on' => :'Time',
        :'value' => :'Float',
        :'balance' => :'Float',
        :'exclude_void_balance' => :'Float',
        :'row_number' => :'Integer',
        :'description' => :'String',
        :'description_foreign' => :'String',
        :'chart_of_account_name' => :'String',
        :'journal_entry' => :'OneOfIJournalEntryBase',
        :'chart_of_account' => :'OneOfIChartOfAccount'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'posted_date',
        :'approved_on',
        :'description',
        :'description_foreign',
        :'chart_of_account_name',
        :'journal_entry',
        :'chart_of_account'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::IBookOfAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::IBookOfAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'journal_entry_id')
        self.journal_entry_id = attributes[:'journal_entry_id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'debit_credit')
        self.debit_credit = attributes[:'debit_credit']
      end

      if attributes.key?(:'book_of_account_status')
        self.book_of_account_status = attributes[:'book_of_account_status']
      end

      if attributes.key?(:'chart_of_account_id')
        self.chart_of_account_id = attributes[:'chart_of_account_id']
      end

      if attributes.key?(:'posted_date')
        self.posted_date = attributes[:'posted_date']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'approved_on')
        self.approved_on = attributes[:'approved_on']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'balance')
        self.balance = attributes[:'balance']
      end

      if attributes.key?(:'exclude_void_balance')
        self.exclude_void_balance = attributes[:'exclude_void_balance']
      end

      if attributes.key?(:'row_number')
        self.row_number = attributes[:'row_number']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'description_foreign')
        self.description_foreign = attributes[:'description_foreign']
      end

      if attributes.key?(:'chart_of_account_name')
        self.chart_of_account_name = attributes[:'chart_of_account_name']
      end

      if attributes.key?(:'journal_entry')
        self.journal_entry = attributes[:'journal_entry']
      end

      if attributes.key?(:'chart_of_account')
        self.chart_of_account = attributes[:'chart_of_account']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          journal_entry_id == o.journal_entry_id &&
          company_id == o.company_id &&
          debit_credit == o.debit_credit &&
          book_of_account_status == o.book_of_account_status &&
          chart_of_account_id == o.chart_of_account_id &&
          posted_date == o.posted_date &&
          created_on == o.created_on &&
          modified_on == o.modified_on &&
          approved_on == o.approved_on &&
          value == o.value &&
          balance == o.balance &&
          exclude_void_balance == o.exclude_void_balance &&
          row_number == o.row_number &&
          description == o.description &&
          description_foreign == o.description_foreign &&
          chart_of_account_name == o.chart_of_account_name &&
          journal_entry == o.journal_entry &&
          chart_of_account == o.chart_of_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [journal_entry_id, company_id, debit_credit, book_of_account_status, chart_of_account_id, posted_date, created_on, modified_on, approved_on, value, balance, exclude_void_balance, row_number, description, description_foreign, chart_of_account_name, journal_entry, chart_of_account].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
