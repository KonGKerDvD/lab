=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ChartOfAccount
    attr_accessor :id

    attr_accessor :company_id

    attr_accessor :code

    attr_accessor :name_local

    attr_accessor :name_foreign

    attr_accessor :description_local

    attr_accessor :description_foreign

    attr_accessor :category

    attr_accessor :parent_id

    attr_accessor :is_folder

    attr_accessor :is_bank

    attr_accessor :is_receivable

    attr_accessor :is_delete

    attr_accessor :is_lock

    attr_accessor :createdon

    attr_accessor :modifiedon

    attr_accessor :modifiedby

    attr_accessor :value

    attr_accessor :left

    attr_accessor :right

    attr_accessor :is_default

    attr_accessor :bank_account

    attr_accessor :petty_cash

    attr_accessor :cheque

    attr_accessor :credit_card

    attr_accessor :other_channels

    attr_accessor :system_chart_of_account

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'company_id' => :'companyId',
        :'code' => :'code',
        :'name_local' => :'nameLocal',
        :'name_foreign' => :'nameForeign',
        :'description_local' => :'descriptionLocal',
        :'description_foreign' => :'descriptionForeign',
        :'category' => :'category',
        :'parent_id' => :'parentId',
        :'is_folder' => :'isFolder',
        :'is_bank' => :'isBank',
        :'is_receivable' => :'isReceivable',
        :'is_delete' => :'isDelete',
        :'is_lock' => :'isLock',
        :'createdon' => :'createdon',
        :'modifiedon' => :'modifiedon',
        :'modifiedby' => :'modifiedby',
        :'value' => :'value',
        :'left' => :'left',
        :'right' => :'right',
        :'is_default' => :'isDefault',
        :'bank_account' => :'bankAccount',
        :'petty_cash' => :'pettyCash',
        :'cheque' => :'cheque',
        :'credit_card' => :'creditCard',
        :'other_channels' => :'otherChannels',
        :'system_chart_of_account' => :'systemChartOfAccount'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'company_id' => :'Integer',
        :'code' => :'String',
        :'name_local' => :'String',
        :'name_foreign' => :'String',
        :'description_local' => :'String',
        :'description_foreign' => :'String',
        :'category' => :'ChartOfAccountCategory',
        :'parent_id' => :'Integer',
        :'is_folder' => :'Boolean',
        :'is_bank' => :'Boolean',
        :'is_receivable' => :'Boolean',
        :'is_delete' => :'Boolean',
        :'is_lock' => :'Boolean',
        :'createdon' => :'Time',
        :'modifiedon' => :'Time',
        :'modifiedby' => :'Integer',
        :'value' => :'Float',
        :'left' => :'Integer',
        :'right' => :'Integer',
        :'is_default' => :'Boolean',
        :'bank_account' => :'OneOfBankAccount',
        :'petty_cash' => :'OneOfPettyCash',
        :'cheque' => :'OneOfCheque',
        :'credit_card' => :'OneOfCreditCard',
        :'other_channels' => :'OneOfOtherChannels',
        :'system_chart_of_account' => :'OneOfSystemChartOfAccount'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'code',
        :'name_local',
        :'name_foreign',
        :'description_local',
        :'description_foreign',
        :'parent_id',
        :'bank_account',
        :'petty_cash',
        :'cheque',
        :'credit_card',
        :'other_channels',
        :'system_chart_of_account'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ChartOfAccount` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ChartOfAccount`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'name_local')
        self.name_local = attributes[:'name_local']
      end

      if attributes.key?(:'name_foreign')
        self.name_foreign = attributes[:'name_foreign']
      end

      if attributes.key?(:'description_local')
        self.description_local = attributes[:'description_local']
      end

      if attributes.key?(:'description_foreign')
        self.description_foreign = attributes[:'description_foreign']
      end

      if attributes.key?(:'category')
        self.category = attributes[:'category']
      end

      if attributes.key?(:'parent_id')
        self.parent_id = attributes[:'parent_id']
      end

      if attributes.key?(:'is_folder')
        self.is_folder = attributes[:'is_folder']
      end

      if attributes.key?(:'is_bank')
        self.is_bank = attributes[:'is_bank']
      end

      if attributes.key?(:'is_receivable')
        self.is_receivable = attributes[:'is_receivable']
      end

      if attributes.key?(:'is_delete')
        self.is_delete = attributes[:'is_delete']
      else
        self.is_delete = false
      end

      if attributes.key?(:'is_lock')
        self.is_lock = attributes[:'is_lock']
      else
        self.is_lock = false
      end

      if attributes.key?(:'createdon')
        self.createdon = attributes[:'createdon']
      end

      if attributes.key?(:'modifiedon')
        self.modifiedon = attributes[:'modifiedon']
      end

      if attributes.key?(:'modifiedby')
        self.modifiedby = attributes[:'modifiedby']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'left')
        self.left = attributes[:'left']
      end

      if attributes.key?(:'right')
        self.right = attributes[:'right']
      end

      if attributes.key?(:'is_default')
        self.is_default = attributes[:'is_default']
      end

      if attributes.key?(:'bank_account')
        self.bank_account = attributes[:'bank_account']
      end

      if attributes.key?(:'petty_cash')
        self.petty_cash = attributes[:'petty_cash']
      end

      if attributes.key?(:'cheque')
        self.cheque = attributes[:'cheque']
      end

      if attributes.key?(:'credit_card')
        self.credit_card = attributes[:'credit_card']
      end

      if attributes.key?(:'other_channels')
        self.other_channels = attributes[:'other_channels']
      end

      if attributes.key?(:'system_chart_of_account')
        self.system_chart_of_account = attributes[:'system_chart_of_account']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@code.nil? && @code.to_s.length > 50
        invalid_properties.push('invalid value for "code", the character length must be smaller than or equal to 50.')
      end

      if !@code.nil? && @code.to_s.length < 0
        invalid_properties.push('invalid value for "code", the character length must be great than or equal to 0.')
      end

      if @createdon.nil?
        invalid_properties.push('invalid value for "createdon", createdon cannot be nil.')
      end

      if @createdon.to_s.length < 1
        invalid_properties.push('invalid value for "createdon", the character length must be great than or equal to 1.')
      end

      if @modifiedon.nil?
        invalid_properties.push('invalid value for "modifiedon", modifiedon cannot be nil.')
      end

      if @modifiedon.to_s.length < 1
        invalid_properties.push('invalid value for "modifiedon", the character length must be great than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@code.nil? && @code.to_s.length > 50
      return false if !@code.nil? && @code.to_s.length < 0
      return false if @createdon.nil?
      return false if @createdon.to_s.length < 1
      return false if @modifiedon.nil?
      return false if @modifiedon.to_s.length < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if !code.nil? && code.to_s.length > 50
        fail ArgumentError, 'invalid value for "code", the character length must be smaller than or equal to 50.'
      end

      if !code.nil? && code.to_s.length < 0
        fail ArgumentError, 'invalid value for "code", the character length must be great than or equal to 0.'
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] createdon Value to be assigned
    def createdon=(createdon)
      if createdon.nil?
        fail ArgumentError, 'createdon cannot be nil'
      end

      if createdon.to_s.length < 1
        fail ArgumentError, 'invalid value for "createdon", the character length must be great than or equal to 1.'
      end

      @createdon = createdon
    end

    # Custom attribute writer method with validation
    # @param [Object] modifiedon Value to be assigned
    def modifiedon=(modifiedon)
      if modifiedon.nil?
        fail ArgumentError, 'modifiedon cannot be nil'
      end

      if modifiedon.to_s.length < 1
        fail ArgumentError, 'invalid value for "modifiedon", the character length must be great than or equal to 1.'
      end

      @modifiedon = modifiedon
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          company_id == o.company_id &&
          code == o.code &&
          name_local == o.name_local &&
          name_foreign == o.name_foreign &&
          description_local == o.description_local &&
          description_foreign == o.description_foreign &&
          category == o.category &&
          parent_id == o.parent_id &&
          is_folder == o.is_folder &&
          is_bank == o.is_bank &&
          is_receivable == o.is_receivable &&
          is_delete == o.is_delete &&
          is_lock == o.is_lock &&
          createdon == o.createdon &&
          modifiedon == o.modifiedon &&
          modifiedby == o.modifiedby &&
          value == o.value &&
          left == o.left &&
          right == o.right &&
          is_default == o.is_default &&
          bank_account == o.bank_account &&
          petty_cash == o.petty_cash &&
          cheque == o.cheque &&
          credit_card == o.credit_card &&
          other_channels == o.other_channels &&
          system_chart_of_account == o.system_chart_of_account
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, company_id, code, name_local, name_foreign, description_local, description_foreign, category, parent_id, is_folder, is_bank, is_receivable, is_delete, is_lock, createdon, modifiedon, modifiedby, value, left, right, is_default, bank_account, petty_cash, cheque, credit_card, other_channels, system_chart_of_account].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
