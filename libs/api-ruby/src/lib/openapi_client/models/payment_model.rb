=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class PaymentModel
    attr_accessor :cash_remarks

    attr_accessor :exclude_vat

    attr_accessor :cash_tax

    attr_accessor :credit_card_number

    attr_accessor :company_vat_rate

    attr_accessor :net

    attr_accessor :bank_account_number

    attr_accessor :bank_account_id

    attr_accessor :payment_method

    attr_accessor :date_now

    attr_accessor :amount_collected

    attr_accessor :amount_withheld

    attr_accessor :withholding_tax

    attr_accessor :remarks

    attr_accessor :transfer_bank_account_id

    attr_accessor :bank_account_credit_card_id

    attr_accessor :charge

    attr_accessor :cheque_date

    attr_accessor :cheque_number

    attr_accessor :cheque_bank_account_id

    attr_accessor :credit_card_bank_account_id

    attr_accessor :remaining_collected

    attr_accessor :remaining_collected_type

    attr_accessor :deduction_amount

    attr_accessor :payment_deduction_type

    attr_accessor :petty_cash_name

    attr_accessor :petty_cash_id

    attr_accessor :cheque_id

    attr_accessor :credit_card_id

    attr_accessor :other_channel_id

    attr_accessor :cheque_deposit_date

    attr_accessor :cheque_deposit_bank_id

    attr_accessor :cheque_cashing_date

    attr_accessor :auto_create_withholding_tax

    attr_accessor :withholding_tax_income_type

    attr_accessor :withholding_tax_income_description

    attr_accessor :withholding_tax_entity

    attr_accessor :exchange_rate_fee

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cash_remarks' => :'cashRemarks',
        :'exclude_vat' => :'excludeVat',
        :'cash_tax' => :'cashTax',
        :'credit_card_number' => :'creditCardNumber',
        :'company_vat_rate' => :'companyVatRate',
        :'net' => :'net',
        :'bank_account_number' => :'bankAccountNumber',
        :'bank_account_id' => :'bankAccountId',
        :'payment_method' => :'paymentMethod',
        :'date_now' => :'dateNow',
        :'amount_collected' => :'amountCollected',
        :'amount_withheld' => :'amountWithheld',
        :'withholding_tax' => :'withholdingTax',
        :'remarks' => :'remarks',
        :'transfer_bank_account_id' => :'transferBankAccountId',
        :'bank_account_credit_card_id' => :'bankAccountCreditCardId',
        :'charge' => :'charge',
        :'cheque_date' => :'chequeDate',
        :'cheque_number' => :'chequeNumber',
        :'cheque_bank_account_id' => :'chequeBankAccountId',
        :'credit_card_bank_account_id' => :'creditCardBankAccountId',
        :'remaining_collected' => :'remainingCollected',
        :'remaining_collected_type' => :'remainingCollectedType',
        :'deduction_amount' => :'deductionAmount',
        :'payment_deduction_type' => :'paymentDeductionType',
        :'petty_cash_name' => :'pettyCashName',
        :'petty_cash_id' => :'pettyCashId',
        :'cheque_id' => :'chequeId',
        :'credit_card_id' => :'creditCardId',
        :'other_channel_id' => :'otherChannelId',
        :'cheque_deposit_date' => :'chequeDepositDate',
        :'cheque_deposit_bank_id' => :'chequeDepositBankId',
        :'cheque_cashing_date' => :'chequeCashingDate',
        :'auto_create_withholding_tax' => :'autoCreateWithholdingTax',
        :'withholding_tax_income_type' => :'withholdingTaxIncomeType',
        :'withholding_tax_income_description' => :'withholdingTaxIncomeDescription',
        :'withholding_tax_entity' => :'withholdingTaxEntity',
        :'exchange_rate_fee' => :'exchangeRateFee'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cash_remarks' => :'String',
        :'exclude_vat' => :'Float',
        :'cash_tax' => :'Integer',
        :'credit_card_number' => :'String',
        :'company_vat_rate' => :'Integer',
        :'net' => :'Float',
        :'bank_account_number' => :'String',
        :'bank_account_id' => :'Integer',
        :'payment_method' => :'PaymentMethod',
        :'date_now' => :'Time',
        :'amount_collected' => :'Float',
        :'amount_withheld' => :'Float',
        :'withholding_tax' => :'Float',
        :'remarks' => :'String',
        :'transfer_bank_account_id' => :'Integer',
        :'bank_account_credit_card_id' => :'Integer',
        :'charge' => :'Float',
        :'cheque_date' => :'Time',
        :'cheque_number' => :'String',
        :'cheque_bank_account_id' => :'String',
        :'credit_card_bank_account_id' => :'String',
        :'remaining_collected' => :'Float',
        :'remaining_collected_type' => :'OneOfRemainingCollectedType',
        :'deduction_amount' => :'Float',
        :'payment_deduction_type' => :'OneOfDeductionType',
        :'petty_cash_name' => :'String',
        :'petty_cash_id' => :'Integer',
        :'cheque_id' => :'Integer',
        :'credit_card_id' => :'Integer',
        :'other_channel_id' => :'Integer',
        :'cheque_deposit_date' => :'Time',
        :'cheque_deposit_bank_id' => :'Integer',
        :'cheque_cashing_date' => :'Time',
        :'auto_create_withholding_tax' => :'Boolean',
        :'withholding_tax_income_type' => :'IncomeType',
        :'withholding_tax_income_description' => :'String',
        :'withholding_tax_entity' => :'Entity',
        :'exchange_rate_fee' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'cash_remarks',
        :'credit_card_number',
        :'bank_account_number',
        :'bank_account_id',
        :'withholding_tax',
        :'remarks',
        :'transfer_bank_account_id',
        :'bank_account_credit_card_id',
        :'cheque_date',
        :'cheque_number',
        :'cheque_bank_account_id',
        :'credit_card_bank_account_id',
        :'remaining_collected',
        :'remaining_collected_type',
        :'deduction_amount',
        :'payment_deduction_type',
        :'petty_cash_name',
        :'petty_cash_id',
        :'cheque_id',
        :'credit_card_id',
        :'other_channel_id',
        :'cheque_deposit_date',
        :'cheque_deposit_bank_id',
        :'cheque_cashing_date',
        :'withholding_tax_income_description',
        :'exchange_rate_fee'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PaymentModel` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PaymentModel`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cash_remarks')
        self.cash_remarks = attributes[:'cash_remarks']
      end

      if attributes.key?(:'exclude_vat')
        self.exclude_vat = attributes[:'exclude_vat']
      end

      if attributes.key?(:'cash_tax')
        self.cash_tax = attributes[:'cash_tax']
      end

      if attributes.key?(:'credit_card_number')
        self.credit_card_number = attributes[:'credit_card_number']
      end

      if attributes.key?(:'company_vat_rate')
        self.company_vat_rate = attributes[:'company_vat_rate']
      end

      if attributes.key?(:'net')
        self.net = attributes[:'net']
      end

      if attributes.key?(:'bank_account_number')
        self.bank_account_number = attributes[:'bank_account_number']
      end

      if attributes.key?(:'bank_account_id')
        self.bank_account_id = attributes[:'bank_account_id']
      end

      if attributes.key?(:'payment_method')
        self.payment_method = attributes[:'payment_method']
      end

      if attributes.key?(:'date_now')
        self.date_now = attributes[:'date_now']
      end

      if attributes.key?(:'amount_collected')
        self.amount_collected = attributes[:'amount_collected']
      end

      if attributes.key?(:'amount_withheld')
        self.amount_withheld = attributes[:'amount_withheld']
      end

      if attributes.key?(:'withholding_tax')
        self.withholding_tax = attributes[:'withholding_tax']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'transfer_bank_account_id')
        self.transfer_bank_account_id = attributes[:'transfer_bank_account_id']
      end

      if attributes.key?(:'bank_account_credit_card_id')
        self.bank_account_credit_card_id = attributes[:'bank_account_credit_card_id']
      end

      if attributes.key?(:'charge')
        self.charge = attributes[:'charge']
      end

      if attributes.key?(:'cheque_date')
        self.cheque_date = attributes[:'cheque_date']
      end

      if attributes.key?(:'cheque_number')
        self.cheque_number = attributes[:'cheque_number']
      end

      if attributes.key?(:'cheque_bank_account_id')
        self.cheque_bank_account_id = attributes[:'cheque_bank_account_id']
      end

      if attributes.key?(:'credit_card_bank_account_id')
        self.credit_card_bank_account_id = attributes[:'credit_card_bank_account_id']
      end

      if attributes.key?(:'remaining_collected')
        self.remaining_collected = attributes[:'remaining_collected']
      end

      if attributes.key?(:'remaining_collected_type')
        self.remaining_collected_type = attributes[:'remaining_collected_type']
      end

      if attributes.key?(:'deduction_amount')
        self.deduction_amount = attributes[:'deduction_amount']
      end

      if attributes.key?(:'payment_deduction_type')
        self.payment_deduction_type = attributes[:'payment_deduction_type']
      end

      if attributes.key?(:'petty_cash_name')
        self.petty_cash_name = attributes[:'petty_cash_name']
      end

      if attributes.key?(:'petty_cash_id')
        self.petty_cash_id = attributes[:'petty_cash_id']
      end

      if attributes.key?(:'cheque_id')
        self.cheque_id = attributes[:'cheque_id']
      end

      if attributes.key?(:'credit_card_id')
        self.credit_card_id = attributes[:'credit_card_id']
      end

      if attributes.key?(:'other_channel_id')
        self.other_channel_id = attributes[:'other_channel_id']
      end

      if attributes.key?(:'cheque_deposit_date')
        self.cheque_deposit_date = attributes[:'cheque_deposit_date']
      end

      if attributes.key?(:'cheque_deposit_bank_id')
        self.cheque_deposit_bank_id = attributes[:'cheque_deposit_bank_id']
      end

      if attributes.key?(:'cheque_cashing_date')
        self.cheque_cashing_date = attributes[:'cheque_cashing_date']
      end

      if attributes.key?(:'auto_create_withholding_tax')
        self.auto_create_withholding_tax = attributes[:'auto_create_withholding_tax']
      end

      if attributes.key?(:'withholding_tax_income_type')
        self.withholding_tax_income_type = attributes[:'withholding_tax_income_type']
      end

      if attributes.key?(:'withholding_tax_income_description')
        self.withholding_tax_income_description = attributes[:'withholding_tax_income_description']
      end

      if attributes.key?(:'withholding_tax_entity')
        self.withholding_tax_entity = attributes[:'withholding_tax_entity']
      end

      if attributes.key?(:'exchange_rate_fee')
        self.exchange_rate_fee = attributes[:'exchange_rate_fee']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cash_remarks == o.cash_remarks &&
          exclude_vat == o.exclude_vat &&
          cash_tax == o.cash_tax &&
          credit_card_number == o.credit_card_number &&
          company_vat_rate == o.company_vat_rate &&
          net == o.net &&
          bank_account_number == o.bank_account_number &&
          bank_account_id == o.bank_account_id &&
          payment_method == o.payment_method &&
          date_now == o.date_now &&
          amount_collected == o.amount_collected &&
          amount_withheld == o.amount_withheld &&
          withholding_tax == o.withholding_tax &&
          remarks == o.remarks &&
          transfer_bank_account_id == o.transfer_bank_account_id &&
          bank_account_credit_card_id == o.bank_account_credit_card_id &&
          charge == o.charge &&
          cheque_date == o.cheque_date &&
          cheque_number == o.cheque_number &&
          cheque_bank_account_id == o.cheque_bank_account_id &&
          credit_card_bank_account_id == o.credit_card_bank_account_id &&
          remaining_collected == o.remaining_collected &&
          remaining_collected_type == o.remaining_collected_type &&
          deduction_amount == o.deduction_amount &&
          payment_deduction_type == o.payment_deduction_type &&
          petty_cash_name == o.petty_cash_name &&
          petty_cash_id == o.petty_cash_id &&
          cheque_id == o.cheque_id &&
          credit_card_id == o.credit_card_id &&
          other_channel_id == o.other_channel_id &&
          cheque_deposit_date == o.cheque_deposit_date &&
          cheque_deposit_bank_id == o.cheque_deposit_bank_id &&
          cheque_cashing_date == o.cheque_cashing_date &&
          auto_create_withholding_tax == o.auto_create_withholding_tax &&
          withholding_tax_income_type == o.withholding_tax_income_type &&
          withholding_tax_income_description == o.withholding_tax_income_description &&
          withholding_tax_entity == o.withholding_tax_entity &&
          exchange_rate_fee == o.exchange_rate_fee
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cash_remarks, exclude_vat, cash_tax, credit_card_number, company_vat_rate, net, bank_account_number, bank_account_id, payment_method, date_now, amount_collected, amount_withheld, withholding_tax, remarks, transfer_bank_account_id, bank_account_credit_card_id, charge, cheque_date, cheque_number, cheque_bank_account_id, credit_card_bank_account_id, remaining_collected, remaining_collected_type, deduction_amount, payment_deduction_type, petty_cash_name, petty_cash_id, cheque_id, credit_card_id, other_channel_id, cheque_deposit_date, cheque_deposit_bank_id, cheque_cashing_date, auto_create_withholding_tax, withholding_tax_income_type, withholding_tax_income_description, withholding_tax_entity, exchange_rate_fee].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
