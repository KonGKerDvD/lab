=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class PayrollDetail
    attr_accessor :id

    attr_accessor :payroll_id

    attr_accessor :employee_id

    attr_accessor :salary

    attr_accessor :social_security_value

    attr_accessor :commission

    attr_accessor :bonus

    attr_accessor :deduction

    attr_accessor :withholding_tax

    attr_accessor :status

    attr_accessor :is_delete

    attr_accessor :withheld

    attr_accessor :date_payment

    attr_accessor :fee

    attr_accessor :ref

    attr_accessor :transaction_id

    attr_accessor :amount

    attr_accessor :pay_status

    attr_accessor :remarks

    attr_accessor :expense_id

    attr_accessor :overtime

    attr_accessor :advance

    attr_accessor :other_addition

    attr_accessor :other_deduction

    attr_accessor :provident_fund

    attr_accessor :security_money

    attr_accessor :value

    attr_accessor :note

    attr_accessor :created_on

    attr_accessor :created_by

    attr_accessor :modified_on

    attr_accessor :last_modified_by

    attr_accessor :employer_social_security

    attr_accessor :allowance

    attr_accessor :cola

    attr_accessor :medical_expense

    attr_accessor :accommodation

    attr_accessor :director_remuneration

    attr_accessor :method_payment

    attr_accessor :bank_id

    attr_accessor :account_number

    attr_accessor :account_number_masking

    attr_accessor :employee_title

    attr_accessor :employee_code

    attr_accessor :employee_first_name

    attr_accessor :employee_last_name

    attr_accessor :employee_first_name_foreign

    attr_accessor :employee_last_name_foreign

    attr_accessor :employee_start_date

    attr_accessor :is_social_security_registered

    attr_accessor :bank_branch_code

    attr_accessor :account_type

    attr_accessor :reference_id

    attr_accessor :is_migrate

    attr_accessor :employee

    attr_accessor :expense_list

    attr_accessor :payroll

    attr_accessor :bank

    attr_accessor :last_modified_by_user

    attr_accessor :rule_compile_status

    attr_accessor :employer_account_branch

    attr_accessor :employer_account_number

    attr_accessor :bank_account_id

    attr_accessor :payment_remarks

    attr_accessor :payroll_payment_id

    attr_accessor :kc_processing_status

    attr_accessor :department_id

    attr_accessor :department_name

    attr_accessor :department_code

    attr_accessor :work_days

    attr_accessor :wage

    attr_accessor :is_social_security_auto_cal

    attr_accessor :social_security_percent

    attr_accessor :send_email_status

    attr_accessor :student_loan

    attr_accessor :conditions_withholding_tax

    attr_accessor :overtime_pnd

    attr_accessor :commission_pnd

    attr_accessor :bonus_pnd

    attr_accessor :allowance_pnd

    attr_accessor :cola_pnd

    attr_accessor :medical_expense_pnd

    attr_accessor :accommodation_pnd

    attr_accessor :director_remuneration_pnd

    attr_accessor :other_addition_pnd

    attr_accessor :withholding_tax401

    attr_accessor :withholding_tax402

    attr_accessor :status_int

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'payroll_id' => :'payrollId',
        :'employee_id' => :'employeeId',
        :'salary' => :'salary',
        :'social_security_value' => :'socialSecurityValue',
        :'commission' => :'commission',
        :'bonus' => :'bonus',
        :'deduction' => :'deduction',
        :'withholding_tax' => :'withholdingTax',
        :'status' => :'status',
        :'is_delete' => :'isDelete',
        :'withheld' => :'withheld',
        :'date_payment' => :'datePayment',
        :'fee' => :'fee',
        :'ref' => :'ref',
        :'transaction_id' => :'transactionId',
        :'amount' => :'amount',
        :'pay_status' => :'payStatus',
        :'remarks' => :'remarks',
        :'expense_id' => :'expenseId',
        :'overtime' => :'overtime',
        :'advance' => :'advance',
        :'other_addition' => :'otherAddition',
        :'other_deduction' => :'otherDeduction',
        :'provident_fund' => :'providentFund',
        :'security_money' => :'securityMoney',
        :'value' => :'value',
        :'note' => :'note',
        :'created_on' => :'createdOn',
        :'created_by' => :'createdBy',
        :'modified_on' => :'modifiedOn',
        :'last_modified_by' => :'lastModifiedBy',
        :'employer_social_security' => :'employerSocialSecurity',
        :'allowance' => :'allowance',
        :'cola' => :'cola',
        :'medical_expense' => :'medicalExpense',
        :'accommodation' => :'accommodation',
        :'director_remuneration' => :'directorRemuneration',
        :'method_payment' => :'methodPayment',
        :'bank_id' => :'bankId',
        :'account_number' => :'accountNumber',
        :'account_number_masking' => :'accountNumberMasking',
        :'employee_title' => :'employeeTitle',
        :'employee_code' => :'employeeCode',
        :'employee_first_name' => :'employeeFirstName',
        :'employee_last_name' => :'employeeLastName',
        :'employee_first_name_foreign' => :'employeeFirstNameForeign',
        :'employee_last_name_foreign' => :'employeeLastNameForeign',
        :'employee_start_date' => :'employeeStartDate',
        :'is_social_security_registered' => :'isSocialSecurityRegistered',
        :'bank_branch_code' => :'bankBranchCode',
        :'account_type' => :'accountType',
        :'reference_id' => :'referenceId',
        :'is_migrate' => :'isMigrate',
        :'employee' => :'employee',
        :'expense_list' => :'expenseList',
        :'payroll' => :'payroll',
        :'bank' => :'bank',
        :'last_modified_by_user' => :'lastModifiedByUser',
        :'rule_compile_status' => :'ruleCompileStatus',
        :'employer_account_branch' => :'employerAccountBranch',
        :'employer_account_number' => :'employerAccountNumber',
        :'bank_account_id' => :'bankAccountId',
        :'payment_remarks' => :'paymentRemarks',
        :'payroll_payment_id' => :'payrollPaymentId',
        :'kc_processing_status' => :'kcProcessingStatus',
        :'department_id' => :'departmentId',
        :'department_name' => :'departmentName',
        :'department_code' => :'departmentCode',
        :'work_days' => :'workDays',
        :'wage' => :'wage',
        :'is_social_security_auto_cal' => :'isSocialSecurityAutoCal',
        :'social_security_percent' => :'socialSecurityPercent',
        :'send_email_status' => :'sendEmailStatus',
        :'student_loan' => :'studentLoan',
        :'conditions_withholding_tax' => :'conditionsWithholdingTax',
        :'overtime_pnd' => :'overtimePND',
        :'commission_pnd' => :'commissionPND',
        :'bonus_pnd' => :'bonusPND',
        :'allowance_pnd' => :'allowancePND',
        :'cola_pnd' => :'colaPND',
        :'medical_expense_pnd' => :'medicalExpensePND',
        :'accommodation_pnd' => :'accommodationPND',
        :'director_remuneration_pnd' => :'directorRemunerationPND',
        :'other_addition_pnd' => :'otherAdditionPND',
        :'withholding_tax401' => :'withholdingTax401',
        :'withholding_tax402' => :'withholdingTax402',
        :'status_int' => :'statusInt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'payroll_id' => :'Integer',
        :'employee_id' => :'Integer',
        :'salary' => :'Float',
        :'social_security_value' => :'Float',
        :'commission' => :'Float',
        :'bonus' => :'Float',
        :'deduction' => :'Float',
        :'withholding_tax' => :'Float',
        :'status' => :'PayrollDetailStatus',
        :'is_delete' => :'Boolean',
        :'withheld' => :'Float',
        :'date_payment' => :'Time',
        :'fee' => :'Float',
        :'ref' => :'String',
        :'transaction_id' => :'String',
        :'amount' => :'Float',
        :'pay_status' => :'Integer',
        :'remarks' => :'String',
        :'expense_id' => :'Integer',
        :'overtime' => :'Float',
        :'advance' => :'Float',
        :'other_addition' => :'Float',
        :'other_deduction' => :'Float',
        :'provident_fund' => :'Float',
        :'security_money' => :'Float',
        :'value' => :'Float',
        :'note' => :'String',
        :'created_on' => :'Time',
        :'created_by' => :'Integer',
        :'modified_on' => :'Time',
        :'last_modified_by' => :'Integer',
        :'employer_social_security' => :'Float',
        :'allowance' => :'Float',
        :'cola' => :'Float',
        :'medical_expense' => :'Float',
        :'accommodation' => :'Float',
        :'director_remuneration' => :'Float',
        :'method_payment' => :'Integer',
        :'bank_id' => :'Integer',
        :'account_number' => :'String',
        :'account_number_masking' => :'String',
        :'employee_title' => :'String',
        :'employee_code' => :'String',
        :'employee_first_name' => :'String',
        :'employee_last_name' => :'String',
        :'employee_first_name_foreign' => :'String',
        :'employee_last_name_foreign' => :'String',
        :'employee_start_date' => :'Time',
        :'is_social_security_registered' => :'Boolean',
        :'bank_branch_code' => :'String',
        :'account_type' => :'OneOfBankAccountType',
        :'reference_id' => :'String',
        :'is_migrate' => :'Boolean',
        :'employee' => :'OneOfEmployee',
        :'expense_list' => :'OneOfExpenseList',
        :'payroll' => :'OneOfPayroll',
        :'bank' => :'OneOfBank',
        :'last_modified_by_user' => :'OneOfUser',
        :'rule_compile_status' => :'RuleCompileStatus',
        :'employer_account_branch' => :'String',
        :'employer_account_number' => :'String',
        :'bank_account_id' => :'Integer',
        :'payment_remarks' => :'String',
        :'payroll_payment_id' => :'Integer',
        :'kc_processing_status' => :'Integer',
        :'department_id' => :'Integer',
        :'department_name' => :'String',
        :'department_code' => :'String',
        :'work_days' => :'Float',
        :'wage' => :'Float',
        :'is_social_security_auto_cal' => :'Boolean',
        :'social_security_percent' => :'Float',
        :'send_email_status' => :'OneOfSendEmailStatus',
        :'student_loan' => :'Float',
        :'conditions_withholding_tax' => :'OneOfConditionsOfWithholdingTax',
        :'overtime_pnd' => :'Integer',
        :'commission_pnd' => :'Integer',
        :'bonus_pnd' => :'Integer',
        :'allowance_pnd' => :'Integer',
        :'cola_pnd' => :'Integer',
        :'medical_expense_pnd' => :'Integer',
        :'accommodation_pnd' => :'Integer',
        :'director_remuneration_pnd' => :'Integer',
        :'other_addition_pnd' => :'Integer',
        :'withholding_tax401' => :'Float',
        :'withholding_tax402' => :'Float',
        :'status_int' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'date_payment',
        :'fee',
        :'ref',
        :'transaction_id',
        :'amount',
        :'pay_status',
        :'remarks',
        :'expense_id',
        :'note',
        :'created_on',
        :'created_by',
        :'modified_on',
        :'method_payment',
        :'bank_id',
        :'account_number',
        :'account_number_masking',
        :'employee_title',
        :'employee_code',
        :'employee_first_name',
        :'employee_last_name',
        :'employee_first_name_foreign',
        :'employee_last_name_foreign',
        :'employee_start_date',
        :'bank_branch_code',
        :'account_type',
        :'reference_id',
        :'employee',
        :'expense_list',
        :'payroll',
        :'bank',
        :'last_modified_by_user',
        :'employer_account_branch',
        :'employer_account_number',
        :'bank_account_id',
        :'payment_remarks',
        :'payroll_payment_id',
        :'kc_processing_status',
        :'department_id',
        :'department_name',
        :'department_code',
        :'work_days',
        :'wage',
        :'send_email_status',
        :'conditions_withholding_tax',
        :'overtime_pnd',
        :'commission_pnd',
        :'bonus_pnd',
        :'allowance_pnd',
        :'cola_pnd',
        :'medical_expense_pnd',
        :'accommodation_pnd',
        :'director_remuneration_pnd',
        :'other_addition_pnd',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PayrollDetail` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PayrollDetail`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'payroll_id')
        self.payroll_id = attributes[:'payroll_id']
      end

      if attributes.key?(:'employee_id')
        self.employee_id = attributes[:'employee_id']
      end

      if attributes.key?(:'salary')
        self.salary = attributes[:'salary']
      end

      if attributes.key?(:'social_security_value')
        self.social_security_value = attributes[:'social_security_value']
      end

      if attributes.key?(:'commission')
        self.commission = attributes[:'commission']
      end

      if attributes.key?(:'bonus')
        self.bonus = attributes[:'bonus']
      end

      if attributes.key?(:'deduction')
        self.deduction = attributes[:'deduction']
      end

      if attributes.key?(:'withholding_tax')
        self.withholding_tax = attributes[:'withholding_tax']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'is_delete')
        self.is_delete = attributes[:'is_delete']
      end

      if attributes.key?(:'withheld')
        self.withheld = attributes[:'withheld']
      end

      if attributes.key?(:'date_payment')
        self.date_payment = attributes[:'date_payment']
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      end

      if attributes.key?(:'ref')
        self.ref = attributes[:'ref']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.key?(:'pay_status')
        self.pay_status = attributes[:'pay_status']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'expense_id')
        self.expense_id = attributes[:'expense_id']
      end

      if attributes.key?(:'overtime')
        self.overtime = attributes[:'overtime']
      end

      if attributes.key?(:'advance')
        self.advance = attributes[:'advance']
      end

      if attributes.key?(:'other_addition')
        self.other_addition = attributes[:'other_addition']
      end

      if attributes.key?(:'other_deduction')
        self.other_deduction = attributes[:'other_deduction']
      end

      if attributes.key?(:'provident_fund')
        self.provident_fund = attributes[:'provident_fund']
      end

      if attributes.key?(:'security_money')
        self.security_money = attributes[:'security_money']
      end

      if attributes.key?(:'value')
        self.value = attributes[:'value']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'last_modified_by')
        self.last_modified_by = attributes[:'last_modified_by']
      end

      if attributes.key?(:'employer_social_security')
        self.employer_social_security = attributes[:'employer_social_security']
      end

      if attributes.key?(:'allowance')
        self.allowance = attributes[:'allowance']
      end

      if attributes.key?(:'cola')
        self.cola = attributes[:'cola']
      end

      if attributes.key?(:'medical_expense')
        self.medical_expense = attributes[:'medical_expense']
      end

      if attributes.key?(:'accommodation')
        self.accommodation = attributes[:'accommodation']
      end

      if attributes.key?(:'director_remuneration')
        self.director_remuneration = attributes[:'director_remuneration']
      end

      if attributes.key?(:'method_payment')
        self.method_payment = attributes[:'method_payment']
      end

      if attributes.key?(:'bank_id')
        self.bank_id = attributes[:'bank_id']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'account_number_masking')
        self.account_number_masking = attributes[:'account_number_masking']
      end

      if attributes.key?(:'employee_title')
        self.employee_title = attributes[:'employee_title']
      end

      if attributes.key?(:'employee_code')
        self.employee_code = attributes[:'employee_code']
      end

      if attributes.key?(:'employee_first_name')
        self.employee_first_name = attributes[:'employee_first_name']
      end

      if attributes.key?(:'employee_last_name')
        self.employee_last_name = attributes[:'employee_last_name']
      end

      if attributes.key?(:'employee_first_name_foreign')
        self.employee_first_name_foreign = attributes[:'employee_first_name_foreign']
      end

      if attributes.key?(:'employee_last_name_foreign')
        self.employee_last_name_foreign = attributes[:'employee_last_name_foreign']
      end

      if attributes.key?(:'employee_start_date')
        self.employee_start_date = attributes[:'employee_start_date']
      end

      if attributes.key?(:'is_social_security_registered')
        self.is_social_security_registered = attributes[:'is_social_security_registered']
      end

      if attributes.key?(:'bank_branch_code')
        self.bank_branch_code = attributes[:'bank_branch_code']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      end

      if attributes.key?(:'is_migrate')
        self.is_migrate = attributes[:'is_migrate']
      end

      if attributes.key?(:'employee')
        self.employee = attributes[:'employee']
      end

      if attributes.key?(:'expense_list')
        self.expense_list = attributes[:'expense_list']
      end

      if attributes.key?(:'payroll')
        self.payroll = attributes[:'payroll']
      end

      if attributes.key?(:'bank')
        self.bank = attributes[:'bank']
      end

      if attributes.key?(:'last_modified_by_user')
        self.last_modified_by_user = attributes[:'last_modified_by_user']
      end

      if attributes.key?(:'rule_compile_status')
        self.rule_compile_status = attributes[:'rule_compile_status']
      end

      if attributes.key?(:'employer_account_branch')
        self.employer_account_branch = attributes[:'employer_account_branch']
      end

      if attributes.key?(:'employer_account_number')
        self.employer_account_number = attributes[:'employer_account_number']
      end

      if attributes.key?(:'bank_account_id')
        self.bank_account_id = attributes[:'bank_account_id']
      end

      if attributes.key?(:'payment_remarks')
        self.payment_remarks = attributes[:'payment_remarks']
      end

      if attributes.key?(:'payroll_payment_id')
        self.payroll_payment_id = attributes[:'payroll_payment_id']
      end

      if attributes.key?(:'kc_processing_status')
        self.kc_processing_status = attributes[:'kc_processing_status']
      end

      if attributes.key?(:'department_id')
        self.department_id = attributes[:'department_id']
      end

      if attributes.key?(:'department_name')
        self.department_name = attributes[:'department_name']
      end

      if attributes.key?(:'department_code')
        self.department_code = attributes[:'department_code']
      end

      if attributes.key?(:'work_days')
        self.work_days = attributes[:'work_days']
      end

      if attributes.key?(:'wage')
        self.wage = attributes[:'wage']
      end

      if attributes.key?(:'is_social_security_auto_cal')
        self.is_social_security_auto_cal = attributes[:'is_social_security_auto_cal']
      end

      if attributes.key?(:'social_security_percent')
        self.social_security_percent = attributes[:'social_security_percent']
      else
        self.social_security_percent = 5
      end

      if attributes.key?(:'send_email_status')
        self.send_email_status = attributes[:'send_email_status']
      end

      if attributes.key?(:'student_loan')
        self.student_loan = attributes[:'student_loan']
      end

      if attributes.key?(:'conditions_withholding_tax')
        self.conditions_withholding_tax = attributes[:'conditions_withholding_tax']
      end

      if attributes.key?(:'overtime_pnd')
        self.overtime_pnd = attributes[:'overtime_pnd']
      end

      if attributes.key?(:'commission_pnd')
        self.commission_pnd = attributes[:'commission_pnd']
      end

      if attributes.key?(:'bonus_pnd')
        self.bonus_pnd = attributes[:'bonus_pnd']
      end

      if attributes.key?(:'allowance_pnd')
        self.allowance_pnd = attributes[:'allowance_pnd']
      end

      if attributes.key?(:'cola_pnd')
        self.cola_pnd = attributes[:'cola_pnd']
      end

      if attributes.key?(:'medical_expense_pnd')
        self.medical_expense_pnd = attributes[:'medical_expense_pnd']
      end

      if attributes.key?(:'accommodation_pnd')
        self.accommodation_pnd = attributes[:'accommodation_pnd']
      end

      if attributes.key?(:'director_remuneration_pnd')
        self.director_remuneration_pnd = attributes[:'director_remuneration_pnd']
      end

      if attributes.key?(:'other_addition_pnd')
        self.other_addition_pnd = attributes[:'other_addition_pnd']
      end

      if attributes.key?(:'withholding_tax401')
        self.withholding_tax401 = attributes[:'withholding_tax401']
      end

      if attributes.key?(:'withholding_tax402')
        self.withholding_tax402 = attributes[:'withholding_tax402']
      end

      if attributes.key?(:'status_int')
        self.status_int = attributes[:'status_int']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          payroll_id == o.payroll_id &&
          employee_id == o.employee_id &&
          salary == o.salary &&
          social_security_value == o.social_security_value &&
          commission == o.commission &&
          bonus == o.bonus &&
          deduction == o.deduction &&
          withholding_tax == o.withholding_tax &&
          status == o.status &&
          is_delete == o.is_delete &&
          withheld == o.withheld &&
          date_payment == o.date_payment &&
          fee == o.fee &&
          ref == o.ref &&
          transaction_id == o.transaction_id &&
          amount == o.amount &&
          pay_status == o.pay_status &&
          remarks == o.remarks &&
          expense_id == o.expense_id &&
          overtime == o.overtime &&
          advance == o.advance &&
          other_addition == o.other_addition &&
          other_deduction == o.other_deduction &&
          provident_fund == o.provident_fund &&
          security_money == o.security_money &&
          value == o.value &&
          note == o.note &&
          created_on == o.created_on &&
          created_by == o.created_by &&
          modified_on == o.modified_on &&
          last_modified_by == o.last_modified_by &&
          employer_social_security == o.employer_social_security &&
          allowance == o.allowance &&
          cola == o.cola &&
          medical_expense == o.medical_expense &&
          accommodation == o.accommodation &&
          director_remuneration == o.director_remuneration &&
          method_payment == o.method_payment &&
          bank_id == o.bank_id &&
          account_number == o.account_number &&
          account_number_masking == o.account_number_masking &&
          employee_title == o.employee_title &&
          employee_code == o.employee_code &&
          employee_first_name == o.employee_first_name &&
          employee_last_name == o.employee_last_name &&
          employee_first_name_foreign == o.employee_first_name_foreign &&
          employee_last_name_foreign == o.employee_last_name_foreign &&
          employee_start_date == o.employee_start_date &&
          is_social_security_registered == o.is_social_security_registered &&
          bank_branch_code == o.bank_branch_code &&
          account_type == o.account_type &&
          reference_id == o.reference_id &&
          is_migrate == o.is_migrate &&
          employee == o.employee &&
          expense_list == o.expense_list &&
          payroll == o.payroll &&
          bank == o.bank &&
          last_modified_by_user == o.last_modified_by_user &&
          rule_compile_status == o.rule_compile_status &&
          employer_account_branch == o.employer_account_branch &&
          employer_account_number == o.employer_account_number &&
          bank_account_id == o.bank_account_id &&
          payment_remarks == o.payment_remarks &&
          payroll_payment_id == o.payroll_payment_id &&
          kc_processing_status == o.kc_processing_status &&
          department_id == o.department_id &&
          department_name == o.department_name &&
          department_code == o.department_code &&
          work_days == o.work_days &&
          wage == o.wage &&
          is_social_security_auto_cal == o.is_social_security_auto_cal &&
          social_security_percent == o.social_security_percent &&
          send_email_status == o.send_email_status &&
          student_loan == o.student_loan &&
          conditions_withholding_tax == o.conditions_withholding_tax &&
          overtime_pnd == o.overtime_pnd &&
          commission_pnd == o.commission_pnd &&
          bonus_pnd == o.bonus_pnd &&
          allowance_pnd == o.allowance_pnd &&
          cola_pnd == o.cola_pnd &&
          medical_expense_pnd == o.medical_expense_pnd &&
          accommodation_pnd == o.accommodation_pnd &&
          director_remuneration_pnd == o.director_remuneration_pnd &&
          other_addition_pnd == o.other_addition_pnd &&
          withholding_tax401 == o.withholding_tax401 &&
          withholding_tax402 == o.withholding_tax402 &&
          status_int == o.status_int
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, payroll_id, employee_id, salary, social_security_value, commission, bonus, deduction, withholding_tax, status, is_delete, withheld, date_payment, fee, ref, transaction_id, amount, pay_status, remarks, expense_id, overtime, advance, other_addition, other_deduction, provident_fund, security_money, value, note, created_on, created_by, modified_on, last_modified_by, employer_social_security, allowance, cola, medical_expense, accommodation, director_remuneration, method_payment, bank_id, account_number, account_number_masking, employee_title, employee_code, employee_first_name, employee_last_name, employee_first_name_foreign, employee_last_name_foreign, employee_start_date, is_social_security_registered, bank_branch_code, account_type, reference_id, is_migrate, employee, expense_list, payroll, bank, last_modified_by_user, rule_compile_status, employer_account_branch, employer_account_number, bank_account_id, payment_remarks, payroll_payment_id, kc_processing_status, department_id, department_name, department_code, work_days, wage, is_social_security_auto_cal, social_security_percent, send_email_status, student_loan, conditions_withholding_tax, overtime_pnd, commission_pnd, bonus_pnd, allowance_pnd, cola_pnd, medical_expense_pnd, accommodation_pnd, director_remuneration_pnd, other_addition_pnd, withholding_tax401, withholding_tax402, status_int].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
