=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class PayrollPreferences
    attr_accessor :company_id

    attr_accessor :is_social_security_registered

    attr_accessor :employer_account_number

    attr_accessor :employer_account_branch

    attr_accessor :k_corporate_client_code

    attr_accessor :k_corporate_account_number

    attr_accessor :payroll_bank_account_id

    attr_accessor :k_connect_product_code

    attr_accessor :overtime_pnd

    attr_accessor :commission_pnd

    attr_accessor :bonus_pnd

    attr_accessor :allowance_pnd

    attr_accessor :cola_pnd

    attr_accessor :medical_expense_pnd

    attr_accessor :accommodation_pnd

    attr_accessor :director_remuneration_pnd

    attr_accessor :other_addition_pnd

    attr_accessor :access_k_connect

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'company_id' => :'companyId',
        :'is_social_security_registered' => :'isSocialSecurityRegistered',
        :'employer_account_number' => :'employerAccountNumber',
        :'employer_account_branch' => :'employerAccountBranch',
        :'k_corporate_client_code' => :'kCorporateClientCode',
        :'k_corporate_account_number' => :'kCorporateAccountNumber',
        :'payroll_bank_account_id' => :'payrollBankAccountId',
        :'k_connect_product_code' => :'kConnect_ProductCode',
        :'overtime_pnd' => :'overtimePND',
        :'commission_pnd' => :'commissionPND',
        :'bonus_pnd' => :'bonusPND',
        :'allowance_pnd' => :'allowancePND',
        :'cola_pnd' => :'colaPND',
        :'medical_expense_pnd' => :'medicalExpensePND',
        :'accommodation_pnd' => :'accommodationPND',
        :'director_remuneration_pnd' => :'directorRemunerationPND',
        :'other_addition_pnd' => :'otherAdditionPND',
        :'access_k_connect' => :'accessKConnect'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'company_id' => :'Integer',
        :'is_social_security_registered' => :'Boolean',
        :'employer_account_number' => :'String',
        :'employer_account_branch' => :'String',
        :'k_corporate_client_code' => :'String',
        :'k_corporate_account_number' => :'String',
        :'payroll_bank_account_id' => :'Integer',
        :'k_connect_product_code' => :'KConnectProductCode',
        :'overtime_pnd' => :'Integer',
        :'commission_pnd' => :'Integer',
        :'bonus_pnd' => :'Integer',
        :'allowance_pnd' => :'Integer',
        :'cola_pnd' => :'Integer',
        :'medical_expense_pnd' => :'Integer',
        :'accommodation_pnd' => :'Integer',
        :'director_remuneration_pnd' => :'Integer',
        :'other_addition_pnd' => :'Integer',
        :'access_k_connect' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'employer_account_number',
        :'employer_account_branch',
        :'k_corporate_client_code',
        :'k_corporate_account_number',
        :'payroll_bank_account_id',
        :'overtime_pnd',
        :'commission_pnd',
        :'bonus_pnd',
        :'allowance_pnd',
        :'cola_pnd',
        :'medical_expense_pnd',
        :'accommodation_pnd',
        :'director_remuneration_pnd',
        :'other_addition_pnd',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::PayrollPreferences` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::PayrollPreferences`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'is_social_security_registered')
        self.is_social_security_registered = attributes[:'is_social_security_registered']
      end

      if attributes.key?(:'employer_account_number')
        self.employer_account_number = attributes[:'employer_account_number']
      end

      if attributes.key?(:'employer_account_branch')
        self.employer_account_branch = attributes[:'employer_account_branch']
      end

      if attributes.key?(:'k_corporate_client_code')
        self.k_corporate_client_code = attributes[:'k_corporate_client_code']
      end

      if attributes.key?(:'k_corporate_account_number')
        self.k_corporate_account_number = attributes[:'k_corporate_account_number']
      end

      if attributes.key?(:'payroll_bank_account_id')
        self.payroll_bank_account_id = attributes[:'payroll_bank_account_id']
      end

      if attributes.key?(:'k_connect_product_code')
        self.k_connect_product_code = attributes[:'k_connect_product_code']
      end

      if attributes.key?(:'overtime_pnd')
        self.overtime_pnd = attributes[:'overtime_pnd']
      end

      if attributes.key?(:'commission_pnd')
        self.commission_pnd = attributes[:'commission_pnd']
      end

      if attributes.key?(:'bonus_pnd')
        self.bonus_pnd = attributes[:'bonus_pnd']
      end

      if attributes.key?(:'allowance_pnd')
        self.allowance_pnd = attributes[:'allowance_pnd']
      end

      if attributes.key?(:'cola_pnd')
        self.cola_pnd = attributes[:'cola_pnd']
      end

      if attributes.key?(:'medical_expense_pnd')
        self.medical_expense_pnd = attributes[:'medical_expense_pnd']
      end

      if attributes.key?(:'accommodation_pnd')
        self.accommodation_pnd = attributes[:'accommodation_pnd']
      end

      if attributes.key?(:'director_remuneration_pnd')
        self.director_remuneration_pnd = attributes[:'director_remuneration_pnd']
      end

      if attributes.key?(:'other_addition_pnd')
        self.other_addition_pnd = attributes[:'other_addition_pnd']
      end

      if attributes.key?(:'access_k_connect')
        self.access_k_connect = attributes[:'access_k_connect']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          company_id == o.company_id &&
          is_social_security_registered == o.is_social_security_registered &&
          employer_account_number == o.employer_account_number &&
          employer_account_branch == o.employer_account_branch &&
          k_corporate_client_code == o.k_corporate_client_code &&
          k_corporate_account_number == o.k_corporate_account_number &&
          payroll_bank_account_id == o.payroll_bank_account_id &&
          k_connect_product_code == o.k_connect_product_code &&
          overtime_pnd == o.overtime_pnd &&
          commission_pnd == o.commission_pnd &&
          bonus_pnd == o.bonus_pnd &&
          allowance_pnd == o.allowance_pnd &&
          cola_pnd == o.cola_pnd &&
          medical_expense_pnd == o.medical_expense_pnd &&
          accommodation_pnd == o.accommodation_pnd &&
          director_remuneration_pnd == o.director_remuneration_pnd &&
          other_addition_pnd == o.other_addition_pnd &&
          access_k_connect == o.access_k_connect
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [company_id, is_social_security_registered, employer_account_number, employer_account_branch, k_corporate_client_code, k_corporate_account_number, payroll_bank_account_id, k_connect_product_code, overtime_pnd, commission_pnd, bonus_pnd, allowance_pnd, cola_pnd, medical_expense_pnd, accommodation_pnd, director_remuneration_pnd, other_addition_pnd, access_k_connect].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
