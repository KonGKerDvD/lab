=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class Payroll
    attr_accessor :id

    attr_accessor :company_id

    attr_accessor :start_date

    attr_accessor :end_date

    attr_accessor :payment_cycle

    attr_accessor :status

    attr_accessor :is_delete

    attr_accessor :created_on

    attr_accessor :modified_on

    attr_accessor :created_by

    attr_accessor :modified_by

    attr_accessor :expense_id

    attr_accessor :gallery_id

    attr_accessor :remarks

    attr_accessor :total

    attr_accessor :bank_id

    attr_accessor :account_number

    attr_accessor :add_amount

    attr_accessor :deduct_amount

    attr_accessor :net_total

    attr_accessor :running_number_type

    attr_accessor :date_payment

    attr_accessor :document_date

    attr_accessor :total_payroll_cash

    attr_accessor :total_payroll_transfer

    attr_accessor :fee

    attr_accessor :payment_remarks

    attr_accessor :employer_account_number

    attr_accessor :employer_account_branch

    attr_accessor :bank_account_id

    attr_accessor :account_type

    attr_accessor :reference_id

    attr_accessor :payroll_version

    attr_accessor :company

    attr_accessor :created_by_user

    attr_accessor :modified_by_user

    attr_accessor :payroll_detail

    attr_accessor :gallery

    attr_accessor :is_migrate

    attr_accessor :rule_compile_status

    attr_accessor :is_partial_payments

    attr_accessor :paid_period

    attr_accessor :social_security_percent

    attr_accessor :status_int

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'company_id' => :'companyId',
        :'start_date' => :'startDate',
        :'end_date' => :'endDate',
        :'payment_cycle' => :'paymentCycle',
        :'status' => :'status',
        :'is_delete' => :'isDelete',
        :'created_on' => :'createdOn',
        :'modified_on' => :'modifiedOn',
        :'created_by' => :'createdBy',
        :'modified_by' => :'modifiedBy',
        :'expense_id' => :'expenseId',
        :'gallery_id' => :'galleryId',
        :'remarks' => :'remarks',
        :'total' => :'total',
        :'bank_id' => :'bankId',
        :'account_number' => :'accountNumber',
        :'add_amount' => :'addAmount',
        :'deduct_amount' => :'deductAmount',
        :'net_total' => :'netTotal',
        :'running_number_type' => :'runningNumberType',
        :'date_payment' => :'datePayment',
        :'document_date' => :'documentDate',
        :'total_payroll_cash' => :'totalPayrollCash',
        :'total_payroll_transfer' => :'totalPayrollTransfer',
        :'fee' => :'fee',
        :'payment_remarks' => :'paymentRemarks',
        :'employer_account_number' => :'employerAccountNumber',
        :'employer_account_branch' => :'employerAccountBranch',
        :'bank_account_id' => :'bankAccountId',
        :'account_type' => :'accountType',
        :'reference_id' => :'referenceId',
        :'payroll_version' => :'payrollVersion',
        :'company' => :'company',
        :'created_by_user' => :'createdByUser',
        :'modified_by_user' => :'modifiedByUser',
        :'payroll_detail' => :'payrollDetail',
        :'gallery' => :'gallery',
        :'is_migrate' => :'isMigrate',
        :'rule_compile_status' => :'ruleCompileStatus',
        :'is_partial_payments' => :'isPartialPayments',
        :'paid_period' => :'paidPeriod',
        :'social_security_percent' => :'socialSecurityPercent',
        :'status_int' => :'statusInt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'company_id' => :'Integer',
        :'start_date' => :'Time',
        :'end_date' => :'Time',
        :'payment_cycle' => :'Integer',
        :'status' => :'PayrollStatus',
        :'is_delete' => :'Boolean',
        :'created_on' => :'Time',
        :'modified_on' => :'Time',
        :'created_by' => :'Integer',
        :'modified_by' => :'Integer',
        :'expense_id' => :'Integer',
        :'gallery_id' => :'Integer',
        :'remarks' => :'String',
        :'total' => :'Float',
        :'bank_id' => :'Integer',
        :'account_number' => :'String',
        :'add_amount' => :'Float',
        :'deduct_amount' => :'Float',
        :'net_total' => :'Float',
        :'running_number_type' => :'Integer',
        :'date_payment' => :'Time',
        :'document_date' => :'Time',
        :'total_payroll_cash' => :'Float',
        :'total_payroll_transfer' => :'Float',
        :'fee' => :'Float',
        :'payment_remarks' => :'String',
        :'employer_account_number' => :'String',
        :'employer_account_branch' => :'String',
        :'bank_account_id' => :'Integer',
        :'account_type' => :'OneOfBankAccountType',
        :'reference_id' => :'String',
        :'payroll_version' => :'Integer',
        :'company' => :'OneOfCompany',
        :'created_by_user' => :'OneOfUser',
        :'modified_by_user' => :'OneOfUser',
        :'payroll_detail' => :'Array<PayrollDetail>',
        :'gallery' => :'OneOfGallery',
        :'is_migrate' => :'Boolean',
        :'rule_compile_status' => :'RuleCompileStatus',
        :'is_partial_payments' => :'Boolean',
        :'paid_period' => :'OneOfPaidPeriod',
        :'social_security_percent' => :'Float',
        :'status_int' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'created_on',
        :'modified_on',
        :'created_by',
        :'modified_by',
        :'expense_id',
        :'gallery_id',
        :'remarks',
        :'bank_id',
        :'account_number',
        :'date_payment',
        :'payment_remarks',
        :'employer_account_number',
        :'employer_account_branch',
        :'bank_account_id',
        :'account_type',
        :'reference_id',
        :'company',
        :'created_by_user',
        :'modified_by_user',
        :'payroll_detail',
        :'gallery',
        :'paid_period',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::Payroll` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::Payroll`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'payment_cycle')
        self.payment_cycle = attributes[:'payment_cycle']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'is_delete')
        self.is_delete = attributes[:'is_delete']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'modified_by')
        self.modified_by = attributes[:'modified_by']
      end

      if attributes.key?(:'expense_id')
        self.expense_id = attributes[:'expense_id']
      end

      if attributes.key?(:'gallery_id')
        self.gallery_id = attributes[:'gallery_id']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'total')
        self.total = attributes[:'total']
      end

      if attributes.key?(:'bank_id')
        self.bank_id = attributes[:'bank_id']
      end

      if attributes.key?(:'account_number')
        self.account_number = attributes[:'account_number']
      end

      if attributes.key?(:'add_amount')
        self.add_amount = attributes[:'add_amount']
      end

      if attributes.key?(:'deduct_amount')
        self.deduct_amount = attributes[:'deduct_amount']
      end

      if attributes.key?(:'net_total')
        self.net_total = attributes[:'net_total']
      end

      if attributes.key?(:'running_number_type')
        self.running_number_type = attributes[:'running_number_type']
      end

      if attributes.key?(:'date_payment')
        self.date_payment = attributes[:'date_payment']
      end

      if attributes.key?(:'document_date')
        self.document_date = attributes[:'document_date']
      end

      if attributes.key?(:'total_payroll_cash')
        self.total_payroll_cash = attributes[:'total_payroll_cash']
      end

      if attributes.key?(:'total_payroll_transfer')
        self.total_payroll_transfer = attributes[:'total_payroll_transfer']
      end

      if attributes.key?(:'fee')
        self.fee = attributes[:'fee']
      end

      if attributes.key?(:'payment_remarks')
        self.payment_remarks = attributes[:'payment_remarks']
      end

      if attributes.key?(:'employer_account_number')
        self.employer_account_number = attributes[:'employer_account_number']
      end

      if attributes.key?(:'employer_account_branch')
        self.employer_account_branch = attributes[:'employer_account_branch']
      end

      if attributes.key?(:'bank_account_id')
        self.bank_account_id = attributes[:'bank_account_id']
      end

      if attributes.key?(:'account_type')
        self.account_type = attributes[:'account_type']
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      end

      if attributes.key?(:'payroll_version')
        self.payroll_version = attributes[:'payroll_version']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'created_by_user')
        self.created_by_user = attributes[:'created_by_user']
      end

      if attributes.key?(:'modified_by_user')
        self.modified_by_user = attributes[:'modified_by_user']
      end

      if attributes.key?(:'payroll_detail')
        if (value = attributes[:'payroll_detail']).is_a?(Array)
          self.payroll_detail = value
        end
      end

      if attributes.key?(:'gallery')
        self.gallery = attributes[:'gallery']
      end

      if attributes.key?(:'is_migrate')
        self.is_migrate = attributes[:'is_migrate']
      end

      if attributes.key?(:'rule_compile_status')
        self.rule_compile_status = attributes[:'rule_compile_status']
      end

      if attributes.key?(:'is_partial_payments')
        self.is_partial_payments = attributes[:'is_partial_payments']
      end

      if attributes.key?(:'paid_period')
        self.paid_period = attributes[:'paid_period']
      end

      if attributes.key?(:'social_security_percent')
        self.social_security_percent = attributes[:'social_security_percent']
      else
        self.social_security_percent = 5
      end

      if attributes.key?(:'status_int')
        self.status_int = attributes[:'status_int']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          company_id == o.company_id &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          payment_cycle == o.payment_cycle &&
          status == o.status &&
          is_delete == o.is_delete &&
          created_on == o.created_on &&
          modified_on == o.modified_on &&
          created_by == o.created_by &&
          modified_by == o.modified_by &&
          expense_id == o.expense_id &&
          gallery_id == o.gallery_id &&
          remarks == o.remarks &&
          total == o.total &&
          bank_id == o.bank_id &&
          account_number == o.account_number &&
          add_amount == o.add_amount &&
          deduct_amount == o.deduct_amount &&
          net_total == o.net_total &&
          running_number_type == o.running_number_type &&
          date_payment == o.date_payment &&
          document_date == o.document_date &&
          total_payroll_cash == o.total_payroll_cash &&
          total_payroll_transfer == o.total_payroll_transfer &&
          fee == o.fee &&
          payment_remarks == o.payment_remarks &&
          employer_account_number == o.employer_account_number &&
          employer_account_branch == o.employer_account_branch &&
          bank_account_id == o.bank_account_id &&
          account_type == o.account_type &&
          reference_id == o.reference_id &&
          payroll_version == o.payroll_version &&
          company == o.company &&
          created_by_user == o.created_by_user &&
          modified_by_user == o.modified_by_user &&
          payroll_detail == o.payroll_detail &&
          gallery == o.gallery &&
          is_migrate == o.is_migrate &&
          rule_compile_status == o.rule_compile_status &&
          is_partial_payments == o.is_partial_payments &&
          paid_period == o.paid_period &&
          social_security_percent == o.social_security_percent &&
          status_int == o.status_int
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, company_id, start_date, end_date, payment_cycle, status, is_delete, created_on, modified_on, created_by, modified_by, expense_id, gallery_id, remarks, total, bank_id, account_number, add_amount, deduct_amount, net_total, running_number_type, date_payment, document_date, total_payroll_cash, total_payroll_transfer, fee, payment_remarks, employer_account_number, employer_account_branch, bank_account_id, account_type, reference_id, payroll_version, company, created_by_user, modified_by_user, payroll_detail, gallery, is_migrate, rule_compile_status, is_partial_payments, paid_period, social_security_percent, status_int].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
