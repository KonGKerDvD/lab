=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class IDocumentReference
    attr_accessor :id

    attr_accessor :company_id

    attr_accessor :reference_id

    attr_accessor :reference_document_type

    attr_accessor :reference_document_serial

    attr_accessor :document_id

    attr_accessor :document_type

    attr_accessor :document_serial

    attr_accessor :is_delete

    attr_accessor :type

    attr_accessor :document_status

    attr_accessor :document_status_string

    attr_accessor :document_date

    attr_accessor :document_amount

    attr_accessor :document_amount_with_vat

    attr_accessor :ref_document_status

    attr_accessor :ref_document_status_string

    attr_accessor :ref_document_date

    attr_accessor :ref_document_amount

    attr_accessor :ref_document_amount_with_vat

    attr_accessor :partial_payment_total_amount

    attr_accessor :partial_payment_total_percent

    attr_accessor :ref_created_on

    attr_accessor :ref_modified_on

    attr_accessor :ref_is_migrate

    attr_accessor :is_compile_rule

    attr_accessor :document_collected

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'company_id' => :'companyId',
        :'reference_id' => :'referenceId',
        :'reference_document_type' => :'referenceDocumentType',
        :'reference_document_serial' => :'referenceDocumentSerial',
        :'document_id' => :'documentId',
        :'document_type' => :'documentType',
        :'document_serial' => :'documentSerial',
        :'is_delete' => :'isDelete',
        :'type' => :'type',
        :'document_status' => :'documentStatus',
        :'document_status_string' => :'documentStatusString',
        :'document_date' => :'documentDate',
        :'document_amount' => :'documentAmount',
        :'document_amount_with_vat' => :'documentAmountWithVat',
        :'ref_document_status' => :'refDocumentStatus',
        :'ref_document_status_string' => :'refDocumentStatusString',
        :'ref_document_date' => :'refDocumentDate',
        :'ref_document_amount' => :'refDocumentAmount',
        :'ref_document_amount_with_vat' => :'refDocumentAmountWithVat',
        :'partial_payment_total_amount' => :'partialPaymentTotalAmount',
        :'partial_payment_total_percent' => :'partialPaymentTotalPercent',
        :'ref_created_on' => :'refCreatedOn',
        :'ref_modified_on' => :'refModifiedOn',
        :'ref_is_migrate' => :'refIsMigrate',
        :'is_compile_rule' => :'isCompileRule',
        :'document_collected' => :'documentCollected'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'company_id' => :'Integer',
        :'reference_id' => :'Integer',
        :'reference_document_type' => :'DocumentTypes',
        :'reference_document_serial' => :'String',
        :'document_id' => :'Integer',
        :'document_type' => :'DocumentTypes',
        :'document_serial' => :'String',
        :'is_delete' => :'Boolean',
        :'type' => :'DocumentReferenceTypes',
        :'document_status' => :'Integer',
        :'document_status_string' => :'String',
        :'document_date' => :'Time',
        :'document_amount' => :'Float',
        :'document_amount_with_vat' => :'Float',
        :'ref_document_status' => :'Integer',
        :'ref_document_status_string' => :'String',
        :'ref_document_date' => :'Time',
        :'ref_document_amount' => :'Float',
        :'ref_document_amount_with_vat' => :'Float',
        :'partial_payment_total_amount' => :'Float',
        :'partial_payment_total_percent' => :'Float',
        :'ref_created_on' => :'Time',
        :'ref_modified_on' => :'Time',
        :'ref_is_migrate' => :'Boolean',
        :'is_compile_rule' => :'Boolean',
        :'document_collected' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'reference_document_serial',
        :'document_serial',
        :'document_status_string',
        :'ref_document_status_string',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::IDocumentReference` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::IDocumentReference`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      end

      if attributes.key?(:'reference_document_type')
        self.reference_document_type = attributes[:'reference_document_type']
      end

      if attributes.key?(:'reference_document_serial')
        self.reference_document_serial = attributes[:'reference_document_serial']
      end

      if attributes.key?(:'document_id')
        self.document_id = attributes[:'document_id']
      end

      if attributes.key?(:'document_type')
        self.document_type = attributes[:'document_type']
      end

      if attributes.key?(:'document_serial')
        self.document_serial = attributes[:'document_serial']
      end

      if attributes.key?(:'is_delete')
        self.is_delete = attributes[:'is_delete']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'document_status')
        self.document_status = attributes[:'document_status']
      end

      if attributes.key?(:'document_status_string')
        self.document_status_string = attributes[:'document_status_string']
      end

      if attributes.key?(:'document_date')
        self.document_date = attributes[:'document_date']
      end

      if attributes.key?(:'document_amount')
        self.document_amount = attributes[:'document_amount']
      end

      if attributes.key?(:'document_amount_with_vat')
        self.document_amount_with_vat = attributes[:'document_amount_with_vat']
      end

      if attributes.key?(:'ref_document_status')
        self.ref_document_status = attributes[:'ref_document_status']
      end

      if attributes.key?(:'ref_document_status_string')
        self.ref_document_status_string = attributes[:'ref_document_status_string']
      end

      if attributes.key?(:'ref_document_date')
        self.ref_document_date = attributes[:'ref_document_date']
      end

      if attributes.key?(:'ref_document_amount')
        self.ref_document_amount = attributes[:'ref_document_amount']
      end

      if attributes.key?(:'ref_document_amount_with_vat')
        self.ref_document_amount_with_vat = attributes[:'ref_document_amount_with_vat']
      end

      if attributes.key?(:'partial_payment_total_amount')
        self.partial_payment_total_amount = attributes[:'partial_payment_total_amount']
      end

      if attributes.key?(:'partial_payment_total_percent')
        self.partial_payment_total_percent = attributes[:'partial_payment_total_percent']
      end

      if attributes.key?(:'ref_created_on')
        self.ref_created_on = attributes[:'ref_created_on']
      end

      if attributes.key?(:'ref_modified_on')
        self.ref_modified_on = attributes[:'ref_modified_on']
      end

      if attributes.key?(:'ref_is_migrate')
        self.ref_is_migrate = attributes[:'ref_is_migrate']
      end

      if attributes.key?(:'is_compile_rule')
        self.is_compile_rule = attributes[:'is_compile_rule']
      end

      if attributes.key?(:'document_collected')
        self.document_collected = attributes[:'document_collected']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          company_id == o.company_id &&
          reference_id == o.reference_id &&
          reference_document_type == o.reference_document_type &&
          reference_document_serial == o.reference_document_serial &&
          document_id == o.document_id &&
          document_type == o.document_type &&
          document_serial == o.document_serial &&
          is_delete == o.is_delete &&
          type == o.type &&
          document_status == o.document_status &&
          document_status_string == o.document_status_string &&
          document_date == o.document_date &&
          document_amount == o.document_amount &&
          document_amount_with_vat == o.document_amount_with_vat &&
          ref_document_status == o.ref_document_status &&
          ref_document_status_string == o.ref_document_status_string &&
          ref_document_date == o.ref_document_date &&
          ref_document_amount == o.ref_document_amount &&
          ref_document_amount_with_vat == o.ref_document_amount_with_vat &&
          partial_payment_total_amount == o.partial_payment_total_amount &&
          partial_payment_total_percent == o.partial_payment_total_percent &&
          ref_created_on == o.ref_created_on &&
          ref_modified_on == o.ref_modified_on &&
          ref_is_migrate == o.ref_is_migrate &&
          is_compile_rule == o.is_compile_rule &&
          document_collected == o.document_collected
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, company_id, reference_id, reference_document_type, reference_document_serial, document_id, document_type, document_serial, is_delete, type, document_status, document_status_string, document_date, document_amount, document_amount_with_vat, ref_document_status, ref_document_status_string, ref_document_date, ref_document_amount, ref_document_amount_with_vat, partial_payment_total_amount, partial_payment_total_percent, ref_created_on, ref_modified_on, ref_is_migrate, is_compile_rule, document_collected].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
