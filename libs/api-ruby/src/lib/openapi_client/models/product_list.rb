=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class ProductList
    attr_accessor :id

    attr_accessor :bar_code

    attr_accessor :name

    attr_accessor :unit_measurement

    attr_accessor :unit_price

    attr_accessor :unit_price_with_vat

    attr_accessor :unit_weight

    attr_accessor :category_id

    attr_accessor :description

    attr_accessor :remarks

    attr_accessor :gallery_id

    attr_accessor :is_vat

    attr_accessor :main_unit_id

    attr_accessor :sub_unit_id

    attr_accessor :main_unit_amount

    attr_accessor :sub_unit_amount

    attr_accessor :has_stock

    attr_accessor :product_code

    attr_accessor :type

    attr_accessor :buy_price

    attr_accessor :buy_price_with_vat

    attr_accessor :is_buy_vat

    attr_accessor :allow_over_sold

    attr_accessor :image

    attr_accessor :is_delete

    attr_accessor :vat_rate

    attr_accessor :buy_vat_rate

    attr_accessor :reset_transaction_id

    attr_accessor :created_on

    attr_accessor :modified_on

    attr_accessor :brought_forward_on

    attr_accessor :buy_description

    attr_accessor :buy_chart_of_account_id

    attr_accessor :sell_chart_of_account_id

    attr_accessor :product_non_inventory_type

    attr_accessor :transaction_id

    attr_accessor :product_main_unit

    attr_accessor :product_sub_unit

    attr_accessor :product_category

    attr_accessor :is_migrate

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'bar_code' => :'barCode',
        :'name' => :'name',
        :'unit_measurement' => :'unitMeasurement',
        :'unit_price' => :'unitPrice',
        :'unit_price_with_vat' => :'unitPriceWithVat',
        :'unit_weight' => :'unitWeight',
        :'category_id' => :'categoryId',
        :'description' => :'description',
        :'remarks' => :'remarks',
        :'gallery_id' => :'galleryId',
        :'is_vat' => :'isVat',
        :'main_unit_id' => :'mainUnitId',
        :'sub_unit_id' => :'subUnitId',
        :'main_unit_amount' => :'mainUnitAmount',
        :'sub_unit_amount' => :'subUnitAmount',
        :'has_stock' => :'hasStock',
        :'product_code' => :'productCode',
        :'type' => :'type',
        :'buy_price' => :'buyPrice',
        :'buy_price_with_vat' => :'buyPriceWithVat',
        :'is_buy_vat' => :'isBuyVat',
        :'allow_over_sold' => :'allowOverSold',
        :'image' => :'image',
        :'is_delete' => :'isDelete',
        :'vat_rate' => :'vatRate',
        :'buy_vat_rate' => :'buyVatRate',
        :'reset_transaction_id' => :'resetTransactionId',
        :'created_on' => :'createdOn',
        :'modified_on' => :'modifiedOn',
        :'brought_forward_on' => :'broughtForwardOn',
        :'buy_description' => :'buyDescription',
        :'buy_chart_of_account_id' => :'buyChartOfAccountId',
        :'sell_chart_of_account_id' => :'sellChartOfAccountId',
        :'product_non_inventory_type' => :'productNonInventoryType',
        :'transaction_id' => :'transactionId',
        :'product_main_unit' => :'productMainUnit',
        :'product_sub_unit' => :'productSubUnit',
        :'product_category' => :'productCategory',
        :'is_migrate' => :'isMigrate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'bar_code' => :'String',
        :'name' => :'String',
        :'unit_measurement' => :'String',
        :'unit_price' => :'Float',
        :'unit_price_with_vat' => :'Float',
        :'unit_weight' => :'Float',
        :'category_id' => :'Integer',
        :'description' => :'String',
        :'remarks' => :'String',
        :'gallery_id' => :'Integer',
        :'is_vat' => :'Boolean',
        :'main_unit_id' => :'Integer',
        :'sub_unit_id' => :'Integer',
        :'main_unit_amount' => :'Integer',
        :'sub_unit_amount' => :'Integer',
        :'has_stock' => :'Boolean',
        :'product_code' => :'String',
        :'type' => :'ProductTypes',
        :'buy_price' => :'Float',
        :'buy_price_with_vat' => :'Float',
        :'is_buy_vat' => :'Boolean',
        :'allow_over_sold' => :'Boolean',
        :'image' => :'String',
        :'is_delete' => :'Boolean',
        :'vat_rate' => :'Integer',
        :'buy_vat_rate' => :'Integer',
        :'reset_transaction_id' => :'Integer',
        :'created_on' => :'Time',
        :'modified_on' => :'Time',
        :'brought_forward_on' => :'Time',
        :'buy_description' => :'String',
        :'buy_chart_of_account_id' => :'Integer',
        :'sell_chart_of_account_id' => :'Integer',
        :'product_non_inventory_type' => :'OneOfProductNonInventoryType',
        :'transaction_id' => :'String',
        :'product_main_unit' => :'OneOfProductUnit',
        :'product_sub_unit' => :'OneOfProductUnit',
        :'product_category' => :'OneOfProductCategory',
        :'is_migrate' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'bar_code',
        :'unit_measurement',
        :'unit_price',
        :'unit_price_with_vat',
        :'unit_weight',
        :'category_id',
        :'description',
        :'remarks',
        :'gallery_id',
        :'main_unit_id',
        :'sub_unit_id',
        :'product_code',
        :'buy_price',
        :'buy_price_with_vat',
        :'image',
        :'reset_transaction_id',
        :'brought_forward_on',
        :'buy_description',
        :'buy_chart_of_account_id',
        :'sell_chart_of_account_id',
        :'product_non_inventory_type',
        :'transaction_id',
        :'product_main_unit',
        :'product_sub_unit',
        :'product_category',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ProductList` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ProductList`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'bar_code')
        self.bar_code = attributes[:'bar_code']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'unit_measurement')
        self.unit_measurement = attributes[:'unit_measurement']
      end

      if attributes.key?(:'unit_price')
        self.unit_price = attributes[:'unit_price']
      end

      if attributes.key?(:'unit_price_with_vat')
        self.unit_price_with_vat = attributes[:'unit_price_with_vat']
      end

      if attributes.key?(:'unit_weight')
        self.unit_weight = attributes[:'unit_weight']
      end

      if attributes.key?(:'category_id')
        self.category_id = attributes[:'category_id']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'gallery_id')
        self.gallery_id = attributes[:'gallery_id']
      end

      if attributes.key?(:'is_vat')
        self.is_vat = attributes[:'is_vat']
      end

      if attributes.key?(:'main_unit_id')
        self.main_unit_id = attributes[:'main_unit_id']
      end

      if attributes.key?(:'sub_unit_id')
        self.sub_unit_id = attributes[:'sub_unit_id']
      end

      if attributes.key?(:'main_unit_amount')
        self.main_unit_amount = attributes[:'main_unit_amount']
      end

      if attributes.key?(:'sub_unit_amount')
        self.sub_unit_amount = attributes[:'sub_unit_amount']
      end

      if attributes.key?(:'has_stock')
        self.has_stock = attributes[:'has_stock']
      end

      if attributes.key?(:'product_code')
        self.product_code = attributes[:'product_code']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'buy_price')
        self.buy_price = attributes[:'buy_price']
      end

      if attributes.key?(:'buy_price_with_vat')
        self.buy_price_with_vat = attributes[:'buy_price_with_vat']
      end

      if attributes.key?(:'is_buy_vat')
        self.is_buy_vat = attributes[:'is_buy_vat']
      end

      if attributes.key?(:'allow_over_sold')
        self.allow_over_sold = attributes[:'allow_over_sold']
      end

      if attributes.key?(:'image')
        self.image = attributes[:'image']
      end

      if attributes.key?(:'is_delete')
        self.is_delete = attributes[:'is_delete']
      end

      if attributes.key?(:'vat_rate')
        self.vat_rate = attributes[:'vat_rate']
      end

      if attributes.key?(:'buy_vat_rate')
        self.buy_vat_rate = attributes[:'buy_vat_rate']
      end

      if attributes.key?(:'reset_transaction_id')
        self.reset_transaction_id = attributes[:'reset_transaction_id']
      end

      if attributes.key?(:'created_on')
        self.created_on = attributes[:'created_on']
      end

      if attributes.key?(:'modified_on')
        self.modified_on = attributes[:'modified_on']
      end

      if attributes.key?(:'brought_forward_on')
        self.brought_forward_on = attributes[:'brought_forward_on']
      end

      if attributes.key?(:'buy_description')
        self.buy_description = attributes[:'buy_description']
      end

      if attributes.key?(:'buy_chart_of_account_id')
        self.buy_chart_of_account_id = attributes[:'buy_chart_of_account_id']
      end

      if attributes.key?(:'sell_chart_of_account_id')
        self.sell_chart_of_account_id = attributes[:'sell_chart_of_account_id']
      end

      if attributes.key?(:'product_non_inventory_type')
        self.product_non_inventory_type = attributes[:'product_non_inventory_type']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'product_main_unit')
        self.product_main_unit = attributes[:'product_main_unit']
      end

      if attributes.key?(:'product_sub_unit')
        self.product_sub_unit = attributes[:'product_sub_unit']
      end

      if attributes.key?(:'product_category')
        self.product_category = attributes[:'product_category']
      end

      if attributes.key?(:'is_migrate')
        self.is_migrate = attributes[:'is_migrate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@bar_code.nil? && @bar_code.to_s.length > 255
        invalid_properties.push('invalid value for "bar_code", the character length must be smaller than or equal to 255.')
      end

      if !@bar_code.nil? && @bar_code.to_s.length < 0
        invalid_properties.push('invalid value for "bar_code", the character length must be great than or equal to 0.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 255
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 255.')
      end

      if @name.to_s.length < 0
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 0.')
      end

      if !@unit_measurement.nil? && @unit_measurement.to_s.length > 50
        invalid_properties.push('invalid value for "unit_measurement", the character length must be smaller than or equal to 50.')
      end

      if !@unit_measurement.nil? && @unit_measurement.to_s.length < 0
        invalid_properties.push('invalid value for "unit_measurement", the character length must be great than or equal to 0.')
      end

      if !@product_code.nil? && @product_code.to_s.length > 255
        invalid_properties.push('invalid value for "product_code", the character length must be smaller than or equal to 255.')
      end

      if !@product_code.nil? && @product_code.to_s.length < 0
        invalid_properties.push('invalid value for "product_code", the character length must be great than or equal to 0.')
      end

      if !@transaction_id.nil? && @transaction_id.to_s.length > 50
        invalid_properties.push('invalid value for "transaction_id", the character length must be smaller than or equal to 50.')
      end

      if !@transaction_id.nil? && @transaction_id.to_s.length < 0
        invalid_properties.push('invalid value for "transaction_id", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@bar_code.nil? && @bar_code.to_s.length > 255
      return false if !@bar_code.nil? && @bar_code.to_s.length < 0
      return false if @name.nil?
      return false if @name.to_s.length > 255
      return false if @name.to_s.length < 0
      return false if !@unit_measurement.nil? && @unit_measurement.to_s.length > 50
      return false if !@unit_measurement.nil? && @unit_measurement.to_s.length < 0
      return false if !@product_code.nil? && @product_code.to_s.length > 255
      return false if !@product_code.nil? && @product_code.to_s.length < 0
      return false if !@transaction_id.nil? && @transaction_id.to_s.length > 50
      return false if !@transaction_id.nil? && @transaction_id.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] bar_code Value to be assigned
    def bar_code=(bar_code)
      if !bar_code.nil? && bar_code.to_s.length > 255
        fail ArgumentError, 'invalid value for "bar_code", the character length must be smaller than or equal to 255.'
      end

      if !bar_code.nil? && bar_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "bar_code", the character length must be great than or equal to 0.'
      end

      @bar_code = bar_code
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 255
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 255.'
      end

      if name.to_s.length < 0
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 0.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] unit_measurement Value to be assigned
    def unit_measurement=(unit_measurement)
      if !unit_measurement.nil? && unit_measurement.to_s.length > 50
        fail ArgumentError, 'invalid value for "unit_measurement", the character length must be smaller than or equal to 50.'
      end

      if !unit_measurement.nil? && unit_measurement.to_s.length < 0
        fail ArgumentError, 'invalid value for "unit_measurement", the character length must be great than or equal to 0.'
      end

      @unit_measurement = unit_measurement
    end

    # Custom attribute writer method with validation
    # @param [Object] product_code Value to be assigned
    def product_code=(product_code)
      if !product_code.nil? && product_code.to_s.length > 255
        fail ArgumentError, 'invalid value for "product_code", the character length must be smaller than or equal to 255.'
      end

      if !product_code.nil? && product_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "product_code", the character length must be great than or equal to 0.'
      end

      @product_code = product_code
    end

    # Custom attribute writer method with validation
    # @param [Object] transaction_id Value to be assigned
    def transaction_id=(transaction_id)
      if !transaction_id.nil? && transaction_id.to_s.length > 50
        fail ArgumentError, 'invalid value for "transaction_id", the character length must be smaller than or equal to 50.'
      end

      if !transaction_id.nil? && transaction_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "transaction_id", the character length must be great than or equal to 0.'
      end

      @transaction_id = transaction_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          bar_code == o.bar_code &&
          name == o.name &&
          unit_measurement == o.unit_measurement &&
          unit_price == o.unit_price &&
          unit_price_with_vat == o.unit_price_with_vat &&
          unit_weight == o.unit_weight &&
          category_id == o.category_id &&
          description == o.description &&
          remarks == o.remarks &&
          gallery_id == o.gallery_id &&
          is_vat == o.is_vat &&
          main_unit_id == o.main_unit_id &&
          sub_unit_id == o.sub_unit_id &&
          main_unit_amount == o.main_unit_amount &&
          sub_unit_amount == o.sub_unit_amount &&
          has_stock == o.has_stock &&
          product_code == o.product_code &&
          type == o.type &&
          buy_price == o.buy_price &&
          buy_price_with_vat == o.buy_price_with_vat &&
          is_buy_vat == o.is_buy_vat &&
          allow_over_sold == o.allow_over_sold &&
          image == o.image &&
          is_delete == o.is_delete &&
          vat_rate == o.vat_rate &&
          buy_vat_rate == o.buy_vat_rate &&
          reset_transaction_id == o.reset_transaction_id &&
          created_on == o.created_on &&
          modified_on == o.modified_on &&
          brought_forward_on == o.brought_forward_on &&
          buy_description == o.buy_description &&
          buy_chart_of_account_id == o.buy_chart_of_account_id &&
          sell_chart_of_account_id == o.sell_chart_of_account_id &&
          product_non_inventory_type == o.product_non_inventory_type &&
          transaction_id == o.transaction_id &&
          product_main_unit == o.product_main_unit &&
          product_sub_unit == o.product_sub_unit &&
          product_category == o.product_category &&
          is_migrate == o.is_migrate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, bar_code, name, unit_measurement, unit_price, unit_price_with_vat, unit_weight, category_id, description, remarks, gallery_id, is_vat, main_unit_id, sub_unit_id, main_unit_amount, sub_unit_amount, has_stock, product_code, type, buy_price, buy_price_with_vat, is_buy_vat, allow_over_sold, image, is_delete, vat_rate, buy_vat_rate, reset_transaction_id, created_on, modified_on, brought_forward_on, buy_description, buy_chart_of_account_id, sell_chart_of_account_id, product_non_inventory_type, transaction_id, product_main_unit, product_sub_unit, product_category, is_migrate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
