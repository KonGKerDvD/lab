=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class SimpleDocument
    attr_accessor :record_id

    attr_accessor :contact_code

    attr_accessor :contact_name

    attr_accessor :contact_address

    attr_accessor :contact_tax_id

    attr_accessor :contact_branch

    attr_accessor :contact_person

    attr_accessor :contact_email

    attr_accessor :contact_number

    attr_accessor :contact_zip_code

    attr_accessor :contact_group

    attr_accessor :published_on

    attr_accessor :credit_type

    attr_accessor :credit_days

    attr_accessor :due_date

    attr_accessor :sales_name

    attr_accessor :project_name

    attr_accessor :reference

    attr_accessor :is_vat_inclusive

    attr_accessor :use_receipt_deduction

    attr_accessor :sub_total

    attr_accessor :discount_percentage

    attr_accessor :discount_amount

    attr_accessor :total_after_discount

    attr_accessor :is_vat

    attr_accessor :vat_amount

    attr_accessor :grand_total

    attr_accessor :document_show_withholding_tax

    attr_accessor :document_withholding_tax_percentage

    attr_accessor :document_withholding_tax_amount

    attr_accessor :document_deduction_type

    attr_accessor :document_deduction_amount

    attr_accessor :remarks

    attr_accessor :internal_notes

    attr_accessor :show_signature_or_stamp

    attr_accessor :document_structure_type

    attr_accessor :external_id

    attr_accessor :sale_and_purchase_channel

    attr_accessor :row_index

    attr_accessor :items

    attr_accessor :document_reference

    attr_accessor :exempt_amount

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'record_id' => :'recordId',
        :'contact_code' => :'contactCode',
        :'contact_name' => :'contactName',
        :'contact_address' => :'contactAddress',
        :'contact_tax_id' => :'contactTaxId',
        :'contact_branch' => :'contactBranch',
        :'contact_person' => :'contactPerson',
        :'contact_email' => :'contactEmail',
        :'contact_number' => :'contactNumber',
        :'contact_zip_code' => :'contactZipCode',
        :'contact_group' => :'contactGroup',
        :'published_on' => :'publishedOn',
        :'credit_type' => :'creditType',
        :'credit_days' => :'creditDays',
        :'due_date' => :'dueDate',
        :'sales_name' => :'salesName',
        :'project_name' => :'projectName',
        :'reference' => :'reference',
        :'is_vat_inclusive' => :'isVatInclusive',
        :'use_receipt_deduction' => :'useReceiptDeduction',
        :'sub_total' => :'subTotal',
        :'discount_percentage' => :'discountPercentage',
        :'discount_amount' => :'discountAmount',
        :'total_after_discount' => :'totalAfterDiscount',
        :'is_vat' => :'isVat',
        :'vat_amount' => :'vatAmount',
        :'grand_total' => :'grandTotal',
        :'document_show_withholding_tax' => :'documentShowWithholdingTax',
        :'document_withholding_tax_percentage' => :'documentWithholdingTaxPercentage',
        :'document_withholding_tax_amount' => :'documentWithholdingTaxAmount',
        :'document_deduction_type' => :'documentDeductionType',
        :'document_deduction_amount' => :'documentDeductionAmount',
        :'remarks' => :'remarks',
        :'internal_notes' => :'internalNotes',
        :'show_signature_or_stamp' => :'showSignatureOrStamp',
        :'document_structure_type' => :'documentStructureType',
        :'external_id' => :'externalId',
        :'sale_and_purchase_channel' => :'saleAndPurchaseChannel',
        :'row_index' => :'rowIndex',
        :'items' => :'items',
        :'document_reference' => :'documentReference',
        :'exempt_amount' => :'exemptAmount'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'record_id' => :'Integer',
        :'contact_code' => :'String',
        :'contact_name' => :'String',
        :'contact_address' => :'String',
        :'contact_tax_id' => :'String',
        :'contact_branch' => :'String',
        :'contact_person' => :'String',
        :'contact_email' => :'String',
        :'contact_number' => :'String',
        :'contact_zip_code' => :'String',
        :'contact_group' => :'Integer',
        :'published_on' => :'Time',
        :'credit_type' => :'Integer',
        :'credit_days' => :'Integer',
        :'due_date' => :'Time',
        :'sales_name' => :'String',
        :'project_name' => :'String',
        :'reference' => :'String',
        :'is_vat_inclusive' => :'Boolean',
        :'use_receipt_deduction' => :'Boolean',
        :'sub_total' => :'Float',
        :'discount_percentage' => :'Integer',
        :'discount_amount' => :'Float',
        :'total_after_discount' => :'Float',
        :'is_vat' => :'Boolean',
        :'vat_amount' => :'Float',
        :'grand_total' => :'Float',
        :'document_show_withholding_tax' => :'Boolean',
        :'document_withholding_tax_percentage' => :'Integer',
        :'document_withholding_tax_amount' => :'Float',
        :'document_deduction_type' => :'Integer',
        :'document_deduction_amount' => :'Float',
        :'remarks' => :'String',
        :'internal_notes' => :'String',
        :'show_signature_or_stamp' => :'Boolean',
        :'document_structure_type' => :'String',
        :'external_id' => :'String',
        :'sale_and_purchase_channel' => :'String',
        :'row_index' => :'String',
        :'items' => :'Array<SimpleProductItem>',
        :'document_reference' => :'Array<UpgradeDocument>',
        :'exempt_amount' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'contact_code',
        :'contact_name',
        :'contact_address',
        :'contact_tax_id',
        :'contact_branch',
        :'contact_person',
        :'contact_email',
        :'contact_number',
        :'contact_zip_code',
        :'sales_name',
        :'project_name',
        :'reference',
        :'remarks',
        :'internal_notes',
        :'document_structure_type',
        :'external_id',
        :'sale_and_purchase_channel',
        :'row_index',
        :'items',
        :'document_reference',
        :'exempt_amount'
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'Document',
      :'SimpleDocumentAllOf'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::SimpleDocument` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::SimpleDocument`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'record_id')
        self.record_id = attributes[:'record_id']
      end

      if attributes.key?(:'contact_code')
        self.contact_code = attributes[:'contact_code']
      end

      if attributes.key?(:'contact_name')
        self.contact_name = attributes[:'contact_name']
      end

      if attributes.key?(:'contact_address')
        self.contact_address = attributes[:'contact_address']
      end

      if attributes.key?(:'contact_tax_id')
        self.contact_tax_id = attributes[:'contact_tax_id']
      end

      if attributes.key?(:'contact_branch')
        self.contact_branch = attributes[:'contact_branch']
      end

      if attributes.key?(:'contact_person')
        self.contact_person = attributes[:'contact_person']
      end

      if attributes.key?(:'contact_email')
        self.contact_email = attributes[:'contact_email']
      end

      if attributes.key?(:'contact_number')
        self.contact_number = attributes[:'contact_number']
      end

      if attributes.key?(:'contact_zip_code')
        self.contact_zip_code = attributes[:'contact_zip_code']
      end

      if attributes.key?(:'contact_group')
        self.contact_group = attributes[:'contact_group']
      end

      if attributes.key?(:'published_on')
        self.published_on = attributes[:'published_on']
      end

      if attributes.key?(:'credit_type')
        self.credit_type = attributes[:'credit_type']
      end

      if attributes.key?(:'credit_days')
        self.credit_days = attributes[:'credit_days']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'sales_name')
        self.sales_name = attributes[:'sales_name']
      end

      if attributes.key?(:'project_name')
        self.project_name = attributes[:'project_name']
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.key?(:'is_vat_inclusive')
        self.is_vat_inclusive = attributes[:'is_vat_inclusive']
      end

      if attributes.key?(:'use_receipt_deduction')
        self.use_receipt_deduction = attributes[:'use_receipt_deduction']
      end

      if attributes.key?(:'sub_total')
        self.sub_total = attributes[:'sub_total']
      end

      if attributes.key?(:'discount_percentage')
        self.discount_percentage = attributes[:'discount_percentage']
      end

      if attributes.key?(:'discount_amount')
        self.discount_amount = attributes[:'discount_amount']
      end

      if attributes.key?(:'total_after_discount')
        self.total_after_discount = attributes[:'total_after_discount']
      end

      if attributes.key?(:'is_vat')
        self.is_vat = attributes[:'is_vat']
      end

      if attributes.key?(:'vat_amount')
        self.vat_amount = attributes[:'vat_amount']
      end

      if attributes.key?(:'grand_total')
        self.grand_total = attributes[:'grand_total']
      end

      if attributes.key?(:'document_show_withholding_tax')
        self.document_show_withholding_tax = attributes[:'document_show_withholding_tax']
      end

      if attributes.key?(:'document_withholding_tax_percentage')
        self.document_withholding_tax_percentage = attributes[:'document_withholding_tax_percentage']
      end

      if attributes.key?(:'document_withholding_tax_amount')
        self.document_withholding_tax_amount = attributes[:'document_withholding_tax_amount']
      end

      if attributes.key?(:'document_deduction_type')
        self.document_deduction_type = attributes[:'document_deduction_type']
      end

      if attributes.key?(:'document_deduction_amount')
        self.document_deduction_amount = attributes[:'document_deduction_amount']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'internal_notes')
        self.internal_notes = attributes[:'internal_notes']
      end

      if attributes.key?(:'show_signature_or_stamp')
        self.show_signature_or_stamp = attributes[:'show_signature_or_stamp']
      end

      if attributes.key?(:'document_structure_type')
        self.document_structure_type = attributes[:'document_structure_type']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'sale_and_purchase_channel')
        self.sale_and_purchase_channel = attributes[:'sale_and_purchase_channel']
      end

      if attributes.key?(:'row_index')
        self.row_index = attributes[:'row_index']
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'document_reference')
        if (value = attributes[:'document_reference']).is_a?(Array)
          self.document_reference = value
        end
      end

      if attributes.key?(:'exempt_amount')
        self.exempt_amount = attributes[:'exempt_amount']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          record_id == o.record_id &&
          contact_code == o.contact_code &&
          contact_name == o.contact_name &&
          contact_address == o.contact_address &&
          contact_tax_id == o.contact_tax_id &&
          contact_branch == o.contact_branch &&
          contact_person == o.contact_person &&
          contact_email == o.contact_email &&
          contact_number == o.contact_number &&
          contact_zip_code == o.contact_zip_code &&
          contact_group == o.contact_group &&
          published_on == o.published_on &&
          credit_type == o.credit_type &&
          credit_days == o.credit_days &&
          due_date == o.due_date &&
          sales_name == o.sales_name &&
          project_name == o.project_name &&
          reference == o.reference &&
          is_vat_inclusive == o.is_vat_inclusive &&
          use_receipt_deduction == o.use_receipt_deduction &&
          sub_total == o.sub_total &&
          discount_percentage == o.discount_percentage &&
          discount_amount == o.discount_amount &&
          total_after_discount == o.total_after_discount &&
          is_vat == o.is_vat &&
          vat_amount == o.vat_amount &&
          grand_total == o.grand_total &&
          document_show_withholding_tax == o.document_show_withholding_tax &&
          document_withholding_tax_percentage == o.document_withholding_tax_percentage &&
          document_withholding_tax_amount == o.document_withholding_tax_amount &&
          document_deduction_type == o.document_deduction_type &&
          document_deduction_amount == o.document_deduction_amount &&
          remarks == o.remarks &&
          internal_notes == o.internal_notes &&
          show_signature_or_stamp == o.show_signature_or_stamp &&
          document_structure_type == o.document_structure_type &&
          external_id == o.external_id &&
          sale_and_purchase_channel == o.sale_and_purchase_channel &&
          row_index == o.row_index &&
          items == o.items &&
          document_reference == o.document_reference &&
          exempt_amount == o.exempt_amount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [record_id, contact_code, contact_name, contact_address, contact_tax_id, contact_branch, contact_person, contact_email, contact_number, contact_zip_code, contact_group, published_on, credit_type, credit_days, due_date, sales_name, project_name, reference, is_vat_inclusive, use_receipt_deduction, sub_total, discount_percentage, discount_amount, total_after_discount, is_vat, vat_amount, grand_total, document_show_withholding_tax, document_withholding_tax_percentage, document_withholding_tax_amount, document_deduction_type, document_deduction_amount, remarks, internal_notes, show_signature_or_stamp, document_structure_type, external_id, sale_and_purchase_channel, row_index, items, document_reference, exempt_amount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
