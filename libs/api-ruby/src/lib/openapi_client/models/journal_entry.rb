=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module OpenapiClient
  class JournalEntry
    attr_accessor :id

    attr_accessor :company_id

    attr_accessor :document_serial

    attr_accessor :document_type

    attr_accessor :status

    attr_accessor :document_date

    attr_accessor :description

    attr_accessor :description_foreign

    attr_accessor :void_description

    attr_accessor :voided_on

    attr_accessor :approved_on

    attr_accessor :transaction_no

    attr_accessor :note

    attr_accessor :template_type

    attr_accessor :contact_name

    attr_accessor :document_serial_no_prefix

    attr_accessor :created_by

    attr_accessor :modified_by

    attr_accessor :approved_by

    attr_accessor :voided_by

    attr_accessor :gallery_id

    attr_accessor :contact_id

    attr_accessor :running_number_type

    attr_accessor :fiscal_year_id

    attr_accessor :gallery

    attr_accessor :company

    attr_accessor :approved_by_user

    attr_accessor :modified_by_user

    attr_accessor :voided_by_user

    attr_accessor :remarks

    attr_accessor :contact

    attr_accessor :fiscal_year

    attr_accessor :reference

    attr_accessor :reference_id

    attr_accessor :reference_document_type

    attr_accessor :is_system_document

    attr_accessor :rule_compile_status

    attr_accessor :book_of_accounts

    attr_accessor :is_changed_document_date

    attr_accessor :is_reset_document

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'company_id' => :'companyId',
        :'document_serial' => :'documentSerial',
        :'document_type' => :'documentType',
        :'status' => :'status',
        :'document_date' => :'documentDate',
        :'description' => :'description',
        :'description_foreign' => :'descriptionForeign',
        :'void_description' => :'voidDescription',
        :'voided_on' => :'voidedOn',
        :'approved_on' => :'approvedOn',
        :'transaction_no' => :'transactionNo',
        :'note' => :'note',
        :'template_type' => :'templateType',
        :'contact_name' => :'contactName',
        :'document_serial_no_prefix' => :'documentSerialNoPrefix',
        :'created_by' => :'createdBy',
        :'modified_by' => :'modifiedBy',
        :'approved_by' => :'approvedBy',
        :'voided_by' => :'voidedBy',
        :'gallery_id' => :'galleryId',
        :'contact_id' => :'contactId',
        :'running_number_type' => :'runningNumberType',
        :'fiscal_year_id' => :'fiscalYearId',
        :'gallery' => :'gallery',
        :'company' => :'company',
        :'approved_by_user' => :'approvedByUser',
        :'modified_by_user' => :'modifiedByUser',
        :'voided_by_user' => :'voidedByUser',
        :'remarks' => :'remarks',
        :'contact' => :'contact',
        :'fiscal_year' => :'fiscalYear',
        :'reference' => :'reference',
        :'reference_id' => :'referenceId',
        :'reference_document_type' => :'referenceDocumentType',
        :'is_system_document' => :'isSystemDocument',
        :'rule_compile_status' => :'ruleCompileStatus',
        :'book_of_accounts' => :'bookOfAccounts',
        :'is_changed_document_date' => :'isChangedDocumentDate',
        :'is_reset_document' => :'isResetDocument'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'company_id' => :'Integer',
        :'document_serial' => :'String',
        :'document_type' => :'DocumentTypes',
        :'status' => :'JournalEntryStatus',
        :'document_date' => :'Time',
        :'description' => :'String',
        :'description_foreign' => :'String',
        :'void_description' => :'String',
        :'voided_on' => :'Time',
        :'approved_on' => :'Time',
        :'transaction_no' => :'Integer',
        :'note' => :'String',
        :'template_type' => :'JournalEntryTemplateType',
        :'contact_name' => :'String',
        :'document_serial_no_prefix' => :'Integer',
        :'created_by' => :'Integer',
        :'modified_by' => :'Integer',
        :'approved_by' => :'Integer',
        :'voided_by' => :'Integer',
        :'gallery_id' => :'Integer',
        :'contact_id' => :'Integer',
        :'running_number_type' => :'OneOfRunningNumberType',
        :'fiscal_year_id' => :'Integer',
        :'gallery' => :'OneOfGallery',
        :'company' => :'OneOfCompany',
        :'approved_by_user' => :'OneOfUser',
        :'modified_by_user' => :'OneOfUser',
        :'voided_by_user' => :'OneOfUser',
        :'remarks' => :'String',
        :'contact' => :'OneOfContact',
        :'fiscal_year' => :'OneOfFiscalYear',
        :'reference' => :'String',
        :'reference_id' => :'Integer',
        :'reference_document_type' => :'OneOfDocumentTypes',
        :'is_system_document' => :'Boolean',
        :'rule_compile_status' => :'RuleCompileStatus',
        :'book_of_accounts' => :'Array<IBookOfAccount>',
        :'is_changed_document_date' => :'Boolean',
        :'is_reset_document' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'document_serial',
        :'description',
        :'description_foreign',
        :'void_description',
        :'voided_on',
        :'approved_on',
        :'transaction_no',
        :'note',
        :'contact_name',
        :'document_serial_no_prefix',
        :'approved_by',
        :'voided_by',
        :'gallery_id',
        :'contact_id',
        :'running_number_type',
        :'fiscal_year_id',
        :'gallery',
        :'company',
        :'approved_by_user',
        :'modified_by_user',
        :'voided_by_user',
        :'remarks',
        :'contact',
        :'fiscal_year',
        :'reference',
        :'reference_id',
        :'reference_document_type',
        :'book_of_accounts',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::JournalEntry` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::JournalEntry`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'document_serial')
        self.document_serial = attributes[:'document_serial']
      end

      if attributes.key?(:'document_type')
        self.document_type = attributes[:'document_type']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'document_date')
        self.document_date = attributes[:'document_date']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'description_foreign')
        self.description_foreign = attributes[:'description_foreign']
      end

      if attributes.key?(:'void_description')
        self.void_description = attributes[:'void_description']
      end

      if attributes.key?(:'voided_on')
        self.voided_on = attributes[:'voided_on']
      end

      if attributes.key?(:'approved_on')
        self.approved_on = attributes[:'approved_on']
      end

      if attributes.key?(:'transaction_no')
        self.transaction_no = attributes[:'transaction_no']
      end

      if attributes.key?(:'note')
        self.note = attributes[:'note']
      end

      if attributes.key?(:'template_type')
        self.template_type = attributes[:'template_type']
      end

      if attributes.key?(:'contact_name')
        self.contact_name = attributes[:'contact_name']
      end

      if attributes.key?(:'document_serial_no_prefix')
        self.document_serial_no_prefix = attributes[:'document_serial_no_prefix']
      end

      if attributes.key?(:'created_by')
        self.created_by = attributes[:'created_by']
      end

      if attributes.key?(:'modified_by')
        self.modified_by = attributes[:'modified_by']
      end

      if attributes.key?(:'approved_by')
        self.approved_by = attributes[:'approved_by']
      end

      if attributes.key?(:'voided_by')
        self.voided_by = attributes[:'voided_by']
      end

      if attributes.key?(:'gallery_id')
        self.gallery_id = attributes[:'gallery_id']
      end

      if attributes.key?(:'contact_id')
        self.contact_id = attributes[:'contact_id']
      end

      if attributes.key?(:'running_number_type')
        self.running_number_type = attributes[:'running_number_type']
      end

      if attributes.key?(:'fiscal_year_id')
        self.fiscal_year_id = attributes[:'fiscal_year_id']
      end

      if attributes.key?(:'gallery')
        self.gallery = attributes[:'gallery']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'approved_by_user')
        self.approved_by_user = attributes[:'approved_by_user']
      end

      if attributes.key?(:'modified_by_user')
        self.modified_by_user = attributes[:'modified_by_user']
      end

      if attributes.key?(:'voided_by_user')
        self.voided_by_user = attributes[:'voided_by_user']
      end

      if attributes.key?(:'remarks')
        self.remarks = attributes[:'remarks']
      end

      if attributes.key?(:'contact')
        self.contact = attributes[:'contact']
      end

      if attributes.key?(:'fiscal_year')
        self.fiscal_year = attributes[:'fiscal_year']
      end

      if attributes.key?(:'reference')
        self.reference = attributes[:'reference']
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      end

      if attributes.key?(:'reference_document_type')
        self.reference_document_type = attributes[:'reference_document_type']
      end

      if attributes.key?(:'is_system_document')
        self.is_system_document = attributes[:'is_system_document']
      else
        self.is_system_document = false
      end

      if attributes.key?(:'rule_compile_status')
        self.rule_compile_status = attributes[:'rule_compile_status']
      end

      if attributes.key?(:'book_of_accounts')
        if (value = attributes[:'book_of_accounts']).is_a?(Array)
          self.book_of_accounts = value
        end
      end

      if attributes.key?(:'is_changed_document_date')
        self.is_changed_document_date = attributes[:'is_changed_document_date']
      end

      if attributes.key?(:'is_reset_document')
        self.is_reset_document = attributes[:'is_reset_document']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@document_serial.nil? && @document_serial.to_s.length > 100
        invalid_properties.push('invalid value for "document_serial", the character length must be smaller than or equal to 100.')
      end

      if !@document_serial.nil? && @document_serial.to_s.length < 0
        invalid_properties.push('invalid value for "document_serial", the character length must be great than or equal to 0.')
      end

      if @document_type.nil?
        invalid_properties.push('invalid value for "document_type", document_type cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @document_date.nil?
        invalid_properties.push('invalid value for "document_date", document_date cannot be nil.')
      end

      if @document_date.to_s.length < 1
        invalid_properties.push('invalid value for "document_date", the character length must be great than or equal to 1.')
      end

      if !@description.nil? && @description.to_s.length > 2000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 2000.')
      end

      if !@description.nil? && @description.to_s.length < 0
        invalid_properties.push('invalid value for "description", the character length must be great than or equal to 0.')
      end

      if !@description_foreign.nil? && @description_foreign.to_s.length > 2000
        invalid_properties.push('invalid value for "description_foreign", the character length must be smaller than or equal to 2000.')
      end

      if !@description_foreign.nil? && @description_foreign.to_s.length < 0
        invalid_properties.push('invalid value for "description_foreign", the character length must be great than or equal to 0.')
      end

      if !@void_description.nil? && @void_description.to_s.length > 2000
        invalid_properties.push('invalid value for "void_description", the character length must be smaller than or equal to 2000.')
      end

      if !@void_description.nil? && @void_description.to_s.length < 0
        invalid_properties.push('invalid value for "void_description", the character length must be great than or equal to 0.')
      end

      if !@remarks.nil? && @remarks.to_s.length > 2000
        invalid_properties.push('invalid value for "remarks", the character length must be smaller than or equal to 2000.')
      end

      if !@remarks.nil? && @remarks.to_s.length < 0
        invalid_properties.push('invalid value for "remarks", the character length must be great than or equal to 0.')
      end

      if !@reference.nil? && @reference.to_s.length > 50
        invalid_properties.push('invalid value for "reference", the character length must be smaller than or equal to 50.')
      end

      if !@reference.nil? && @reference.to_s.length < 0
        invalid_properties.push('invalid value for "reference", the character length must be great than or equal to 0.')
      end

      if @is_system_document.nil?
        invalid_properties.push('invalid value for "is_system_document", is_system_document cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@document_serial.nil? && @document_serial.to_s.length > 100
      return false if !@document_serial.nil? && @document_serial.to_s.length < 0
      return false if @document_type.nil?
      return false if @status.nil?
      return false if @document_date.nil?
      return false if @document_date.to_s.length < 1
      return false if !@description.nil? && @description.to_s.length > 2000
      return false if !@description.nil? && @description.to_s.length < 0
      return false if !@description_foreign.nil? && @description_foreign.to_s.length > 2000
      return false if !@description_foreign.nil? && @description_foreign.to_s.length < 0
      return false if !@void_description.nil? && @void_description.to_s.length > 2000
      return false if !@void_description.nil? && @void_description.to_s.length < 0
      return false if !@remarks.nil? && @remarks.to_s.length > 2000
      return false if !@remarks.nil? && @remarks.to_s.length < 0
      return false if !@reference.nil? && @reference.to_s.length > 50
      return false if !@reference.nil? && @reference.to_s.length < 0
      return false if @is_system_document.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] document_serial Value to be assigned
    def document_serial=(document_serial)
      if !document_serial.nil? && document_serial.to_s.length > 100
        fail ArgumentError, 'invalid value for "document_serial", the character length must be smaller than or equal to 100.'
      end

      if !document_serial.nil? && document_serial.to_s.length < 0
        fail ArgumentError, 'invalid value for "document_serial", the character length must be great than or equal to 0.'
      end

      @document_serial = document_serial
    end

    # Custom attribute writer method with validation
    # @param [Object] document_date Value to be assigned
    def document_date=(document_date)
      if document_date.nil?
        fail ArgumentError, 'document_date cannot be nil'
      end

      if document_date.to_s.length < 1
        fail ArgumentError, 'invalid value for "document_date", the character length must be great than or equal to 1.'
      end

      @document_date = document_date
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 2000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 2000.'
      end

      if !description.nil? && description.to_s.length < 0
        fail ArgumentError, 'invalid value for "description", the character length must be great than or equal to 0.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] description_foreign Value to be assigned
    def description_foreign=(description_foreign)
      if !description_foreign.nil? && description_foreign.to_s.length > 2000
        fail ArgumentError, 'invalid value for "description_foreign", the character length must be smaller than or equal to 2000.'
      end

      if !description_foreign.nil? && description_foreign.to_s.length < 0
        fail ArgumentError, 'invalid value for "description_foreign", the character length must be great than or equal to 0.'
      end

      @description_foreign = description_foreign
    end

    # Custom attribute writer method with validation
    # @param [Object] void_description Value to be assigned
    def void_description=(void_description)
      if !void_description.nil? && void_description.to_s.length > 2000
        fail ArgumentError, 'invalid value for "void_description", the character length must be smaller than or equal to 2000.'
      end

      if !void_description.nil? && void_description.to_s.length < 0
        fail ArgumentError, 'invalid value for "void_description", the character length must be great than or equal to 0.'
      end

      @void_description = void_description
    end

    # Custom attribute writer method with validation
    # @param [Object] remarks Value to be assigned
    def remarks=(remarks)
      if !remarks.nil? && remarks.to_s.length > 2000
        fail ArgumentError, 'invalid value for "remarks", the character length must be smaller than or equal to 2000.'
      end

      if !remarks.nil? && remarks.to_s.length < 0
        fail ArgumentError, 'invalid value for "remarks", the character length must be great than or equal to 0.'
      end

      @remarks = remarks
    end

    # Custom attribute writer method with validation
    # @param [Object] reference Value to be assigned
    def reference=(reference)
      if !reference.nil? && reference.to_s.length > 50
        fail ArgumentError, 'invalid value for "reference", the character length must be smaller than or equal to 50.'
      end

      if !reference.nil? && reference.to_s.length < 0
        fail ArgumentError, 'invalid value for "reference", the character length must be great than or equal to 0.'
      end

      @reference = reference
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          company_id == o.company_id &&
          document_serial == o.document_serial &&
          document_type == o.document_type &&
          status == o.status &&
          document_date == o.document_date &&
          description == o.description &&
          description_foreign == o.description_foreign &&
          void_description == o.void_description &&
          voided_on == o.voided_on &&
          approved_on == o.approved_on &&
          transaction_no == o.transaction_no &&
          note == o.note &&
          template_type == o.template_type &&
          contact_name == o.contact_name &&
          document_serial_no_prefix == o.document_serial_no_prefix &&
          created_by == o.created_by &&
          modified_by == o.modified_by &&
          approved_by == o.approved_by &&
          voided_by == o.voided_by &&
          gallery_id == o.gallery_id &&
          contact_id == o.contact_id &&
          running_number_type == o.running_number_type &&
          fiscal_year_id == o.fiscal_year_id &&
          gallery == o.gallery &&
          company == o.company &&
          approved_by_user == o.approved_by_user &&
          modified_by_user == o.modified_by_user &&
          voided_by_user == o.voided_by_user &&
          remarks == o.remarks &&
          contact == o.contact &&
          fiscal_year == o.fiscal_year &&
          reference == o.reference &&
          reference_id == o.reference_id &&
          reference_document_type == o.reference_document_type &&
          is_system_document == o.is_system_document &&
          rule_compile_status == o.rule_compile_status &&
          book_of_accounts == o.book_of_accounts &&
          is_changed_document_date == o.is_changed_document_date &&
          is_reset_document == o.is_reset_document
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, company_id, document_serial, document_type, status, document_date, description, description_foreign, void_description, voided_on, approved_on, transaction_no, note, template_type, contact_name, document_serial_no_prefix, created_by, modified_by, approved_by, voided_by, gallery_id, contact_id, running_number_type, fiscal_year_id, gallery, company, approved_by_user, modified_by_user, voided_by_user, remarks, contact, fiscal_year, reference, reference_id, reference_document_type, is_system_document, rule_compile_status, book_of_accounts, is_changed_document_date, is_reset_document].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OpenapiClient.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
