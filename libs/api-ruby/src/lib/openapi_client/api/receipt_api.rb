=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class ReceiptApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # To change status by the document id and key
    # @param document_id [Integer] 
    # @param status_key [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def receipt_change_status_by_key(document_id, status_key, culture, opts = {})
      data, _status_code, _headers = receipt_change_status_by_key_with_http_info(document_id, status_key, culture, opts)
      data
    end

    # To change status by the document id and key
    # @param document_id [Integer] 
    # @param status_key [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def receipt_change_status_by_key_with_http_info(document_id, status_key, culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_change_status_by_key ...'
      end
      # verify the required parameter 'document_id' is set
      if @api_client.config.client_side_validation && document_id.nil?
        fail ArgumentError, "Missing the required parameter 'document_id' when calling ReceiptApi.receipt_change_status_by_key"
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_change_status_by_key"
      end
      # resource path
      local_var_path = '/{culture}/receipts/{documentId}/status-key/{statusKey}'.sub('{' + 'documentId' + '}', CGI.escape(document_id.to_s)).sub('{' + 'statusKey' + '}', CGI.escape(status_key.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_change_status_by_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_change_status_by_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To Create a document with SimpleDocument as the parameter
    # @param culture [String] 
    # @param simple_document [SimpleDocument] 
    # @param [Hash] opts the optional parameters
    # @return [MessageSent]
    def receipt_create(culture, simple_document, opts = {})
      data, _status_code, _headers = receipt_create_with_http_info(culture, simple_document, opts)
      data
    end

    # To Create a document with SimpleDocument as the parameter
    # @param culture [String] 
    # @param simple_document [SimpleDocument] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageSent, Integer, Hash)>] MessageSent data, response status code and response headers
    def receipt_create_with_http_info(culture, simple_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_create ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_create"
      end
      # verify the required parameter 'simple_document' is set
      if @api_client.config.client_side_validation && simple_document.nil?
        fail ArgumentError, "Missing the required parameter 'simple_document' when calling ReceiptApi.receipt_create"
      end
      # resource path
      local_var_path = '/{culture}/receipts/simple-document'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(simple_document)

      # return_type
      return_type = opts[:debug_return_type] || 'MessageSent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To Create a document with InlineDocument as the parameter
    # @param culture [String] 
    # @param inline_document [InlineDocument] 
    # @param [Hash] opts the optional parameters
    # @return [MessageSent]
    def receipt_create2(culture, inline_document, opts = {})
      data, _status_code, _headers = receipt_create2_with_http_info(culture, inline_document, opts)
      data
    end

    # To Create a document with InlineDocument as the parameter
    # @param culture [String] 
    # @param inline_document [InlineDocument] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MessageSent, Integer, Hash)>] MessageSent data, response status code and response headers
    def receipt_create2_with_http_info(culture, inline_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_create2 ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_create2"
      end
      # verify the required parameter 'inline_document' is set
      if @api_client.config.client_side_validation && inline_document.nil?
        fail ArgumentError, "Missing the required parameter 'inline_document' when calling ReceiptApi.receipt_create2"
      end
      # resource path
      local_var_path = '/{culture}/receipts/inline-document'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inline_document)

      # return_type
      return_type = opts[:debug_return_type] || 'MessageSent'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_create2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_create2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To delete the document given a list of documentids
    # @param id [Integer] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def receipt_delete(id, culture, opts = {})
      data, _status_code, _headers = receipt_delete_with_http_info(id, culture, opts)
      data
    end

    # To delete the document given a list of documentids
    # @param id [Integer] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def receipt_delete_with_http_info(id, culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_delete ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReceiptApi.receipt_delete"
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_delete"
      end
      # resource path
      local_var_path = '/{culture}/receipts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To get details of a document
    # @param id [Integer] Sql DocumentId
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def receipt_details(id, culture, opts = {})
      data, _status_code, _headers = receipt_details_with_http_info(id, culture, opts)
      data
    end

    # To get details of a document
    # @param id [Integer] Sql DocumentId
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def receipt_details_with_http_info(id, culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_details ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReceiptApi.receipt_details"
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_details"
      end
      # resource path
      local_var_path = '/{culture}/receipts/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To Update a document with simpleDocument as the parameter
    # @param id [Integer] 
    # @param culture [String] 
    # @param simple_document [SimpleDocument] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def receipt_edit(id, culture, simple_document, opts = {})
      data, _status_code, _headers = receipt_edit_with_http_info(id, culture, simple_document, opts)
      data
    end

    # To Update a document with simpleDocument as the parameter
    # @param id [Integer] 
    # @param culture [String] 
    # @param simple_document [SimpleDocument] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def receipt_edit_with_http_info(id, culture, simple_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_edit ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReceiptApi.receipt_edit"
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_edit"
      end
      # verify the required parameter 'simple_document' is set
      if @api_client.config.client_side_validation && simple_document.nil?
        fail ArgumentError, "Missing the required parameter 'simple_document' when calling ReceiptApi.receipt_edit"
      end
      # resource path
      local_var_path = '/{culture}/receipts/simple-document/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(simple_document)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_edit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_edit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To Update a document with inlineDocument as the parameter
    # @param id [Integer] 
    # @param culture [String] 
    # @param inline_document [InlineDocument] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def receipt_edit2(id, culture, inline_document, opts = {})
      data, _status_code, _headers = receipt_edit2_with_http_info(id, culture, inline_document, opts)
      data
    end

    # To Update a document with inlineDocument as the parameter
    # @param id [Integer] 
    # @param culture [String] 
    # @param inline_document [InlineDocument] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def receipt_edit2_with_http_info(id, culture, inline_document, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_edit2 ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReceiptApi.receipt_edit2"
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_edit2"
      end
      # verify the required parameter 'inline_document' is set
      if @api_client.config.client_side_validation && inline_document.nil?
        fail ArgumentError, "Missing the required parameter 'inline_document' when calling ReceiptApi.receipt_edit2"
      end
      # resource path
      local_var_path = '/{culture}/receipts/inline-document/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(inline_document)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_edit2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_edit2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def receipt_get_business_categories(culture, opts = {})
      data, _status_code, _headers = receipt_get_business_categories_with_http_info(culture, opts)
      data
    end

    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def receipt_get_business_categories_with_http_info(culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_get_business_categories ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_get_business_categories"
      end
      # resource path
      local_var_path = '/{culture}/receipts/categories/business'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_get_business_categories",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_get_business_categories\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def receipt_get_chart_of_accounts(culture, opts = {})
      data, _status_code, _headers = receipt_get_chart_of_accounts_with_http_info(culture, opts)
      data
    end

    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def receipt_get_chart_of_accounts_with_http_info(culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_get_chart_of_accounts ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_get_chart_of_accounts"
      end
      # resource path
      local_var_path = '/{culture}/receipts/categories/accounting'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_get_chart_of_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_get_chart_of_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To query for documents.
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by 
    # @option opts [String] :current_page 
    # @option opts [String] :page_size 
    # @option opts [String] :filter 
    # @option opts [String] :search_string 
    # @option opts [String] :custom_document_models 
    # @option opts [String] :range 
    # @option opts [String] :month 
    # @option opts [String] :year 
    # @option opts [String] :start_date 
    # @option opts [String] :end_date 
    # @return [File]
    def receipt_index(culture, opts = {})
      data, _status_code, _headers = receipt_index_with_http_info(culture, opts)
      data
    end

    # To query for documents.
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sort_by 
    # @option opts [String] :current_page 
    # @option opts [String] :page_size 
    # @option opts [String] :filter 
    # @option opts [String] :search_string 
    # @option opts [String] :custom_document_models 
    # @option opts [String] :range 
    # @option opts [String] :month 
    # @option opts [String] :year 
    # @option opts [String] :start_date 
    # @option opts [String] :end_date 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def receipt_index_with_http_info(culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_index ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_index"
      end
      # resource path
      local_var_path = '/{culture}/receipts'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'SortBy'] = opts[:'sort_by'] if !opts[:'sort_by'].nil?
      query_params[:'CurrentPage'] = opts[:'current_page'] if !opts[:'current_page'].nil?
      query_params[:'PageSize'] = opts[:'page_size'] if !opts[:'page_size'].nil?
      query_params[:'Filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'SearchString'] = opts[:'search_string'] if !opts[:'search_string'].nil?
      query_params[:'CustomDocumentModels'] = opts[:'custom_document_models'] if !opts[:'custom_document_models'].nil?
      query_params[:'Range'] = opts[:'range'] if !opts[:'range'].nil?
      query_params[:'Month'] = opts[:'month'] if !opts[:'month'].nil?
      query_params[:'Year'] = opts[:'year'] if !opts[:'year'].nil?
      query_params[:'StartDate'] = opts[:'start_date'] if !opts[:'start_date'].nil?
      query_params[:'EndDate'] = opts[:'end_date'] if !opts[:'end_date'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_index",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_index\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To Accept payment with the paymentModel
    # @param id [Integer] 
    # @param culture [String] 
    # @param payment_model [PaymentModel] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def receipt_receive_payment(id, culture, payment_model, opts = {})
      data, _status_code, _headers = receipt_receive_payment_with_http_info(id, culture, payment_model, opts)
      data
    end

    # To Accept payment with the paymentModel
    # @param id [Integer] 
    # @param culture [String] 
    # @param payment_model [PaymentModel] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def receipt_receive_payment_with_http_info(id, culture, payment_model, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReceiptApi.receipt_receive_payment ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ReceiptApi.receipt_receive_payment"
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling ReceiptApi.receipt_receive_payment"
      end
      # verify the required parameter 'payment_model' is set
      if @api_client.config.client_side_validation && payment_model.nil?
        fail ArgumentError, "Missing the required parameter 'payment_model' when calling ReceiptApi.receipt_receive_payment"
      end
      # resource path
      local_var_path = '/{culture}/receipts/{id}/payments'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(payment_model)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"ReceiptApi.receipt_receive_payment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReceiptApi#receipt_receive_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
