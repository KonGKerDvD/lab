=begin
#FlowAccount Open API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module OpenapiClient
  class BatchImportApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Delete custom template
    # @param template_id [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def batch_import_delete_custom_template(template_id, culture, opts = {})
      data, _status_code, _headers = batch_import_delete_custom_template_with_http_info(template_id, culture, opts)
      data
    end

    # Delete custom template
    # @param template_id [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def batch_import_delete_custom_template_with_http_info(template_id, culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_delete_custom_template ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_delete_custom_template"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/custom-template/{templateId}'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_delete_custom_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_delete_custom_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # To get details of a document
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_name 
    # @return [BatchImportMetadata]
    def batch_import_generate_bacth_id_metadata(culture, opts = {})
      data, _status_code, _headers = batch_import_generate_bacth_id_metadata_with_http_info(culture, opts)
      data
    end

    # To get details of a document
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_name 
    # @return [Array<(BatchImportMetadata, Integer, Hash)>] BatchImportMetadata data, response status code and response headers
    def batch_import_generate_bacth_id_metadata_with_http_info(culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_generate_bacth_id_metadata ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_generate_bacth_id_metadata"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/batch-metadata'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'fileName'] = opts[:'file_name'] if !opts[:'file_name'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BatchImportMetadata'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_generate_bacth_id_metadata",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_generate_bacth_id_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get data from Storage
    # @param batch_id [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def batch_import_get_batch_s3_data(batch_id, culture, opts = {})
      data, _status_code, _headers = batch_import_get_batch_s3_data_with_http_info(batch_id, culture, opts)
      data
    end

    # Get data from Storage
    # @param batch_id [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def batch_import_get_batch_s3_data_with_http_info(batch_id, culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_get_batch_s3_data ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_get_batch_s3_data"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/get-batch-s3-data/{batchId}'.sub('{' + 'batchId' + '}', CGI.escape(batch_id.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_get_batch_s3_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_get_batch_s3_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get custom template
    # @param template_id [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def batch_import_get_custom_template(template_id, culture, opts = {})
      data, _status_code, _headers = batch_import_get_custom_template_with_http_info(template_id, culture, opts)
      data
    end

    # Get custom template
    # @param template_id [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def batch_import_get_custom_template_with_http_info(template_id, culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_get_custom_template ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_get_custom_template"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/custom-template/{templateId}'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_get_custom_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_get_custom_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Original File
    # @param batch_id [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def batch_import_get_orgingal_file(batch_id, culture, opts = {})
      data, _status_code, _headers = batch_import_get_orgingal_file_with_http_info(batch_id, culture, opts)
      data
    end

    # Get Original File
    # @param batch_id [String] 
    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def batch_import_get_orgingal_file_with_http_info(batch_id, culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_get_orgingal_file ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_get_orgingal_file"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/get-batch-import-org-file/{batchId}'.sub('{' + 'batchId' + '}', CGI.escape(batch_id.to_s)).sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_get_orgingal_file",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_get_orgingal_file\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get presign url to upload the file with payloads
    # @param culture [String] 
    # @param batch_import_payload [BatchImportPayload] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id 
    # @return [File]
    def batch_import_get_presign(culture, batch_import_payload, opts = {})
      data, _status_code, _headers = batch_import_get_presign_with_http_info(culture, batch_import_payload, opts)
      data
    end

    # Get presign url to upload the file with payloads
    # @param culture [String] 
    # @param batch_import_payload [BatchImportPayload] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :id 
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def batch_import_get_presign_with_http_info(culture, batch_import_payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_get_presign ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_get_presign"
      end
      # verify the required parameter 'batch_import_payload' is set
      if @api_client.config.client_side_validation && batch_import_payload.nil?
        fail ArgumentError, "Missing the required parameter 'batch_import_payload' when calling BatchImportApi.batch_import_get_presign"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/get-presign-for-upload-simpledoc'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'id'] = opts[:'id'] if !opts[:'id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_import_payload)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_get_presign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_get_presign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Mark the batch as viewed in notification.
    # @param culture [String] 
    # @param body [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id 
    # @option opts [String] :batch_id 
    # @return [Boolean]
    def batch_import_mark_viewed(culture, body, opts = {})
      data, _status_code, _headers = batch_import_mark_viewed_with_http_info(culture, body, opts)
      data
    end

    # Mark the batch as viewed in notification.
    # @param culture [String] 
    # @param body [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :user_id 
    # @option opts [String] :batch_id 
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def batch_import_mark_viewed_with_http_info(culture, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_mark_viewed ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_mark_viewed"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BatchImportApi.batch_import_mark_viewed"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/mark-viewed'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'userId'] = opts[:'user_id'] if !opts[:'user_id'].nil?
      query_params[:'batchId'] = opts[:'batch_id'] if !opts[:'batch_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_mark_viewed",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_mark_viewed\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query the batch by id and status
    # @param culture [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchImportStatus] :status 
    # @return [BatchStatus]
    def batch_import_query_batch(culture, body, opts = {})
      data, _status_code, _headers = batch_import_query_batch_with_http_info(culture, body, opts)
      data
    end

    # Query the batch by id and status
    # @param culture [String] 
    # @param body [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [BatchImportStatus] :status 
    # @return [Array<(BatchStatus, Integer, Hash)>] BatchStatus data, response status code and response headers
    def batch_import_query_batch_with_http_info(culture, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_query_batch ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_query_batch"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling BatchImportApi.batch_import_query_batch"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/query-batch'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BatchStatus'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_query_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_query_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [BatchHistory]
    def batch_import_query_batch_history(culture, opts = {})
      data, _status_code, _headers = batch_import_query_batch_history_with_http_info(culture, opts)
      data
    end

    # @param culture [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BatchHistory, Integer, Hash)>] BatchHistory data, response status code and response headers
    def batch_import_query_batch_history_with_http_info(culture, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_query_batch_history ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_query_batch_history"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/batch-import-history'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'BatchHistory'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_query_batch_history",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_query_batch_history\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param culture [String] 
    # @param batch_import_retry [BatchImportRetry] 
    # @param [Hash] opts the optional parameters
    # @return [Boolean]
    def batch_import_retry_simple_documents(culture, batch_import_retry, opts = {})
      data, _status_code, _headers = batch_import_retry_simple_documents_with_http_info(culture, batch_import_retry, opts)
      data
    end

    # @param culture [String] 
    # @param batch_import_retry [BatchImportRetry] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Boolean, Integer, Hash)>] Boolean data, response status code and response headers
    def batch_import_retry_simple_documents_with_http_info(culture, batch_import_retry, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_retry_simple_documents ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_retry_simple_documents"
      end
      # verify the required parameter 'batch_import_retry' is set
      if @api_client.config.client_side_validation && batch_import_retry.nil?
        fail ArgumentError, "Missing the required parameter 'batch_import_retry' when calling BatchImportApi.batch_import_retry_simple_documents"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/retry-simple-documents'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(batch_import_retry)

      # return_type
      return_type = opts[:debug_return_type] || 'Boolean'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_retry_simple_documents",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_retry_simple_documents\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create or Update (Upsert) custom template
    # @param culture [String] 
    # @param custom_template [CustomTemplate] 
    # @param [Hash] opts the optional parameters
    # @return [File]
    def batch_import_upsert_custom_template(culture, custom_template, opts = {})
      data, _status_code, _headers = batch_import_upsert_custom_template_with_http_info(culture, custom_template, opts)
      data
    end

    # Create or Update (Upsert) custom template
    # @param culture [String] 
    # @param custom_template [CustomTemplate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def batch_import_upsert_custom_template_with_http_info(culture, custom_template, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: BatchImportApi.batch_import_upsert_custom_template ...'
      end
      # verify the required parameter 'culture' is set
      if @api_client.config.client_side_validation && culture.nil?
        fail ArgumentError, "Missing the required parameter 'culture' when calling BatchImportApi.batch_import_upsert_custom_template"
      end
      # verify the required parameter 'custom_template' is set
      if @api_client.config.client_side_validation && custom_template.nil?
        fail ArgumentError, "Missing the required parameter 'custom_template' when calling BatchImportApi.batch_import_upsert_custom_template"
      end
      # resource path
      local_var_path = '/{culture}/cash-invoices/custom-template'.sub('{' + 'culture' + '}', CGI.escape(culture.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/octet-stream'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(custom_template)

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearer']

      new_options = opts.merge(
        :operation => :"BatchImportApi.batch_import_upsert_custom_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: BatchImportApi#batch_import_upsert_custom_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
